begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * Find all classes referenced by given start class and all classes  * referenced by tjose and so on. In other words: Compute the tranitive  * hull of classes used by a given class. This is done by checking all  * ConstantClass entries and all method and field signatures.<br> This  * may be useful in order to put all class files of an application  * into a single JAR file.  *<p>  * It fails however in the presence of reflection code.  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
class|class
name|TransitiveHull
extends|extends
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|EmptyVisitor
block|{
specifier|private
name|JavaClass
name|_class
decl_stmt|;
specifier|private
name|ClassQueue
name|_queue
decl_stmt|;
specifier|private
name|ClassSet
name|_set
decl_stmt|;
specifier|private
name|ConstantPool
name|_cp
decl_stmt|;
specifier|private
name|String
index|[]
name|_ignored
init|=
block|{
literal|"java[.].*"
block|,
literal|"javax[.].*"
block|,
literal|"com[.]sun[.].*"
block|}
decl_stmt|;
specifier|public
name|TransitiveHull
parameter_list|(
name|JavaClass
name|clazz
parameter_list|)
block|{
name|_queue
operator|=
operator|new
name|ClassQueue
argument_list|()
expr_stmt|;
name|_queue
operator|.
name|enqueue
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|_set
operator|=
operator|new
name|ClassSet
argument_list|()
expr_stmt|;
name|_set
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JavaClass
index|[]
name|getClasses
parameter_list|()
block|{
return|return
name|_set
operator|.
name|toArray
argument_list|()
return|;
block|}
specifier|public
name|String
index|[]
name|getClassNames
parameter_list|()
block|{
return|return
name|_set
operator|.
name|getClassNames
argument_list|()
return|;
block|}
comment|/**    * Start traversal using DescendingVisitor pattern.    */
specifier|public
name|void
name|start
parameter_list|()
block|{
while|while
condition|(
operator|!
name|_queue
operator|.
name|empty
argument_list|()
condition|)
block|{
name|JavaClass
name|clazz
init|=
name|_queue
operator|.
name|dequeue
argument_list|()
decl_stmt|;
name|_class
operator|=
name|clazz
expr_stmt|;
name|_cp
operator|=
name|clazz
operator|.
name|getConstantPool
argument_list|()
expr_stmt|;
operator|new
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|DescendingVisitor
argument_list|(
name|clazz
argument_list|,
name|this
argument_list|)
operator|.
name|visit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|add
parameter_list|(
name|String
name|class_name
parameter_list|)
block|{
name|class_name
operator|=
name|class_name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_ignored
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|class_name
operator|.
name|matches
argument_list|(
name|_ignored
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return;
comment|// Ihh
block|}
block|}
name|JavaClass
name|clazz
init|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|class_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|_set
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|_queue
operator|.
name|enqueue
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|visitConstantClass
parameter_list|(
name|ConstantClass
name|cc
parameter_list|)
block|{
name|String
name|class_name
init|=
operator|(
name|String
operator|)
name|cc
operator|.
name|getConstantValue
argument_list|(
name|_cp
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|class_name
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|visitRef
parameter_list|(
name|ConstantCP
name|ccp
parameter_list|,
name|boolean
name|method
parameter_list|)
block|{
name|String
name|class_name
init|=
name|ccp
operator|.
name|getClass
argument_list|(
name|_cp
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|class_name
argument_list|)
expr_stmt|;
name|ConstantNameAndType
name|cnat
init|=
operator|(
name|ConstantNameAndType
operator|)
name|_cp
operator|.
name|getConstant
argument_list|(
name|ccp
operator|.
name|getNameAndTypeIndex
argument_list|()
argument_list|,
name|Constants
operator|.
name|CONSTANT_NameAndType
argument_list|)
decl_stmt|;
name|String
name|signature
init|=
name|cnat
operator|.
name|getSignature
argument_list|(
name|_cp
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
condition|)
block|{
name|Type
name|type
init|=
name|Type
operator|.
name|getReturnType
argument_list|(
name|signature
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|ObjectType
condition|)
block|{
name|add
argument_list|(
operator|(
operator|(
name|ObjectType
operator|)
name|type
operator|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Type
index|[]
name|types
init|=
name|Type
operator|.
name|getArgumentTypes
argument_list|(
name|signature
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|type
operator|=
name|types
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|ObjectType
condition|)
block|{
name|add
argument_list|(
operator|(
operator|(
name|ObjectType
operator|)
name|type
operator|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Type
name|type
init|=
name|Type
operator|.
name|getType
argument_list|(
name|signature
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|ObjectType
condition|)
block|{
name|add
argument_list|(
operator|(
operator|(
name|ObjectType
operator|)
name|type
operator|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|visitConstantMethodref
parameter_list|(
name|ConstantMethodref
name|cmr
parameter_list|)
block|{
name|visitRef
argument_list|(
name|cmr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitConstantInterfaceMethodref
parameter_list|(
name|ConstantInterfaceMethodref
name|cimr
parameter_list|)
block|{
name|visitRef
argument_list|(
name|cimr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitConstantFieldref
parameter_list|(
name|ConstantFieldref
name|cfr
parameter_list|)
block|{
name|visitRef
argument_list|(
name|cfr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
block|{
name|ClassParser
name|parser
init|=
literal|null
decl_stmt|;
name|JavaClass
name|java_class
decl_stmt|;
try|try
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"transitive: No input files specified"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|java_class
operator|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|java_class
operator|=
operator|new
name|ClassParser
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
name|TransitiveHull
name|hull
init|=
operator|new
name|TransitiveHull
argument_list|(
name|java_class
argument_list|)
decl_stmt|;
name|hull
operator|.
name|start
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|hull
operator|.
name|getClassNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

