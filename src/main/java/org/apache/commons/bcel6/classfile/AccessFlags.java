begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Super class for all objects that have modifiers like private, final, ...  * I.e. classes, fields, and methods.  *  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AccessFlags
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2845404654039163061L
decl_stmt|;
specifier|private
specifier|final
name|int
name|access_flags
decl_stmt|;
specifier|public
name|AccessFlags
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param a inital access flags      */
specifier|public
name|AccessFlags
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|access_flags
operator|=
name|a
expr_stmt|;
block|}
comment|/**       * @return Access flags of the object aka. "modifiers".      */
specifier|public
specifier|final
name|int
name|getAccessFlags
parameter_list|()
block|{
return|return
name|access_flags
return|;
block|}
comment|/**       * @return Access flags of the object aka. "modifiers".      */
specifier|public
specifier|final
name|int
name|getModifiers
parameter_list|()
block|{
return|return
name|access_flags
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isPublic
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_PUBLIC
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isPrivate
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_PRIVATE
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isProtected
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_PROTECTED
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isStatic
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_STATIC
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isFinal
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_FINAL
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isSynchronized
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_SYNCHRONIZED
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isVolatile
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_VOLATILE
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isTransient
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_TRANSIENT
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isNative
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_NATIVE
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isInterface
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_INTERFACE
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_ABSTRACT
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isStrictfp
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_STRICT
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isSynthetic
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_SYNTHETIC
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isAnnotation
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_ANNOTATION
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isEnum
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_ENUM
operator|)
operator|!=
literal|0
return|;
block|}
block|}
end_class

end_unit

