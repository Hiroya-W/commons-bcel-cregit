begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
package|;
end_package

begin_class
specifier|public
specifier|abstract
class|class
name|ExceptionConst
implements|implements
name|ExceptionConstants
block|{
comment|/**      * Pre-defined exception arrays according to chapters 5.1-5.4 of the Java Virtual      * Machine Specification       */
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|EXCS_CLASS_AND_INTERFACE_RESOLUTION
init|=
block|{
name|NO_CLASS_DEF_FOUND_ERROR
block|,
name|CLASS_FORMAT_ERROR
block|,
name|VERIFY_ERROR
block|,
name|ABSTRACT_METHOD_ERROR
block|,
name|EXCEPTION_IN_INITIALIZER_ERROR
block|,
name|ILLEGAL_ACCESS_ERROR
block|}
decl_stmt|;
comment|// Chapter 5.1
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|EXCS_FIELD_AND_METHOD_RESOLUTION
init|=
block|{
name|NO_SUCH_FIELD_ERROR
block|,
name|ILLEGAL_ACCESS_ERROR
block|,
name|NO_SUCH_METHOD_ERROR
block|}
decl_stmt|;
comment|// Chapter 5.2
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|EXCS_INTERFACE_METHOD_RESOLUTION
init|=
operator|new
name|Class
index|[
literal|0
index|]
decl_stmt|;
comment|// Chapter 5.3 (as below)
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|EXCS_STRING_RESOLUTION
init|=
operator|new
name|Class
index|[
literal|0
index|]
decl_stmt|;
comment|// Chapter 5.4 (no errors but the ones that _always_ could happen! How stupid.)
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|EXCS_ARRAY_EXCEPTION
init|=
block|{
name|NULL_POINTER_EXCEPTION
block|,
name|ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION
block|}
decl_stmt|;
comment|/**       * Enum corresponding to the various Exception Class arrays,       * used by {@link ExceptionConstants#createExceptions(EXCS, Class...)}      */
specifier|public
enum|enum
name|EXCS
block|{
name|EXCS_CLASS_AND_INTERFACE_RESOLUTION
block|,
name|EXCS_FIELD_AND_METHOD_RESOLUTION
block|,
name|EXCS_INTERFACE_METHOD_RESOLUTION
block|,
name|EXCS_STRING_RESOLUTION
block|,
name|EXCS_ARRAY_EXCEPTION
block|,     }
empty_stmt|;
comment|// helper method to merge exception class arrays
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|mergeExceptions
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|input
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|extraClasses
parameter_list|)
block|{
name|int
name|extraLen
init|=
name|extraClasses
operator|==
literal|null
condition|?
literal|0
else|:
name|extraClasses
operator|.
name|length
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|excs
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
name|input
operator|.
name|length
operator|+
name|extraLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|input
argument_list|,
literal|0
argument_list|,
name|excs
argument_list|,
literal|0
argument_list|,
name|input
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraLen
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|extraClasses
argument_list|,
literal|0
argument_list|,
name|excs
argument_list|,
name|input
operator|.
name|length
argument_list|,
name|extraLen
argument_list|)
expr_stmt|;
block|}
return|return
name|excs
return|;
block|}
comment|/**      * Creates a copy of the specified Exception Class array combined with any additional Exception classes.      * @param type the basic array type      * @param extraClasses additional classes, if any      * @return the merged array      */
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|createExceptions
parameter_list|(
name|EXCS
name|type
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|extraClasses
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|EXCS_CLASS_AND_INTERFACE_RESOLUTION
case|:
return|return
name|mergeExceptions
argument_list|(
name|EXCS_CLASS_AND_INTERFACE_RESOLUTION
argument_list|,
name|extraClasses
argument_list|)
return|;
case|case
name|EXCS_ARRAY_EXCEPTION
case|:
return|return
name|mergeExceptions
argument_list|(
name|EXCS_ARRAY_EXCEPTION
argument_list|,
name|extraClasses
argument_list|)
return|;
case|case
name|EXCS_FIELD_AND_METHOD_RESOLUTION
case|:
return|return
name|mergeExceptions
argument_list|(
name|EXCS_FIELD_AND_METHOD_RESOLUTION
argument_list|,
name|extraClasses
argument_list|)
return|;
case|case
name|EXCS_INTERFACE_METHOD_RESOLUTION
case|:
return|return
name|mergeExceptions
argument_list|(
name|EXCS_INTERFACE_METHOD_RESOLUTION
argument_list|,
name|extraClasses
argument_list|)
return|;
case|case
name|EXCS_STRING_RESOLUTION
case|:
return|return
name|mergeExceptions
argument_list|(
name|EXCS_STRING_RESOLUTION
argument_list|,
name|extraClasses
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cannot happen; unexpected enum value: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

