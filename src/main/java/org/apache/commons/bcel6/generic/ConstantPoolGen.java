begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantCP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantFieldref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantInterfaceMethodref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantInvokeDynamic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantMethodref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantNameAndType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|ConstantUtf8
import|;
end_import

begin_comment
comment|/**   * This class is used to build up a constant pool. The user adds  * constants via `addXXX' methods, `addString', `addClass',  * etc.. These methods return an index into the constant  * pool. Finally, `getFinalConstantPool()' returns the constant pool  * built up. Intermediate versions of the constant pool can be  * obtained with `getConstantPool()'. A constant pool has capacity for  * Constants.MAX_SHORT entries. Note that the first (0) is used by the  * JVM and that Double and Long constants need two slots.  *  * @version $Id$  * @see Constant  */
end_comment

begin_class
specifier|public
class|class
name|ConstantPoolGen
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6664071417323174824L
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
specifier|protected
name|Constant
index|[]
name|constants
decl_stmt|;
specifier|private
name|int
name|index
init|=
literal|1
decl_stmt|;
comment|// First entry (0) used by JVM
specifier|private
specifier|static
specifier|final
name|String
name|METHODREF_DELIM
init|=
literal|":"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IMETHODREF_DELIM
init|=
literal|"#"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FIELDREF_DELIM
init|=
literal|"&"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAT_DELIM
init|=
literal|"%"
decl_stmt|;
specifier|private
specifier|static
class|class
name|Index
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|9187078620578535161L
decl_stmt|;
name|int
name|index
decl_stmt|;
name|Index
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|index
operator|=
name|i
expr_stmt|;
block|}
block|}
comment|/**      * Initialize with given array of constants.      *      * @param cs array of given constants, new ones will be appended      */
specifier|public
name|ConstantPoolGen
parameter_list|(
name|Constant
index|[]
name|cs
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|size
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|256
argument_list|,
name|cs
operator|.
name|length
operator|+
literal|64
argument_list|)
expr_stmt|;
name|constants
operator|=
operator|new
name|Constant
index|[
name|size
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|cs
argument_list|,
literal|0
argument_list|,
name|constants
argument_list|,
literal|0
argument_list|,
name|cs
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|index
operator|=
name|cs
operator|.
name|length
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
name|Constant
name|c
init|=
name|constants
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|ConstantString
condition|)
block|{
name|ConstantString
name|s
init|=
operator|(
name|ConstantString
operator|)
name|c
decl_stmt|;
name|ConstantUtf8
name|u8
init|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|s
operator|.
name|getStringIndex
argument_list|()
index|]
decl_stmt|;
name|String
name|key
init|=
name|u8
operator|.
name|getBytes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|string_table
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|string_table
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Index
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|c
operator|instanceof
name|ConstantClass
condition|)
block|{
name|ConstantClass
name|s
init|=
operator|(
name|ConstantClass
operator|)
name|c
decl_stmt|;
name|ConstantUtf8
name|u8
init|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|s
operator|.
name|getNameIndex
argument_list|()
index|]
decl_stmt|;
name|String
name|key
init|=
name|u8
operator|.
name|getBytes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|class_table
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|class_table
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Index
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|c
operator|instanceof
name|ConstantNameAndType
condition|)
block|{
name|ConstantNameAndType
name|n
init|=
operator|(
name|ConstantNameAndType
operator|)
name|c
decl_stmt|;
name|ConstantUtf8
name|u8
init|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|n
operator|.
name|getNameIndex
argument_list|()
index|]
decl_stmt|;
name|ConstantUtf8
name|u8_2
init|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|n
operator|.
name|getSignatureIndex
argument_list|()
index|]
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|u8
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|NAT_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|u8_2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|sb
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|n_a_t_table
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|n_a_t_table
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Index
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|c
operator|instanceof
name|ConstantUtf8
condition|)
block|{
name|ConstantUtf8
name|u
init|=
operator|(
name|ConstantUtf8
operator|)
name|c
decl_stmt|;
name|String
name|key
init|=
name|u
operator|.
name|getBytes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|utf8_table
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|utf8_table
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Index
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|c
operator|instanceof
name|ConstantCP
condition|)
block|{
name|ConstantCP
name|m
init|=
operator|(
name|ConstantCP
operator|)
name|c
decl_stmt|;
name|String
name|class_name
decl_stmt|;
name|ConstantUtf8
name|u8
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|ConstantInvokeDynamic
condition|)
block|{
name|class_name
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|m
operator|.
name|getBootstrapMethodAttrIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// since name can't begin with digit, can  use
comment|// METHODREF_DELIM with out fear of duplicates.
block|}
else|else
block|{
name|ConstantClass
name|clazz
init|=
operator|(
name|ConstantClass
operator|)
name|constants
index|[
name|m
operator|.
name|getClassIndex
argument_list|()
index|]
decl_stmt|;
name|u8
operator|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|clazz
operator|.
name|getNameIndex
argument_list|()
index|]
expr_stmt|;
name|class_name
operator|=
name|u8
operator|.
name|getBytes
argument_list|()
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|ConstantNameAndType
name|n
init|=
operator|(
name|ConstantNameAndType
operator|)
name|constants
index|[
name|m
operator|.
name|getNameAndTypeIndex
argument_list|()
index|]
decl_stmt|;
name|u8
operator|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|n
operator|.
name|getNameIndex
argument_list|()
index|]
expr_stmt|;
name|String
name|method_name
init|=
name|u8
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|u8
operator|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|n
operator|.
name|getSignatureIndex
argument_list|()
index|]
expr_stmt|;
name|String
name|signature
init|=
name|u8
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|String
name|delim
init|=
name|METHODREF_DELIM
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|ConstantInterfaceMethodref
condition|)
block|{
name|delim
operator|=
name|IMETHODREF_DELIM
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|instanceof
name|ConstantFieldref
condition|)
block|{
name|delim
operator|=
name|FIELDREF_DELIM
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|class_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|method_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|sb
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cp_table
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cp_table
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Index
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Initialize with given constant pool.      */
specifier|public
name|ConstantPoolGen
parameter_list|(
name|ConstantPool
name|cp
parameter_list|)
block|{
name|this
argument_list|(
name|cp
operator|.
name|getConstantPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create empty constant pool.      */
specifier|public
name|ConstantPoolGen
parameter_list|()
block|{
name|size
operator|=
literal|256
expr_stmt|;
name|constants
operator|=
operator|new
name|Constant
index|[
name|size
index|]
expr_stmt|;
block|}
comment|/** Resize internal array of constants.      */
specifier|protected
name|void
name|adjustSize
parameter_list|()
block|{
if|if
condition|(
name|index
operator|+
literal|3
operator|>=
name|size
condition|)
block|{
name|Constant
index|[]
name|cs
init|=
name|constants
decl_stmt|;
name|size
operator|*=
literal|2
expr_stmt|;
name|constants
operator|=
operator|new
name|Constant
index|[
name|size
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|cs
argument_list|,
literal|0
argument_list|,
name|constants
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Index
argument_list|>
name|string_table
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**       * Look for ConstantString in ConstantPool containing String `str'.      *      * @param str String to search for      * @return index on success, -1 otherwise      */
specifier|public
name|int
name|lookupString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|Index
name|index
init|=
name|string_table
operator|.
name|get
argument_list|(
name|str
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|!=
literal|null
operator|)
condition|?
name|index
operator|.
name|index
else|:
operator|-
literal|1
return|;
block|}
comment|/**      * Add a new String constant to the ConstantPool, if it is not already in there.      *      * @param str String to add      * @return index of entry      */
specifier|public
name|int
name|addString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|lookupString
argument_list|(
name|str
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
comment|// Already in CP
block|}
name|int
name|utf8
init|=
name|addUtf8
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|adjustSize
argument_list|()
expr_stmt|;
name|ConstantString
name|s
init|=
operator|new
name|ConstantString
argument_list|(
name|utf8
argument_list|)
decl_stmt|;
name|ret
operator|=
name|index
expr_stmt|;
name|constants
index|[
name|index
operator|++
index|]
operator|=
name|s
expr_stmt|;
if|if
condition|(
operator|!
name|string_table
operator|.
name|containsKey
argument_list|(
name|str
argument_list|)
condition|)
block|{
name|string_table
operator|.
name|put
argument_list|(
name|str
argument_list|,
operator|new
name|Index
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Index
argument_list|>
name|class_table
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Look for ConstantClass in ConstantPool named `str'.      *      * @param str String to search for      * @return index on success, -1 otherwise      */
specifier|public
name|int
name|lookupClass
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|Index
name|index
init|=
name|class_table
operator|.
name|get
argument_list|(
name|str
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|!=
literal|null
operator|)
condition|?
name|index
operator|.
name|index
else|:
operator|-
literal|1
return|;
block|}
specifier|private
name|int
name|addClass_
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|lookupClass
argument_list|(
name|clazz
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
comment|// Already in CP
block|}
name|adjustSize
argument_list|()
expr_stmt|;
name|ConstantClass
name|c
init|=
operator|new
name|ConstantClass
argument_list|(
name|addUtf8
argument_list|(
name|clazz
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|=
name|index
expr_stmt|;
name|constants
index|[
name|index
operator|++
index|]
operator|=
name|c
expr_stmt|;
if|if
condition|(
operator|!
name|class_table
operator|.
name|containsKey
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|class_table
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
operator|new
name|Index
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Add a new Class reference to the ConstantPool, if it is not already in there.      *      * @param str Class to add      * @return index of entry      */
specifier|public
name|int
name|addClass
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|addClass_
argument_list|(
name|str
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Add a new Class reference to the ConstantPool for a given type.      *      * @param type Class to add      * @return index of entry      */
specifier|public
name|int
name|addClass
parameter_list|(
name|ObjectType
name|type
parameter_list|)
block|{
return|return
name|addClass
argument_list|(
name|type
operator|.
name|getClassName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Add a reference to an array class (e.g. String[][]) as needed by MULTIANEWARRAY      * instruction, e.g. to the ConstantPool.      *      * @param type type of array class      * @return index of entry      */
specifier|public
name|int
name|addArrayClass
parameter_list|(
name|ArrayType
name|type
parameter_list|)
block|{
return|return
name|addClass_
argument_list|(
name|type
operator|.
name|getSignature
argument_list|()
argument_list|)
return|;
block|}
comment|/**       * Look for ConstantInteger in ConstantPool.      *      * @param n integer number to look for      * @return index on success, -1 otherwise      */
specifier|public
name|int
name|lookupInteger
parameter_list|(
name|int
name|n
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|constants
index|[
name|i
index|]
operator|instanceof
name|ConstantInteger
condition|)
block|{
name|ConstantInteger
name|c
init|=
operator|(
name|ConstantInteger
operator|)
name|constants
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getBytes
argument_list|()
operator|==
name|n
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Add a new Integer constant to the ConstantPool, if it is not already in there.      *      * @param n integer number to add      * @return index of entry      */
specifier|public
name|int
name|addInteger
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|lookupInteger
argument_list|(
name|n
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
comment|// Already in CP
block|}
name|adjustSize
argument_list|()
expr_stmt|;
name|ret
operator|=
name|index
expr_stmt|;
name|constants
index|[
name|index
operator|++
index|]
operator|=
operator|new
name|ConstantInteger
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**       * Look for ConstantFloat in ConstantPool.      *      * @param n Float number to look for      * @return index on success, -1 otherwise      */
specifier|public
name|int
name|lookupFloat
parameter_list|(
name|float
name|n
parameter_list|)
block|{
name|int
name|bits
init|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|constants
index|[
name|i
index|]
operator|instanceof
name|ConstantFloat
condition|)
block|{
name|ConstantFloat
name|c
init|=
operator|(
name|ConstantFloat
operator|)
name|constants
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|c
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|==
name|bits
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Add a new Float constant to the ConstantPool, if it is not already in there.      *      * @param n Float number to add      * @return index of entry      */
specifier|public
name|int
name|addFloat
parameter_list|(
name|float
name|n
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|lookupFloat
argument_list|(
name|n
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
comment|// Already in CP
block|}
name|adjustSize
argument_list|()
expr_stmt|;
name|ret
operator|=
name|index
expr_stmt|;
name|constants
index|[
name|index
operator|++
index|]
operator|=
operator|new
name|ConstantFloat
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Index
argument_list|>
name|utf8_table
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**       * Look for ConstantUtf8 in ConstantPool.      *      * @param n Utf8 string to look for      * @return index on success, -1 otherwise      */
specifier|public
name|int
name|lookupUtf8
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|Index
name|index
init|=
name|utf8_table
operator|.
name|get
argument_list|(
name|n
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|!=
literal|null
operator|)
condition|?
name|index
operator|.
name|index
else|:
operator|-
literal|1
return|;
block|}
comment|/**      * Add a new Utf8 constant to the ConstantPool, if it is not already in there.      *      * @param n Utf8 string to add      * @return index of entry      */
specifier|public
name|int
name|addUtf8
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|lookupUtf8
argument_list|(
name|n
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
comment|// Already in CP
block|}
name|adjustSize
argument_list|()
expr_stmt|;
name|ret
operator|=
name|index
expr_stmt|;
name|constants
index|[
name|index
operator|++
index|]
operator|=
operator|new
name|ConstantUtf8
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|utf8_table
operator|.
name|containsKey
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|utf8_table
operator|.
name|put
argument_list|(
name|n
argument_list|,
operator|new
name|Index
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**       * Look for ConstantLong in ConstantPool.      *      * @param n Long number to look for      * @return index on success, -1 otherwise      */
specifier|public
name|int
name|lookupLong
parameter_list|(
name|long
name|n
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|constants
index|[
name|i
index|]
operator|instanceof
name|ConstantLong
condition|)
block|{
name|ConstantLong
name|c
init|=
operator|(
name|ConstantLong
operator|)
name|constants
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getBytes
argument_list|()
operator|==
name|n
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Add a new long constant to the ConstantPool, if it is not already in there.      *      * @param n Long number to add      * @return index of entry      */
specifier|public
name|int
name|addLong
parameter_list|(
name|long
name|n
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|lookupLong
argument_list|(
name|n
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
comment|// Already in CP
block|}
name|adjustSize
argument_list|()
expr_stmt|;
name|ret
operator|=
name|index
expr_stmt|;
name|constants
index|[
name|index
index|]
operator|=
operator|new
name|ConstantLong
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|2
expr_stmt|;
comment|// Wastes one entry according to spec
return|return
name|ret
return|;
block|}
comment|/**       * Look for ConstantDouble in ConstantPool.      *      * @param n Double number to look for      * @return index on success, -1 otherwise      */
specifier|public
name|int
name|lookupDouble
parameter_list|(
name|double
name|n
parameter_list|)
block|{
name|long
name|bits
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|constants
index|[
name|i
index|]
operator|instanceof
name|ConstantDouble
condition|)
block|{
name|ConstantDouble
name|c
init|=
operator|(
name|ConstantDouble
operator|)
name|constants
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|c
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|==
name|bits
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Add a new double constant to the ConstantPool, if it is not already in there.      *      * @param n Double number to add      * @return index of entry      */
specifier|public
name|int
name|addDouble
parameter_list|(
name|double
name|n
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|lookupDouble
argument_list|(
name|n
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
comment|// Already in CP
block|}
name|adjustSize
argument_list|()
expr_stmt|;
name|ret
operator|=
name|index
expr_stmt|;
name|constants
index|[
name|index
index|]
operator|=
operator|new
name|ConstantDouble
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|2
expr_stmt|;
comment|// Wastes one entry according to spec
return|return
name|ret
return|;
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Index
argument_list|>
name|n_a_t_table
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**       * Look for ConstantNameAndType in ConstantPool.      *      * @param name of variable/method      * @param signature of variable/method      * @return index on success, -1 otherwise      */
specifier|public
name|int
name|lookupNameAndType
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|signature
parameter_list|)
block|{
name|Index
name|_index
init|=
name|n_a_t_table
operator|.
name|get
argument_list|(
name|name
operator|+
name|NAT_DELIM
operator|+
name|signature
argument_list|)
decl_stmt|;
return|return
operator|(
name|_index
operator|!=
literal|null
operator|)
condition|?
name|_index
operator|.
name|index
else|:
operator|-
literal|1
return|;
block|}
comment|/**      * Add a new NameAndType constant to the ConstantPool if it is not already       * in there.      *      * @param name Name string to add      * @param signature signature string to add      * @return index of entry      */
specifier|public
name|int
name|addNameAndType
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|signature
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|int
name|name_index
decl_stmt|,
name|signature_index
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|lookupNameAndType
argument_list|(
name|name
argument_list|,
name|signature
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
comment|// Already in CP
block|}
name|adjustSize
argument_list|()
expr_stmt|;
name|name_index
operator|=
name|addUtf8
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|signature_index
operator|=
name|addUtf8
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|ret
operator|=
name|index
expr_stmt|;
name|constants
index|[
name|index
operator|++
index|]
operator|=
operator|new
name|ConstantNameAndType
argument_list|(
name|name_index
argument_list|,
name|signature_index
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|name
operator|+
name|NAT_DELIM
operator|+
name|signature
decl_stmt|;
if|if
condition|(
operator|!
name|n_a_t_table
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|n_a_t_table
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Index
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Index
argument_list|>
name|cp_table
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**       * Look for ConstantMethodref in ConstantPool.      *      * @param class_name Where to find method      * @param method_name Guess what      * @param signature return and argument types      * @return index on success, -1 otherwise      */
specifier|public
name|int
name|lookupMethodref
parameter_list|(
name|String
name|class_name
parameter_list|,
name|String
name|method_name
parameter_list|,
name|String
name|signature
parameter_list|)
block|{
name|Index
name|index
init|=
name|cp_table
operator|.
name|get
argument_list|(
name|class_name
operator|+
name|METHODREF_DELIM
operator|+
name|method_name
operator|+
name|METHODREF_DELIM
operator|+
name|signature
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|!=
literal|null
operator|)
condition|?
name|index
operator|.
name|index
else|:
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|lookupMethodref
parameter_list|(
name|MethodGen
name|method
parameter_list|)
block|{
return|return
name|lookupMethodref
argument_list|(
name|method
operator|.
name|getClassName
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getSignature
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Add a new Methodref constant to the ConstantPool, if it is not already       * in there.      *      * @param class_name class name string to add      * @param method_name method name string to add      * @param signature method signature string to add      * @return index of entry      */
specifier|public
name|int
name|addMethodref
parameter_list|(
name|String
name|class_name
parameter_list|,
name|String
name|method_name
parameter_list|,
name|String
name|signature
parameter_list|)
block|{
name|int
name|ret
decl_stmt|,
name|class_index
decl_stmt|,
name|name_and_type_index
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|lookupMethodref
argument_list|(
name|class_name
argument_list|,
name|method_name
argument_list|,
name|signature
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
comment|// Already in CP
block|}
name|adjustSize
argument_list|()
expr_stmt|;
name|name_and_type_index
operator|=
name|addNameAndType
argument_list|(
name|method_name
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|class_index
operator|=
name|addClass
argument_list|(
name|class_name
argument_list|)
expr_stmt|;
name|ret
operator|=
name|index
expr_stmt|;
name|constants
index|[
name|index
operator|++
index|]
operator|=
operator|new
name|ConstantMethodref
argument_list|(
name|class_index
argument_list|,
name|name_and_type_index
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|class_name
operator|+
name|METHODREF_DELIM
operator|+
name|method_name
operator|+
name|METHODREF_DELIM
operator|+
name|signature
decl_stmt|;
if|if
condition|(
operator|!
name|cp_table
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cp_table
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Index
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|addMethodref
parameter_list|(
name|MethodGen
name|method
parameter_list|)
block|{
return|return
name|addMethodref
argument_list|(
name|method
operator|.
name|getClassName
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getSignature
argument_list|()
argument_list|)
return|;
block|}
comment|/**       * Look for ConstantInterfaceMethodref in ConstantPool.      *      * @param class_name Where to find method      * @param method_name Guess what      * @param signature return and argument types      * @return index on success, -1 otherwise      */
specifier|public
name|int
name|lookupInterfaceMethodref
parameter_list|(
name|String
name|class_name
parameter_list|,
name|String
name|method_name
parameter_list|,
name|String
name|signature
parameter_list|)
block|{
name|Index
name|index
init|=
name|cp_table
operator|.
name|get
argument_list|(
name|class_name
operator|+
name|IMETHODREF_DELIM
operator|+
name|method_name
operator|+
name|IMETHODREF_DELIM
operator|+
name|signature
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|!=
literal|null
operator|)
condition|?
name|index
operator|.
name|index
else|:
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|lookupInterfaceMethodref
parameter_list|(
name|MethodGen
name|method
parameter_list|)
block|{
return|return
name|lookupInterfaceMethodref
argument_list|(
name|method
operator|.
name|getClassName
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getSignature
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Add a new InterfaceMethodref constant to the ConstantPool, if it is not already       * in there.      *      * @param class_name class name string to add      * @param method_name method name string to add      * @param signature signature string to add      * @return index of entry      */
specifier|public
name|int
name|addInterfaceMethodref
parameter_list|(
name|String
name|class_name
parameter_list|,
name|String
name|method_name
parameter_list|,
name|String
name|signature
parameter_list|)
block|{
name|int
name|ret
decl_stmt|,
name|class_index
decl_stmt|,
name|name_and_type_index
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|lookupInterfaceMethodref
argument_list|(
name|class_name
argument_list|,
name|method_name
argument_list|,
name|signature
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
comment|// Already in CP
block|}
name|adjustSize
argument_list|()
expr_stmt|;
name|class_index
operator|=
name|addClass
argument_list|(
name|class_name
argument_list|)
expr_stmt|;
name|name_and_type_index
operator|=
name|addNameAndType
argument_list|(
name|method_name
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|ret
operator|=
name|index
expr_stmt|;
name|constants
index|[
name|index
operator|++
index|]
operator|=
operator|new
name|ConstantInterfaceMethodref
argument_list|(
name|class_index
argument_list|,
name|name_and_type_index
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|class_name
operator|+
name|IMETHODREF_DELIM
operator|+
name|method_name
operator|+
name|IMETHODREF_DELIM
operator|+
name|signature
decl_stmt|;
if|if
condition|(
operator|!
name|cp_table
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cp_table
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Index
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|addInterfaceMethodref
parameter_list|(
name|MethodGen
name|method
parameter_list|)
block|{
return|return
name|addInterfaceMethodref
argument_list|(
name|method
operator|.
name|getClassName
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getSignature
argument_list|()
argument_list|)
return|;
block|}
comment|/**       * Look for ConstantFieldref in ConstantPool.      *      * @param class_name Where to find method      * @param field_name Guess what      * @param signature return and argument types      * @return index on success, -1 otherwise      */
specifier|public
name|int
name|lookupFieldref
parameter_list|(
name|String
name|class_name
parameter_list|,
name|String
name|field_name
parameter_list|,
name|String
name|signature
parameter_list|)
block|{
name|Index
name|index
init|=
name|cp_table
operator|.
name|get
argument_list|(
name|class_name
operator|+
name|FIELDREF_DELIM
operator|+
name|field_name
operator|+
name|FIELDREF_DELIM
operator|+
name|signature
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|!=
literal|null
operator|)
condition|?
name|index
operator|.
name|index
else|:
operator|-
literal|1
return|;
block|}
comment|/**      * Add a new Fieldref constant to the ConstantPool, if it is not already       * in there.      *      * @param class_name class name string to add      * @param field_name field name string to add      * @param signature signature string to add      * @return index of entry      */
specifier|public
name|int
name|addFieldref
parameter_list|(
name|String
name|class_name
parameter_list|,
name|String
name|field_name
parameter_list|,
name|String
name|signature
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|int
name|class_index
decl_stmt|,
name|name_and_type_index
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|lookupFieldref
argument_list|(
name|class_name
argument_list|,
name|field_name
argument_list|,
name|signature
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ret
return|;
comment|// Already in CP
block|}
name|adjustSize
argument_list|()
expr_stmt|;
name|class_index
operator|=
name|addClass
argument_list|(
name|class_name
argument_list|)
expr_stmt|;
name|name_and_type_index
operator|=
name|addNameAndType
argument_list|(
name|field_name
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|ret
operator|=
name|index
expr_stmt|;
name|constants
index|[
name|index
operator|++
index|]
operator|=
operator|new
name|ConstantFieldref
argument_list|(
name|class_index
argument_list|,
name|name_and_type_index
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|class_name
operator|+
name|FIELDREF_DELIM
operator|+
name|field_name
operator|+
name|FIELDREF_DELIM
operator|+
name|signature
decl_stmt|;
if|if
condition|(
operator|!
name|cp_table
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cp_table
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Index
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * @param i index in constant pool      * @return constant pool entry at index i      */
specifier|public
name|Constant
name|getConstant
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|constants
index|[
name|i
index|]
return|;
block|}
comment|/**      * Use with care!      *      * @param i index in constant pool      * @param c new constant pool entry at index i      */
specifier|public
name|void
name|setConstant
parameter_list|(
name|int
name|i
parameter_list|,
name|Constant
name|c
parameter_list|)
block|{
name|constants
index|[
name|i
index|]
operator|=
name|c
expr_stmt|;
block|}
comment|/**      * @return intermediate constant pool      */
specifier|public
name|ConstantPool
name|getConstantPool
parameter_list|()
block|{
return|return
operator|new
name|ConstantPool
argument_list|(
name|constants
argument_list|)
return|;
block|}
comment|/**      * @return current size of constant pool      */
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|index
return|;
block|}
comment|/**      * @return constant pool with proper length      */
specifier|public
name|ConstantPool
name|getFinalConstantPool
parameter_list|()
block|{
name|Constant
index|[]
name|cs
init|=
operator|new
name|Constant
index|[
name|index
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|constants
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConstantPool
argument_list|(
name|cs
argument_list|)
return|;
block|}
comment|/**      * @return String representation.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
operator|.
name|append
argument_list|(
name|constants
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Import constant from another ConstantPool and return new index.      */
specifier|public
name|int
name|addConstant
parameter_list|(
name|Constant
name|c
parameter_list|,
name|ConstantPoolGen
name|cp
parameter_list|)
block|{
name|Constant
index|[]
name|constants
init|=
name|cp
operator|.
name|getConstantPool
argument_list|()
operator|.
name|getConstantPool
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|c
operator|.
name|getTag
argument_list|()
condition|)
block|{
case|case
name|Constants
operator|.
name|CONSTANT_String
case|:
block|{
name|ConstantString
name|s
init|=
operator|(
name|ConstantString
operator|)
name|c
decl_stmt|;
name|ConstantUtf8
name|u8
init|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|s
operator|.
name|getStringIndex
argument_list|()
index|]
decl_stmt|;
return|return
name|addString
argument_list|(
name|u8
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
case|case
name|Constants
operator|.
name|CONSTANT_Class
case|:
block|{
name|ConstantClass
name|s
init|=
operator|(
name|ConstantClass
operator|)
name|c
decl_stmt|;
name|ConstantUtf8
name|u8
init|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|s
operator|.
name|getNameIndex
argument_list|()
index|]
decl_stmt|;
return|return
name|addClass
argument_list|(
name|u8
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
case|case
name|Constants
operator|.
name|CONSTANT_NameAndType
case|:
block|{
name|ConstantNameAndType
name|n
init|=
operator|(
name|ConstantNameAndType
operator|)
name|c
decl_stmt|;
name|ConstantUtf8
name|u8
init|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|n
operator|.
name|getNameIndex
argument_list|()
index|]
decl_stmt|;
name|ConstantUtf8
name|u8_2
init|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|n
operator|.
name|getSignatureIndex
argument_list|()
index|]
decl_stmt|;
return|return
name|addNameAndType
argument_list|(
name|u8
operator|.
name|getBytes
argument_list|()
argument_list|,
name|u8_2
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
case|case
name|Constants
operator|.
name|CONSTANT_Utf8
case|:
return|return
name|addUtf8
argument_list|(
operator|(
operator|(
name|ConstantUtf8
operator|)
name|c
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Double
case|:
return|return
name|addDouble
argument_list|(
operator|(
operator|(
name|ConstantDouble
operator|)
name|c
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Float
case|:
return|return
name|addFloat
argument_list|(
operator|(
operator|(
name|ConstantFloat
operator|)
name|c
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Long
case|:
return|return
name|addLong
argument_list|(
operator|(
operator|(
name|ConstantLong
operator|)
name|c
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Integer
case|:
return|return
name|addInteger
argument_list|(
operator|(
operator|(
name|ConstantInteger
operator|)
name|c
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_InterfaceMethodref
case|:
case|case
name|Constants
operator|.
name|CONSTANT_Methodref
case|:
case|case
name|Constants
operator|.
name|CONSTANT_Fieldref
case|:
block|{
name|ConstantCP
name|m
init|=
operator|(
name|ConstantCP
operator|)
name|c
decl_stmt|;
name|ConstantClass
name|clazz
init|=
operator|(
name|ConstantClass
operator|)
name|constants
index|[
name|m
operator|.
name|getClassIndex
argument_list|()
index|]
decl_stmt|;
name|ConstantNameAndType
name|n
init|=
operator|(
name|ConstantNameAndType
operator|)
name|constants
index|[
name|m
operator|.
name|getNameAndTypeIndex
argument_list|()
index|]
decl_stmt|;
name|ConstantUtf8
name|u8
init|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|clazz
operator|.
name|getNameIndex
argument_list|()
index|]
decl_stmt|;
name|String
name|class_name
init|=
name|u8
operator|.
name|getBytes
argument_list|()
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
name|u8
operator|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|n
operator|.
name|getNameIndex
argument_list|()
index|]
expr_stmt|;
name|String
name|name
init|=
name|u8
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|u8
operator|=
operator|(
name|ConstantUtf8
operator|)
name|constants
index|[
name|n
operator|.
name|getSignatureIndex
argument_list|()
index|]
expr_stmt|;
name|String
name|signature
init|=
name|u8
operator|.
name|getBytes
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|c
operator|.
name|getTag
argument_list|()
condition|)
block|{
case|case
name|Constants
operator|.
name|CONSTANT_InterfaceMethodref
case|:
return|return
name|addInterfaceMethodref
argument_list|(
name|class_name
argument_list|,
name|name
argument_list|,
name|signature
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Methodref
case|:
return|return
name|addMethodref
argument_list|(
name|class_name
argument_list|,
name|name
argument_list|,
name|signature
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Fieldref
case|:
return|return
name|addFieldref
argument_list|(
name|class_name
argument_list|,
name|name
argument_list|,
name|signature
argument_list|)
return|;
default|default:
comment|// Never reached
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown constant type "
operator|+
name|c
argument_list|)
throw|;
block|}
block|}
default|default:
comment|// Never reached
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown constant type "
operator|+
name|c
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

