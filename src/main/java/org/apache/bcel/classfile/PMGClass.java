begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_comment
comment|/**  * This class is derived from<em>Attribute</em> and represents a reference to a PMG attribute.  *  * @see Attribute  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PMGClass
extends|extends
name|Attribute
block|{
specifier|private
name|int
name|pmgClassIndex
decl_stmt|;
specifier|private
name|int
name|pmgIndex
decl_stmt|;
comment|/**      * Construct object from input stream.      *      * @param name_index Index in constant pool to CONSTANT_Utf8      * @param length Content length in bytes      * @param input Input stream      * @param constant_pool Array of constants      * @throws IOException if an I/O error occurs.      */
name|PMGClass
parameter_list|(
specifier|final
name|int
name|name_index
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|DataInput
name|input
parameter_list|,
specifier|final
name|ConstantPool
name|constant_pool
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|name_index
argument_list|,
name|length
argument_list|,
name|input
operator|.
name|readUnsignedShort
argument_list|()
argument_list|,
name|input
operator|.
name|readUnsignedShort
argument_list|()
argument_list|,
name|constant_pool
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param name_index Index in constant pool to CONSTANT_Utf8      * @param length Content length in bytes      * @param pmgIndex index in constant pool for source file name      * @param pmgClassIndex Index in constant pool to CONSTANT_Utf8      * @param constantPool Array of constants      */
specifier|public
name|PMGClass
parameter_list|(
specifier|final
name|int
name|name_index
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|int
name|pmgIndex
parameter_list|,
specifier|final
name|int
name|pmgClassIndex
parameter_list|,
specifier|final
name|ConstantPool
name|constantPool
parameter_list|)
block|{
name|super
argument_list|(
name|Const
operator|.
name|ATTR_PMG
argument_list|,
name|name_index
argument_list|,
name|length
argument_list|,
name|constantPool
argument_list|)
expr_stmt|;
name|this
operator|.
name|pmgIndex
operator|=
name|pmgIndex
expr_stmt|;
name|this
operator|.
name|pmgClassIndex
operator|=
name|pmgClassIndex
expr_stmt|;
block|}
comment|/**      * Initialize from another object. Note that both objects use the same references (shallow copy). Use copy() for a      * physical copy.      */
specifier|public
name|PMGClass
parameter_list|(
specifier|final
name|PMGClass
name|pgmClass
parameter_list|)
block|{
name|this
argument_list|(
name|pgmClass
operator|.
name|getNameIndex
argument_list|()
argument_list|,
name|pgmClass
operator|.
name|getLength
argument_list|()
argument_list|,
name|pgmClass
operator|.
name|getPMGIndex
argument_list|()
argument_list|,
name|pgmClass
operator|.
name|getPMGClassIndex
argument_list|()
argument_list|,
name|pgmClass
operator|.
name|getConstantPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called by objects that are traversing the nodes of the tree implicitly defined by the contents of a Java class.      * I.e., the hierarchy of methods, fields, attributes, etc. spawns a tree of objects.      *      * @param v Visitor object      */
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
specifier|final
name|Visitor
name|v
parameter_list|)
block|{
name|println
argument_list|(
literal|"Visiting non-standard PMGClass object"
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return deep copy of this attribute      */
annotation|@
name|Override
specifier|public
name|Attribute
name|copy
parameter_list|(
specifier|final
name|ConstantPool
name|constantPool
parameter_list|)
block|{
return|return
operator|(
name|Attribute
operator|)
name|clone
argument_list|()
return|;
block|}
comment|/**      * Dump source file attribute to file stream in binary format.      *      * @param file Output file stream      * @throws IOException if an I/O error occurs.      */
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|DataOutputStream
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|pmgIndex
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|pmgClassIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Index in constant pool of source file name.      */
specifier|public
name|int
name|getPMGClassIndex
parameter_list|()
block|{
return|return
name|pmgClassIndex
return|;
block|}
comment|/**      * @return PMG class name.      */
specifier|public
name|String
name|getPMGClassName
parameter_list|()
block|{
return|return
name|super
operator|.
name|getConstantPool
argument_list|()
operator|.
name|getConstantUtf8
argument_list|(
name|pmgClassIndex
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**      * @return Index in constant pool of source file name.      */
specifier|public
name|int
name|getPMGIndex
parameter_list|()
block|{
return|return
name|pmgIndex
return|;
block|}
comment|/**      * @return PMG name.      */
specifier|public
name|String
name|getPMGName
parameter_list|()
block|{
return|return
name|super
operator|.
name|getConstantPool
argument_list|()
operator|.
name|getConstantUtf8
argument_list|(
name|pmgIndex
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**      * @param pmgClassIndex      */
specifier|public
name|void
name|setPMGClassIndex
parameter_list|(
specifier|final
name|int
name|pmgClassIndex
parameter_list|)
block|{
name|this
operator|.
name|pmgClassIndex
operator|=
name|pmgClassIndex
expr_stmt|;
block|}
comment|/**      * @param pmgIndex      */
specifier|public
name|void
name|setPMGIndex
parameter_list|(
specifier|final
name|int
name|pmgIndex
parameter_list|)
block|{
name|this
operator|.
name|pmgIndex
operator|=
name|pmgIndex
expr_stmt|;
block|}
comment|/**      * @return String representation      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PMGClass("
operator|+
name|getPMGName
argument_list|()
operator|+
literal|", "
operator|+
name|getPMGClassName
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

