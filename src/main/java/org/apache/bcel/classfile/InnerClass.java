begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_comment
comment|/**  * This class represents a inner class attribute, i.e., the class indices of the inner and outer classes, the name and  * the attributes of the inner class.  *  * @see InnerClasses  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|InnerClass
implements|implements
name|Cloneable
implements|,
name|Node
block|{
specifier|private
name|int
name|innerClassIndex
decl_stmt|;
specifier|private
name|int
name|outerClassIndex
decl_stmt|;
specifier|private
name|int
name|innerNameIndex
decl_stmt|;
specifier|private
name|int
name|innerAccessFlags
decl_stmt|;
comment|/**      * Construct object from file stream.      *      * @param file Input stream      * @throws IOException if an I/O error occurs.      */
name|InnerClass
parameter_list|(
specifier|final
name|DataInput
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|file
operator|.
name|readUnsignedShort
argument_list|()
argument_list|,
name|file
operator|.
name|readUnsignedShort
argument_list|()
argument_list|,
name|file
operator|.
name|readUnsignedShort
argument_list|()
argument_list|,
name|file
operator|.
name|readUnsignedShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialize from another object.      */
specifier|public
name|InnerClass
parameter_list|(
specifier|final
name|InnerClass
name|c
parameter_list|)
block|{
name|this
argument_list|(
name|c
operator|.
name|getInnerClassIndex
argument_list|()
argument_list|,
name|c
operator|.
name|getOuterClassIndex
argument_list|()
argument_list|,
name|c
operator|.
name|getInnerNameIndex
argument_list|()
argument_list|,
name|c
operator|.
name|getInnerAccessFlags
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param innerClassIndex Class index in constant pool of inner class      * @param outerClassIndex Class index in constant pool of outer class      * @param innerNameIndex Name index in constant pool of inner class      * @param innerAccessFlags Access flags of inner class      */
specifier|public
name|InnerClass
parameter_list|(
specifier|final
name|int
name|innerClassIndex
parameter_list|,
specifier|final
name|int
name|outerClassIndex
parameter_list|,
specifier|final
name|int
name|innerNameIndex
parameter_list|,
specifier|final
name|int
name|innerAccessFlags
parameter_list|)
block|{
name|this
operator|.
name|innerClassIndex
operator|=
name|innerClassIndex
expr_stmt|;
name|this
operator|.
name|outerClassIndex
operator|=
name|outerClassIndex
expr_stmt|;
name|this
operator|.
name|innerNameIndex
operator|=
name|innerNameIndex
expr_stmt|;
name|this
operator|.
name|innerAccessFlags
operator|=
name|innerAccessFlags
expr_stmt|;
block|}
comment|/**      * Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class.      * I.e., the hierarchy of methods, fields, attributes, etc. spawns a tree of objects.      *      * @param v Visitor object      */
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
specifier|final
name|Visitor
name|v
parameter_list|)
block|{
name|v
operator|.
name|visitInnerClass
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return deep copy of this object      */
specifier|public
name|InnerClass
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|InnerClass
operator|)
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
comment|// TODO should this throw?
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Dump inner class attribute to file stream in binary format.      *      * @param file Output file stream      * @throws IOException if an I/O error occurs.      */
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|DataOutputStream
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|file
operator|.
name|writeShort
argument_list|(
name|innerClassIndex
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|outerClassIndex
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|innerNameIndex
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|innerAccessFlags
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return access flags of inner class.      */
specifier|public
name|int
name|getInnerAccessFlags
parameter_list|()
block|{
return|return
name|innerAccessFlags
return|;
block|}
comment|/**      * @return class index of inner class.      */
specifier|public
name|int
name|getInnerClassIndex
parameter_list|()
block|{
return|return
name|innerClassIndex
return|;
block|}
comment|/**      * @return name index of inner class.      */
specifier|public
name|int
name|getInnerNameIndex
parameter_list|()
block|{
return|return
name|innerNameIndex
return|;
block|}
comment|/**      * @return class index of outer class.      */
specifier|public
name|int
name|getOuterClassIndex
parameter_list|()
block|{
return|return
name|outerClassIndex
return|;
block|}
comment|/**      * @param innerAccessFlags access flags for this inner class      */
specifier|public
name|void
name|setInnerAccessFlags
parameter_list|(
specifier|final
name|int
name|innerAccessFlags
parameter_list|)
block|{
name|this
operator|.
name|innerAccessFlags
operator|=
name|innerAccessFlags
expr_stmt|;
block|}
comment|/**      * @param innerClassIndex index into the constant pool for this class      */
specifier|public
name|void
name|setInnerClassIndex
parameter_list|(
specifier|final
name|int
name|innerClassIndex
parameter_list|)
block|{
name|this
operator|.
name|innerClassIndex
operator|=
name|innerClassIndex
expr_stmt|;
block|}
comment|/**      * @param innerNameIndex index into the constant pool for this class's name      */
specifier|public
name|void
name|setInnerNameIndex
parameter_list|(
specifier|final
name|int
name|innerNameIndex
parameter_list|)
block|{
comment|// TODO unused
name|this
operator|.
name|innerNameIndex
operator|=
name|innerNameIndex
expr_stmt|;
block|}
comment|/**      * @param outerClassIndex index into the constant pool for the owning class      */
specifier|public
name|void
name|setOuterClassIndex
parameter_list|(
specifier|final
name|int
name|outerClassIndex
parameter_list|)
block|{
comment|// TODO unused
name|this
operator|.
name|outerClassIndex
operator|=
name|outerClassIndex
expr_stmt|;
block|}
comment|/**      * @return String representation.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InnerClass("
operator|+
name|innerClassIndex
operator|+
literal|", "
operator|+
name|outerClassIndex
operator|+
literal|", "
operator|+
name|innerNameIndex
operator|+
literal|", "
operator|+
name|innerAccessFlags
operator|+
literal|")"
return|;
block|}
comment|/**      * @return Resolved string representation      */
specifier|public
name|String
name|toString
parameter_list|(
specifier|final
name|ConstantPool
name|constantPool
parameter_list|)
block|{
name|String
name|outer_class_name
decl_stmt|;
name|String
name|inner_name
decl_stmt|;
name|String
name|inner_class_name
init|=
name|constantPool
operator|.
name|getConstantString
argument_list|(
name|innerClassIndex
argument_list|,
name|Const
operator|.
name|CONSTANT_Class
argument_list|)
decl_stmt|;
name|inner_class_name
operator|=
name|Utility
operator|.
name|compactClassName
argument_list|(
name|inner_class_name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|outerClassIndex
operator|!=
literal|0
condition|)
block|{
name|outer_class_name
operator|=
name|constantPool
operator|.
name|getConstantString
argument_list|(
name|outerClassIndex
argument_list|,
name|Const
operator|.
name|CONSTANT_Class
argument_list|)
expr_stmt|;
name|outer_class_name
operator|=
literal|" of class "
operator|+
name|Utility
operator|.
name|compactClassName
argument_list|(
name|outer_class_name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outer_class_name
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|innerNameIndex
operator|!=
literal|0
condition|)
block|{
name|inner_name
operator|=
operator|(
operator|(
name|ConstantUtf8
operator|)
name|constantPool
operator|.
name|getConstant
argument_list|(
name|innerNameIndex
argument_list|,
name|Const
operator|.
name|CONSTANT_Utf8
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|inner_name
operator|=
literal|"(anonymous)"
expr_stmt|;
block|}
name|String
name|access
init|=
name|Utility
operator|.
name|accessToString
argument_list|(
name|innerAccessFlags
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|access
operator|=
name|access
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|access
operator|+
literal|" "
expr_stmt|;
return|return
literal|"  "
operator|+
name|access
operator|+
name|inner_name
operator|+
literal|"=class "
operator|+
name|inner_class_name
operator|+
name|outer_class_name
return|;
block|}
block|}
end_class

end_unit

