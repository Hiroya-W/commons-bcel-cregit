begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright  2000-2004 The Apache Software Foundation  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * represents one parameter annotation in the parameter annotation table  *   * @version $Id: ParameterAnnotationEntry  * @author<A HREF="mailto:dbrosius@qis.net">D. Brosius</A>  * @since 5.3  */
end_comment

begin_class
specifier|public
class|class
name|ParameterAnnotationEntry
implements|implements
name|Node
implements|,
name|Constants
block|{
specifier|private
name|int
name|annotation_table_length
decl_stmt|;
specifier|private
name|AnnotationEntry
index|[]
name|annotation_table
decl_stmt|;
comment|/**      * Construct object from file stream.      * @param file Input stream      * @throws IOException      */
name|ParameterAnnotationEntry
parameter_list|(
name|DataInputStream
name|file
parameter_list|,
name|ConstantPool
name|constant_pool
parameter_list|)
throws|throws
name|IOException
block|{
name|annotation_table_length
operator|=
operator|(
name|file
operator|.
name|readUnsignedShort
argument_list|()
operator|)
expr_stmt|;
name|annotation_table
operator|=
operator|new
name|AnnotationEntry
index|[
name|annotation_table_length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotation_table_length
condition|;
name|i
operator|++
control|)
block|{
comment|//        	 TODO isRuntimeVisible
name|annotation_table
index|[
name|i
index|]
operator|=
name|AnnotationEntry
operator|.
name|read
argument_list|(
name|file
argument_list|,
name|constant_pool
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called by objects that are traversing the nodes of the tree implicitely      * defined by the contents of a Java class. I.e., the hierarchy of methods,      * fields, attributes, etc. spawns a tree of objects.      *      * @param v Visitor object      */
specifier|public
name|void
name|accept
parameter_list|(
name|Visitor
name|v
parameter_list|)
block|{
comment|//	    v.visitParameterAnnotationEntry(this);
block|}
comment|/**      * @return the number of annotation entries in this parameter annotation      */
specifier|public
specifier|final
name|int
name|getNumAnnotations
parameter_list|()
block|{
return|return
name|annotation_table_length
return|;
block|}
comment|/**      * returns the array of annotation entries in this annotation      */
specifier|public
name|AnnotationEntry
index|[]
name|getAnnotationEntries
parameter_list|()
block|{
return|return
name|annotation_table
return|;
block|}
block|}
end_class

end_unit

