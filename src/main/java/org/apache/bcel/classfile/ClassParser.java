begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright  2000-2004 The Apache Software Foundation  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Wrapper class that parses a given Java .class file. The method<A  * href ="#parse">parse</A> returns a<A href ="JavaClass.html">  * JavaClass</A> object on success. When an I/O error or an  * inconsistency occurs an appropiate exception is propagated back to  * the caller.  *  * The structure and the names comply, except for a few conveniences,  * exactly with the<A href="ftp://java.sun.com/docs/specs/vmspec.ps">  * JVM specification 1.0</a>. See this paper for  * further details about the structure of a bytecode file.  *  * @version $Id$  * @author<A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ClassParser
block|{
specifier|private
name|DataInputStream
name|file
decl_stmt|;
specifier|private
name|boolean
name|fileOwned
decl_stmt|;
specifier|private
name|String
name|file_name
decl_stmt|;
specifier|private
name|String
name|zip_file
decl_stmt|;
specifier|private
name|int
name|class_name_index
decl_stmt|,
name|superclass_name_index
decl_stmt|;
specifier|private
name|int
name|major
decl_stmt|,
name|minor
decl_stmt|;
comment|// Compiler version
specifier|private
name|int
name|access_flags
decl_stmt|;
comment|// Access rights of parsed class
specifier|private
name|int
index|[]
name|interfaces
decl_stmt|;
comment|// Names of implemented interfaces
specifier|private
name|ConstantPool
name|constant_pool
decl_stmt|;
comment|// collection of constants
specifier|private
name|Field
index|[]
name|fields
decl_stmt|;
comment|// class fields, i.e., its variables
specifier|private
name|Method
index|[]
name|methods
decl_stmt|;
comment|// methods defined in the class
specifier|private
name|Attribute
index|[]
name|attributes
decl_stmt|;
comment|// attributes defined in the class
specifier|private
name|boolean
name|is_zip
decl_stmt|;
comment|// Loaded from zip file
specifier|private
specifier|static
specifier|final
name|int
name|BUFSIZE
init|=
literal|8192
decl_stmt|;
comment|/**      * Parse class from the given stream.      *      * @param file Input stream      * @param file_name File name      */
specifier|public
name|ClassParser
parameter_list|(
name|InputStream
name|file
parameter_list|,
name|String
name|file_name
parameter_list|)
block|{
name|this
operator|.
name|file_name
operator|=
name|file_name
expr_stmt|;
name|fileOwned
operator|=
literal|false
expr_stmt|;
name|String
name|clazz
init|=
name|file
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Not a very clean solution ...
name|is_zip
operator|=
name|clazz
operator|.
name|startsWith
argument_list|(
literal|"java.util.zip."
argument_list|)
operator|||
name|clazz
operator|.
name|startsWith
argument_list|(
literal|"java.util.jar."
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|instanceof
name|DataInputStream
condition|)
block|{
name|this
operator|.
name|file
operator|=
operator|(
name|DataInputStream
operator|)
name|file
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|file
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|file
argument_list|,
name|BUFSIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Parse class from given .class file.      *      * @param file_name file name      */
specifier|public
name|ClassParser
parameter_list|(
name|String
name|file_name
parameter_list|)
throws|throws
name|IOException
block|{
name|is_zip
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|file_name
operator|=
name|file_name
expr_stmt|;
name|fileOwned
operator|=
literal|true
expr_stmt|;
block|}
comment|/** Parse class from given .class file in a ZIP-archive      *      * @param zip_file zip file name      * @param file_name file name      */
specifier|public
name|ClassParser
parameter_list|(
name|String
name|zip_file
parameter_list|,
name|String
name|file_name
parameter_list|)
block|{
name|is_zip
operator|=
literal|true
expr_stmt|;
name|fileOwned
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|zip_file
operator|=
name|zip_file
expr_stmt|;
name|this
operator|.
name|file_name
operator|=
name|file_name
expr_stmt|;
block|}
comment|/**      * Parse the given Java class file and return an object that represents      * the contained data, i.e., constants, methods, fields and commands.      * A<em>ClassFormatException</em> is raised, if the file is not a valid      * .class file. (This does not include verification of the byte code as it      * is performed by the java interpreter).      *      * @return Class object representing the parsed class file      * @throws  IOException      * @throws  ClassFormatException      */
specifier|public
name|JavaClass
name|parse
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassFormatException
block|{
name|ZipFile
name|zip
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fileOwned
condition|)
block|{
if|if
condition|(
name|is_zip
condition|)
block|{
name|zip
operator|=
operator|new
name|ZipFile
argument_list|(
name|zip_file
argument_list|)
expr_stmt|;
name|ZipEntry
name|entry
init|=
name|zip
operator|.
name|getEntry
argument_list|(
name|file_name
argument_list|)
decl_stmt|;
name|file
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|zip
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
argument_list|,
name|BUFSIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file_name
argument_list|)
argument_list|,
name|BUFSIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/****************** Read headers ********************************/
comment|// Check magic tag of class file
name|readID
argument_list|()
expr_stmt|;
comment|// Get compiler version
name|readVersion
argument_list|()
expr_stmt|;
comment|/****************** Read constant pool and related **************/
comment|// Read constant pool entries
name|readConstantPool
argument_list|()
expr_stmt|;
comment|// Get class information
name|readClassInfo
argument_list|()
expr_stmt|;
comment|// Get interface information, i.e., implemented interfaces
name|readInterfaces
argument_list|()
expr_stmt|;
comment|/****************** Read class fields and methods ***************/
comment|// Read class fields, i.e., the variables of the class
name|readFields
argument_list|()
expr_stmt|;
comment|// Read class methods, i.e., the functions in the class
name|readMethods
argument_list|()
expr_stmt|;
comment|// Read class attributes
name|readAttributes
argument_list|()
expr_stmt|;
comment|// Check for unknown variables
comment|//Unknown[] u = Unknown.getUnknownAttributes();
comment|//for(int i=0; i< u.length; i++)
comment|//  System.err.println("WARNING: " + u[i]);
comment|// Everything should have been read now
comment|//      if(file.available()> 0) {
comment|//        int bytes = file.available();
comment|//        byte[] buf = new byte[bytes];
comment|//        file.read(buf);
comment|//        if(!(is_zip&& (buf.length == 1))) {
comment|//  	System.err.println("WARNING: Trailing garbage at end of " + file_name);
comment|//  	System.err.println(bytes + " extra bytes: " + Utility.toHexString(buf));
comment|//        }
comment|//      }
block|}
finally|finally
block|{
comment|// Read everything of interest, so close the file
if|if
condition|(
name|fileOwned
condition|)
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|zip
operator|!=
literal|null
condition|)
block|{
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Return the information we have gathered in a new object
return|return
operator|new
name|JavaClass
argument_list|(
name|class_name_index
argument_list|,
name|superclass_name_index
argument_list|,
name|file_name
argument_list|,
name|major
argument_list|,
name|minor
argument_list|,
name|access_flags
argument_list|,
name|constant_pool
argument_list|,
name|interfaces
argument_list|,
name|fields
argument_list|,
name|methods
argument_list|,
name|attributes
argument_list|,
name|is_zip
condition|?
name|JavaClass
operator|.
name|ZIP
else|:
name|JavaClass
operator|.
name|FILE
argument_list|)
return|;
block|}
comment|/**      * Read information about the attributes of the class.      * @throws  IOException      * @throws  ClassFormatException      */
specifier|private
specifier|final
name|void
name|readAttributes
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassFormatException
block|{
name|int
name|attributes_count
decl_stmt|;
name|attributes_count
operator|=
name|file
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|attributes
operator|=
operator|new
name|Attribute
index|[
name|attributes_count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes_count
condition|;
name|i
operator|++
control|)
block|{
name|attributes
index|[
name|i
index|]
operator|=
name|Attribute
operator|.
name|readAttribute
argument_list|(
name|file
argument_list|,
name|constant_pool
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Read information about the class and its super class.      * @throws  IOException      * @throws  ClassFormatException      */
specifier|private
specifier|final
name|void
name|readClassInfo
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassFormatException
block|{
name|access_flags
operator|=
name|file
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
comment|/* Interfaces are implicitely abstract, the flag should be set          * according to the JVM specification.          */
if|if
condition|(
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_INTERFACE
operator|)
operator|!=
literal|0
condition|)
block|{
name|access_flags
operator||=
name|Constants
operator|.
name|ACC_ABSTRACT
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_ABSTRACT
operator|)
operator|!=
literal|0
operator|)
operator|&&
operator|(
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_FINAL
operator|)
operator|!=
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|ClassFormatException
argument_list|(
literal|"Class "
operator|+
name|file_name
operator|+
literal|" can't be both final and abstract"
argument_list|)
throw|;
block|}
name|class_name_index
operator|=
name|file
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|superclass_name_index
operator|=
name|file
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
block|}
comment|/**      * Read constant pool entries.      * @throws  IOException      * @throws  ClassFormatException      */
specifier|private
specifier|final
name|void
name|readConstantPool
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassFormatException
block|{
name|constant_pool
operator|=
operator|new
name|ConstantPool
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read information about the fields of the class, i.e., its variables.      * @throws  IOException      * @throws  ClassFormatException      */
specifier|private
specifier|final
name|void
name|readFields
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassFormatException
block|{
name|int
name|fields_count
decl_stmt|;
name|fields_count
operator|=
name|file
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|fields
operator|=
operator|new
name|Field
index|[
name|fields_count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields_count
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
operator|new
name|Field
argument_list|(
name|file
argument_list|,
name|constant_pool
argument_list|)
expr_stmt|;
block|}
block|}
comment|/******************** Private utility methods **********************/
comment|/**      * Check whether the header of the file is ok.      * Of course, this has to be the first action on successive file reads.      * @throws  IOException      * @throws  ClassFormatException      */
specifier|private
specifier|final
name|void
name|readID
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassFormatException
block|{
name|int
name|magic
init|=
literal|0xCAFEBABE
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|readInt
argument_list|()
operator|!=
name|magic
condition|)
block|{
throw|throw
operator|new
name|ClassFormatException
argument_list|(
name|file_name
operator|+
literal|" is not a Java .class file"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Read information about the interfaces implemented by this class.      * @throws  IOException      * @throws  ClassFormatException      */
specifier|private
specifier|final
name|void
name|readInterfaces
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassFormatException
block|{
name|int
name|interfaces_count
decl_stmt|;
name|interfaces_count
operator|=
name|file
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|interfaces
operator|=
operator|new
name|int
index|[
name|interfaces_count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaces_count
condition|;
name|i
operator|++
control|)
block|{
name|interfaces
index|[
name|i
index|]
operator|=
name|file
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Read information about the methods of the class.      * @throws  IOException      * @throws  ClassFormatException      */
specifier|private
specifier|final
name|void
name|readMethods
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassFormatException
block|{
name|int
name|methods_count
decl_stmt|;
name|methods_count
operator|=
name|file
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|methods
operator|=
operator|new
name|Method
index|[
name|methods_count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods_count
condition|;
name|i
operator|++
control|)
block|{
name|methods
index|[
name|i
index|]
operator|=
operator|new
name|Method
argument_list|(
name|file
argument_list|,
name|constant_pool
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Read major and minor version of compiler which created the file.      * @throws  IOException      * @throws  ClassFormatException      */
specifier|private
specifier|final
name|void
name|readVersion
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassFormatException
block|{
name|minor
operator|=
name|file
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|major
operator|=
name|file
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

