begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_comment
comment|/**  * This class is derived from<em>Attribute</em> and represents the list of modules required, exported, opened or provided by a module.  * There may be at most one Module attribute in a ClassFile structure.  *  * @see   Attribute  * @since 6.4.0  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Module
extends|extends
name|Attribute
block|{
specifier|private
specifier|final
name|int
name|module_name_index
decl_stmt|;
specifier|private
specifier|final
name|int
name|module_flags
decl_stmt|;
specifier|private
specifier|final
name|int
name|module_version_index
decl_stmt|;
specifier|private
name|ModuleRequires
index|[]
name|requires_table
decl_stmt|;
specifier|private
name|ModuleExports
index|[]
name|exports_table
decl_stmt|;
specifier|private
name|ModuleOpens
index|[]
name|opens_table
decl_stmt|;
specifier|private
specifier|final
name|int
name|uses_count
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|uses_index
decl_stmt|;
specifier|private
name|ModuleProvides
index|[]
name|provides_table
decl_stmt|;
comment|/**      * Construct object from input stream.      * @param name_index Index in constant pool      * @param length Content length in bytes      * @param input Input stream      * @param constant_pool Array of constants      * @throws IOException      */
name|Module
parameter_list|(
specifier|final
name|int
name|name_index
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|DataInput
name|input
parameter_list|,
specifier|final
name|ConstantPool
name|constant_pool
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|Const
operator|.
name|ATTR_MODULE
argument_list|,
name|name_index
argument_list|,
name|length
argument_list|,
name|constant_pool
argument_list|)
expr_stmt|;
name|module_name_index
operator|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|module_flags
operator|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|module_version_index
operator|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
specifier|final
name|int
name|requires_count
init|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|requires_table
operator|=
operator|new
name|ModuleRequires
index|[
name|requires_count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requires_count
condition|;
name|i
operator|++
control|)
block|{
name|requires_table
index|[
name|i
index|]
operator|=
operator|new
name|ModuleRequires
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|exports_count
init|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|exports_table
operator|=
operator|new
name|ModuleExports
index|[
name|exports_count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exports_count
condition|;
name|i
operator|++
control|)
block|{
name|exports_table
index|[
name|i
index|]
operator|=
operator|new
name|ModuleExports
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|opens_count
init|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|opens_table
operator|=
operator|new
name|ModuleOpens
index|[
name|opens_count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opens_count
condition|;
name|i
operator|++
control|)
block|{
name|opens_table
index|[
name|i
index|]
operator|=
operator|new
name|ModuleOpens
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
name|uses_count
operator|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|uses_index
operator|=
operator|new
name|int
index|[
name|uses_count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uses_count
condition|;
name|i
operator|++
control|)
block|{
name|uses_index
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|provides_count
init|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|provides_table
operator|=
operator|new
name|ModuleProvides
index|[
name|provides_count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|provides_count
condition|;
name|i
operator|++
control|)
block|{
name|provides_table
index|[
name|i
index|]
operator|=
operator|new
name|ModuleProvides
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called by objects that are traversing the nodes of the tree implicitely      * defined by the contents of a Java class. I.e., the hierarchy of methods,      * fields, attributes, etc. spawns a tree of objects.      *      * @param v Visitor object      */
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
specifier|final
name|Visitor
name|v
parameter_list|)
block|{
name|v
operator|.
name|visitModule
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|// TODO add more getters and setters?
comment|/**      * @return table of required modules      * @see ModuleRequires      */
specifier|public
name|ModuleRequires
index|[]
name|getRequiresTable
parameter_list|()
block|{
return|return
name|requires_table
return|;
block|}
comment|/**      * @return table of exported interfaces      * @see ModuleExports      */
specifier|public
name|ModuleExports
index|[]
name|getExportsTable
parameter_list|()
block|{
return|return
name|exports_table
return|;
block|}
comment|/**      * @return table of provided interfaces      * @see ModuleOpens      */
specifier|public
name|ModuleOpens
index|[]
name|getOpensTable
parameter_list|()
block|{
return|return
name|opens_table
return|;
block|}
comment|/**      * @return table of provided interfaces      * @see ModuleProvides      */
specifier|public
name|ModuleProvides
index|[]
name|getProvidesTable
parameter_list|()
block|{
return|return
name|provides_table
return|;
block|}
comment|/**      * Dump Module attribute to file stream in binary format.      *      * @param file Output file stream      * @throws IOException      */
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|DataOutputStream
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|module_name_index
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|module_flags
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|module_version_index
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|requires_table
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ModuleRequires
name|entry
range|:
name|requires_table
control|)
block|{
name|entry
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|writeShort
argument_list|(
name|exports_table
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ModuleExports
name|entry
range|:
name|exports_table
control|)
block|{
name|entry
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|writeShort
argument_list|(
name|opens_table
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ModuleOpens
name|entry
range|:
name|opens_table
control|)
block|{
name|entry
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|writeShort
argument_list|(
name|uses_index
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|int
name|entry
range|:
name|uses_index
control|)
block|{
name|file
operator|.
name|writeShort
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|writeShort
argument_list|(
name|provides_table
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ModuleProvides
name|entry
range|:
name|provides_table
control|)
block|{
name|entry
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return String representation, i.e., a list of packages.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|ConstantPool
name|cp
init|=
name|super
operator|.
name|getConstantPool
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"Module:\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"  name:    "
argument_list|)
operator|.
name|append
argument_list|(
name|cp
operator|.
name|getConstantString
argument_list|(
name|module_name_index
argument_list|,
name|Const
operator|.
name|CONSTANT_Module
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"  flags:   "
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%04x"
argument_list|,
name|module_flags
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|version
init|=
name|module_version_index
operator|==
literal|0
condition|?
literal|"0"
else|:
name|cp
operator|.
name|getConstantString
argument_list|(
name|module_version_index
argument_list|,
name|Const
operator|.
name|CONSTANT_Utf8
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"  version: "
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"  requires("
argument_list|)
operator|.
name|append
argument_list|(
name|requires_table
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|"):\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ModuleRequires
name|module
range|:
name|requires_table
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
operator|.
name|append
argument_list|(
name|module
operator|.
name|toString
argument_list|(
name|cp
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"  exports("
argument_list|)
operator|.
name|append
argument_list|(
name|exports_table
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|"):\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ModuleExports
name|module
range|:
name|exports_table
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
operator|.
name|append
argument_list|(
name|module
operator|.
name|toString
argument_list|(
name|cp
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"  opens("
argument_list|)
operator|.
name|append
argument_list|(
name|opens_table
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|"):\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ModuleOpens
name|module
range|:
name|opens_table
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
operator|.
name|append
argument_list|(
name|module
operator|.
name|toString
argument_list|(
name|cp
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"  uses("
argument_list|)
operator|.
name|append
argument_list|(
name|uses_index
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|"):\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|int
name|index
range|:
name|uses_index
control|)
block|{
specifier|final
name|String
name|class_name
init|=
name|cp
operator|.
name|getConstantString
argument_list|(
name|index
argument_list|,
name|Const
operator|.
name|CONSTANT_Class
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
operator|.
name|append
argument_list|(
name|Utility
operator|.
name|compactClassName
argument_list|(
name|class_name
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"  provides("
argument_list|)
operator|.
name|append
argument_list|(
name|provides_table
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|"):\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ModuleProvides
name|module
range|:
name|provides_table
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
operator|.
name|append
argument_list|(
name|module
operator|.
name|toString
argument_list|(
name|cp
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
comment|// remove the last newline
block|}
comment|/**      * @return deep copy of this attribute      */
annotation|@
name|Override
specifier|public
name|Attribute
name|copy
parameter_list|(
specifier|final
name|ConstantPool
name|_constant_pool
parameter_list|)
block|{
specifier|final
name|Module
name|c
init|=
operator|(
name|Module
operator|)
name|clone
argument_list|()
decl_stmt|;
name|c
operator|.
name|requires_table
operator|=
operator|new
name|ModuleRequires
index|[
name|requires_table
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requires_table
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|.
name|requires_table
index|[
name|i
index|]
operator|=
name|requires_table
index|[
name|i
index|]
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|exports_table
operator|=
operator|new
name|ModuleExports
index|[
name|exports_table
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exports_table
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|.
name|exports_table
index|[
name|i
index|]
operator|=
name|exports_table
index|[
name|i
index|]
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|opens_table
operator|=
operator|new
name|ModuleOpens
index|[
name|opens_table
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opens_table
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|.
name|opens_table
index|[
name|i
index|]
operator|=
name|opens_table
index|[
name|i
index|]
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|provides_table
operator|=
operator|new
name|ModuleProvides
index|[
name|provides_table
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|provides_table
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|.
name|provides_table
index|[
name|i
index|]
operator|=
name|provides_table
index|[
name|i
index|]
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|setConstantPool
argument_list|(
name|_constant_pool
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
end_class

end_unit

