begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|BCELComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|ClassQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|SyntheticRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_comment
comment|/**  * Represents a Java class, i.e., the data structures, constant pool, fields, methods and commands contained in a Java  * .class file. See<a href="https://docs.oracle.com/javase/specs/">JVM specification</a> for details. The intent of  * this class is to represent a parsed or otherwise existing class file. Those interested in programmatically generating  * classes should see the<a href="../generic/ClassGen.html">ClassGen</a> class.  *  * @see org.apache.bcel.generic.ClassGen  */
end_comment

begin_class
specifier|public
class|class
name|JavaClass
extends|extends
name|AccessFlags
implements|implements
name|Cloneable
implements|,
name|Node
implements|,
name|Comparable
argument_list|<
name|JavaClass
argument_list|>
block|{
specifier|static
specifier|final
name|JavaClass
index|[]
name|EMPTY_ARRAY
init|=
block|{}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|HEAP
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|FILE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|ZIP
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|debug
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"JavaClass.debug"
argument_list|)
decl_stmt|;
comment|// Debugging on/off
specifier|private
specifier|static
name|BCELComparator
name|bcelComparator
init|=
operator|new
name|BCELComparator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o1
parameter_list|,
specifier|final
name|Object
name|o2
parameter_list|)
block|{
specifier|final
name|JavaClass
name|THIS
init|=
operator|(
name|JavaClass
operator|)
name|o1
decl_stmt|;
specifier|final
name|JavaClass
name|THAT
init|=
operator|(
name|JavaClass
operator|)
name|o2
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|THIS
operator|.
name|getClassName
argument_list|()
argument_list|,
name|THAT
operator|.
name|getClassName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
specifier|final
name|JavaClass
name|THIS
init|=
operator|(
name|JavaClass
operator|)
name|o
decl_stmt|;
return|return
name|THIS
operator|.
name|getClassName
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/*      * Print debug information depending on `JavaClass.debug'      */
specifier|static
name|void
name|Debug
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return Comparison strategy object      */
specifier|public
specifier|static
name|BCELComparator
name|getComparator
parameter_list|()
block|{
return|return
name|bcelComparator
return|;
block|}
specifier|private
specifier|static
name|String
name|indent
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
specifier|final
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @param comparator Comparison strategy object      */
specifier|public
specifier|static
name|void
name|setComparator
parameter_list|(
specifier|final
name|BCELComparator
name|comparator
parameter_list|)
block|{
name|bcelComparator
operator|=
name|comparator
expr_stmt|;
block|}
specifier|private
name|String
name|fileName
decl_stmt|;
specifier|private
specifier|final
name|String
name|packageName
decl_stmt|;
specifier|private
name|String
name|sourceFileName
init|=
literal|"<Unknown>"
decl_stmt|;
specifier|private
name|int
name|classNameIndex
decl_stmt|;
specifier|private
name|int
name|superclassNameIndex
decl_stmt|;
specifier|private
name|String
name|className
decl_stmt|;
specifier|private
name|String
name|superclassName
decl_stmt|;
specifier|private
name|int
name|major
decl_stmt|;
specifier|private
name|int
name|minor
decl_stmt|;
comment|// Compiler version
specifier|private
name|ConstantPool
name|constantPool
decl_stmt|;
comment|// Constant pool
specifier|private
name|int
index|[]
name|interfaces
decl_stmt|;
comment|// implemented interfaces
specifier|private
name|String
index|[]
name|interfaceNames
decl_stmt|;
specifier|private
name|Field
index|[]
name|fields
decl_stmt|;
comment|// Fields, i.e., variables of class
specifier|private
name|Method
index|[]
name|methods
decl_stmt|;
comment|// methods defined in the class
specifier|private
name|Attribute
index|[]
name|attributes
decl_stmt|;
comment|// attributes defined in the class
specifier|private
name|AnnotationEntry
index|[]
name|annotations
decl_stmt|;
comment|// annotations defined on the class
specifier|private
name|byte
name|source
init|=
name|HEAP
decl_stmt|;
comment|// Generated in memory
specifier|private
name|boolean
name|isAnonymous
decl_stmt|;
specifier|private
name|boolean
name|isNested
decl_stmt|;
specifier|private
name|boolean
name|computedNestedTypeStatus
decl_stmt|;
comment|/**      * In cases where we go ahead and create something, use the default SyntheticRepository, because we don't know any      * better.      */
specifier|private
specifier|transient
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|Repository
name|repository
init|=
name|SyntheticRepository
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**      * Constructor gets all contents as arguments.      *      * @param classNameIndex Class name      * @param superclassNameIndex Superclass name      * @param fileName File name      * @param major Major compiler version      * @param minor Minor compiler version      * @param access_flags Access rights defined by bit flags      * @param constantPool Array of constants      * @param interfaces Implemented interfaces      * @param fields Class fields      * @param methods Class methods      * @param attributes Class attributes      */
specifier|public
name|JavaClass
parameter_list|(
specifier|final
name|int
name|classNameIndex
parameter_list|,
specifier|final
name|int
name|superclassNameIndex
parameter_list|,
specifier|final
name|String
name|fileName
parameter_list|,
specifier|final
name|int
name|major
parameter_list|,
specifier|final
name|int
name|minor
parameter_list|,
specifier|final
name|int
name|access_flags
parameter_list|,
specifier|final
name|ConstantPool
name|constantPool
parameter_list|,
specifier|final
name|int
index|[]
name|interfaces
parameter_list|,
specifier|final
name|Field
index|[]
name|fields
parameter_list|,
specifier|final
name|Method
index|[]
name|methods
parameter_list|,
specifier|final
name|Attribute
index|[]
name|attributes
parameter_list|)
block|{
name|this
argument_list|(
name|classNameIndex
argument_list|,
name|superclassNameIndex
argument_list|,
name|fileName
argument_list|,
name|major
argument_list|,
name|minor
argument_list|,
name|access_flags
argument_list|,
name|constantPool
argument_list|,
name|interfaces
argument_list|,
name|fields
argument_list|,
name|methods
argument_list|,
name|attributes
argument_list|,
name|HEAP
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor gets all contents as arguments.      *      * @param classNameIndex Index into constant pool referencing a ConstantClass that represents this class.      * @param superclassNameIndex Index into constant pool referencing a ConstantClass that represents this class's      *        superclass.      * @param fileName File name      * @param major Major compiler version      * @param minor Minor compiler version      * @param access_flags Access rights defined by bit flags      * @param constantPool Array of constants      * @param interfaces Implemented interfaces      * @param fields Class fields      * @param methods Class methods      * @param attributes Class attributes      * @param source Read from file or generated in memory?      */
specifier|public
name|JavaClass
parameter_list|(
specifier|final
name|int
name|classNameIndex
parameter_list|,
specifier|final
name|int
name|superclassNameIndex
parameter_list|,
specifier|final
name|String
name|fileName
parameter_list|,
specifier|final
name|int
name|major
parameter_list|,
specifier|final
name|int
name|minor
parameter_list|,
specifier|final
name|int
name|access_flags
parameter_list|,
specifier|final
name|ConstantPool
name|constantPool
parameter_list|,
name|int
index|[]
name|interfaces
parameter_list|,
name|Field
index|[]
name|fields
parameter_list|,
name|Method
index|[]
name|methods
parameter_list|,
name|Attribute
index|[]
name|attributes
parameter_list|,
specifier|final
name|byte
name|source
parameter_list|)
block|{
name|super
argument_list|(
name|access_flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|interfaces
operator|==
literal|null
condition|)
block|{
name|interfaces
operator|=
name|ArrayUtils
operator|.
name|EMPTY_INT_ARRAY
expr_stmt|;
block|}
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
name|attributes
operator|=
name|Attribute
operator|.
name|EMPTY_ATTRIBUTE_ARRAY
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
name|Field
operator|.
name|EMPTY_FIELD_ARRAY
expr_stmt|;
block|}
if|if
condition|(
name|methods
operator|==
literal|null
condition|)
block|{
name|methods
operator|=
name|Method
operator|.
name|EMPTY_METHOD_ARRAY
expr_stmt|;
block|}
name|this
operator|.
name|classNameIndex
operator|=
name|classNameIndex
expr_stmt|;
name|this
operator|.
name|superclassNameIndex
operator|=
name|superclassNameIndex
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|this
operator|.
name|major
operator|=
name|major
expr_stmt|;
name|this
operator|.
name|minor
operator|=
name|minor
expr_stmt|;
name|this
operator|.
name|constantPool
operator|=
name|constantPool
expr_stmt|;
name|this
operator|.
name|interfaces
operator|=
name|interfaces
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|methods
operator|=
name|methods
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
comment|// Get source file name if available
for|for
control|(
specifier|final
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
if|if
condition|(
name|attribute
operator|instanceof
name|SourceFile
condition|)
block|{
name|sourceFileName
operator|=
operator|(
operator|(
name|SourceFile
operator|)
name|attribute
operator|)
operator|.
name|getSourceFileName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|/*          * According to the specification the following entries must be of type `ConstantClass' but we check that anyway via the          * `ConstPool.getConstant' method.          */
name|className
operator|=
name|constantPool
operator|.
name|getConstantString
argument_list|(
name|classNameIndex
argument_list|,
name|Const
operator|.
name|CONSTANT_Class
argument_list|)
expr_stmt|;
name|className
operator|=
name|Utility
operator|.
name|compactClassName
argument_list|(
name|className
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|index
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|packageName
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|packageName
operator|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|superclassNameIndex
operator|>
literal|0
condition|)
block|{
comment|// May be zero -> class is java.lang.Object
name|superclassName
operator|=
name|constantPool
operator|.
name|getConstantString
argument_list|(
name|superclassNameIndex
argument_list|,
name|Const
operator|.
name|CONSTANT_Class
argument_list|)
expr_stmt|;
name|superclassName
operator|=
name|Utility
operator|.
name|compactClassName
argument_list|(
name|superclassName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|superclassName
operator|=
literal|"java.lang.Object"
expr_stmt|;
block|}
name|interfaceNames
operator|=
operator|new
name|String
index|[
name|interfaces
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|str
init|=
name|constantPool
operator|.
name|getConstantString
argument_list|(
name|interfaces
index|[
name|i
index|]
argument_list|,
name|Const
operator|.
name|CONSTANT_Class
argument_list|)
decl_stmt|;
name|interfaceNames
index|[
name|i
index|]
operator|=
name|Utility
operator|.
name|compactClassName
argument_list|(
name|str
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class.      * I.e., the hierarchy of methods, fields, attributes, etc. spawns a tree of objects.      *      * @param v Visitor object      */
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
specifier|final
name|Visitor
name|v
parameter_list|)
block|{
name|v
operator|.
name|visitJavaClass
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the natural ordering of two JavaClasses. This ordering is based on the class name      *      * @since 6.0      */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|JavaClass
name|obj
parameter_list|)
block|{
return|return
name|getClassName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|obj
operator|.
name|getClassName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|computeNestedTypeStatus
parameter_list|()
block|{
if|if
condition|(
name|computedNestedTypeStatus
condition|)
block|{
return|return;
block|}
for|for
control|(
specifier|final
name|Attribute
name|attribute
range|:
name|this
operator|.
name|attributes
control|)
block|{
if|if
condition|(
name|attribute
operator|instanceof
name|InnerClasses
condition|)
block|{
operator|(
operator|(
name|InnerClasses
operator|)
name|attribute
operator|)
operator|.
name|forEach
argument_list|(
name|innerClass
lambda|->
block|{
name|boolean
name|innerClassAttributeRefersToMe
init|=
literal|false
decl_stmt|;
name|String
name|innerClassName
init|=
name|constantPool
operator|.
name|getConstantString
argument_list|(
name|innerClass
operator|.
name|getInnerClassIndex
argument_list|()
argument_list|,
name|Const
operator|.
name|CONSTANT_Class
argument_list|)
decl_stmt|;
name|innerClassName
operator|=
name|Utility
operator|.
name|compactClassName
argument_list|(
name|innerClassName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|innerClassName
operator|.
name|equals
argument_list|(
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
name|innerClassAttributeRefersToMe
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|innerClassAttributeRefersToMe
condition|)
block|{
name|this
operator|.
name|isNested
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|innerClass
operator|.
name|getInnerNameIndex
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|isAnonymous
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|computedNestedTypeStatus
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * @return deep copy of this class      */
specifier|public
name|JavaClass
name|copy
parameter_list|()
block|{
name|JavaClass
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
operator|(
name|JavaClass
operator|)
name|clone
argument_list|()
expr_stmt|;
name|c
operator|.
name|constantPool
operator|=
name|constantPool
operator|.
name|copy
argument_list|()
expr_stmt|;
name|c
operator|.
name|interfaces
operator|=
name|interfaces
operator|.
name|clone
argument_list|()
expr_stmt|;
name|c
operator|.
name|interfaceNames
operator|=
name|interfaceNames
operator|.
name|clone
argument_list|()
expr_stmt|;
name|c
operator|.
name|fields
operator|=
operator|new
name|Field
index|[
name|fields
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|.
name|fields
index|[
name|i
index|]
operator|=
name|fields
index|[
name|i
index|]
operator|.
name|copy
argument_list|(
name|c
operator|.
name|constantPool
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|methods
operator|=
operator|new
name|Method
index|[
name|methods
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|.
name|methods
index|[
name|i
index|]
operator|=
name|methods
index|[
name|i
index|]
operator|.
name|copy
argument_list|(
name|c
operator|.
name|constantPool
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|attributes
operator|=
operator|new
name|Attribute
index|[
name|attributes
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|.
name|attributes
index|[
name|i
index|]
operator|=
name|attributes
index|[
name|i
index|]
operator|.
name|copy
argument_list|(
name|c
operator|.
name|constantPool
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
comment|// TODO should this throw?
block|}
return|return
name|c
return|;
block|}
comment|/**      * Dump Java class to output stream in binary format.      *      * @param file Output stream      * @throws IOException if an I/O error occurs.      */
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|DataOutputStream
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|file
operator|.
name|writeInt
argument_list|(
name|Const
operator|.
name|JVM_CLASSFILE_MAGIC
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|minor
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|constantPool
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|super
operator|.
name|getAccessFlags
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|classNameIndex
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|superclassNameIndex
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|interfaces
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|int
name|interface1
range|:
name|interfaces
control|)
block|{
name|file
operator|.
name|writeShort
argument_list|(
name|interface1
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|writeShort
argument_list|(
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|fields
control|)
block|{
name|field
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|writeShort
argument_list|(
name|methods
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|methods
control|)
block|{
name|method
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
name|file
operator|.
name|writeShort
argument_list|(
name|attributes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
name|attribute
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|file
operator|.
name|writeShort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Dump class to a file.      *      * @param file Output file      * @throws IOException if an I/O error occurs.      */
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|parent
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
specifier|final
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
operator|&&
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create the directory "
operator|+
name|dir
argument_list|)
throw|;
block|}
block|}
try|try
init|(
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
init|)
block|{
name|dump
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Dump Java class to output stream in binary format.      *      * @param file Output stream      * @throws IOException if an I/O error occurs.      */
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|OutputStream
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|dump
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Dump class to a file named fileName.      *      * @param fileName Output file name      * @throws IOException if an I/O error occurs.      */
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|dump
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return value as defined by given BCELComparator strategy. By default two JavaClass objects are said to be equal when      * their class names are equal.      *      * @see Object#equals(Object)      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
return|return
name|bcelComparator
operator|.
name|equals
argument_list|(
name|this
argument_list|,
name|obj
argument_list|)
return|;
block|}
comment|/**      * Get all interfaces implemented by this JavaClass (transitively).      */
specifier|public
name|JavaClass
index|[]
name|getAllInterfaces
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
specifier|final
name|ClassQueue
name|queue
init|=
operator|new
name|ClassQueue
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|JavaClass
argument_list|>
name|allInterfaces
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|enqueue
argument_list|(
name|this
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|empty
argument_list|()
condition|)
block|{
specifier|final
name|JavaClass
name|clazz
init|=
name|queue
operator|.
name|dequeue
argument_list|()
decl_stmt|;
specifier|final
name|JavaClass
name|souper
init|=
name|clazz
operator|.
name|getSuperClass
argument_list|()
decl_stmt|;
specifier|final
name|JavaClass
index|[]
name|interfaces
init|=
name|clazz
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|allInterfaces
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|souper
operator|!=
literal|null
condition|)
block|{
name|queue
operator|.
name|enqueue
argument_list|(
name|souper
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|JavaClass
name|iface
range|:
name|interfaces
control|)
block|{
name|queue
operator|.
name|enqueue
argument_list|(
name|iface
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allInterfaces
operator|.
name|toArray
argument_list|(
name|JavaClass
operator|.
name|EMPTY_ARRAY
argument_list|)
return|;
block|}
comment|/**      * @return Annotations on the class      * @since 6.0      */
specifier|public
name|AnnotationEntry
index|[]
name|getAnnotationEntries
parameter_list|()
block|{
if|if
condition|(
name|annotations
operator|==
literal|null
condition|)
block|{
name|annotations
operator|=
name|AnnotationEntry
operator|.
name|createAnnotationEntries
argument_list|(
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|annotations
return|;
block|}
comment|/**      * @return Attributes of the class.      */
specifier|public
name|Attribute
index|[]
name|getAttributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
comment|/**      * @return class in binary format      */
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
specifier|final
name|ByteArrayOutputStream
name|s
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputStream
name|ds
init|=
operator|new
name|DataOutputStream
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
name|dump
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e2
parameter_list|)
block|{
name|e2
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|s
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**      * @return Class name.      */
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
comment|/**      * @return Class name index.      */
specifier|public
name|int
name|getClassNameIndex
parameter_list|()
block|{
return|return
name|classNameIndex
return|;
block|}
comment|/**      * @return Constant pool.      */
specifier|public
name|ConstantPool
name|getConstantPool
parameter_list|()
block|{
return|return
name|constantPool
return|;
block|}
comment|/**      * @return Fields, i.e., variables of the class. Like the JVM spec mandates for the classfile format, these fields are      *         those specific to this class, and not those of the superclass or superinterfaces.      */
specifier|public
name|Field
index|[]
name|getFields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
comment|/**      * @return File name of class, aka SourceFile attribute value      */
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
comment|/**      * @return Indices in constant pool of implemented interfaces.      */
specifier|public
name|int
index|[]
name|getInterfaceIndices
parameter_list|()
block|{
return|return
name|interfaces
return|;
block|}
comment|/**      * @return Names of implemented interfaces.      */
specifier|public
name|String
index|[]
name|getInterfaceNames
parameter_list|()
block|{
return|return
name|interfaceNames
return|;
block|}
comment|/**      * Get interfaces directly implemented by this JavaClass.      */
specifier|public
name|JavaClass
index|[]
name|getInterfaces
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
specifier|final
name|String
index|[]
name|interfaces
init|=
name|getInterfaceNames
argument_list|()
decl_stmt|;
specifier|final
name|JavaClass
index|[]
name|classes
init|=
operator|new
name|JavaClass
index|[
name|interfaces
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|classes
index|[
name|i
index|]
operator|=
name|repository
operator|.
name|loadClass
argument_list|(
name|interfaces
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|classes
return|;
block|}
comment|/**      * @return Major number of class file version.      */
specifier|public
name|int
name|getMajor
parameter_list|()
block|{
return|return
name|major
return|;
block|}
comment|/**      * @return A {@link Method} corresponding to java.lang.reflect.Method if any      */
specifier|public
name|Method
name|getMethod
parameter_list|(
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|m
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getModifiers
argument_list|()
operator|==
name|method
operator|.
name|getModifiers
argument_list|()
operator|&&
name|Type
operator|.
name|getSignature
argument_list|(
name|m
argument_list|)
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getSignature
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @return Methods of the class.      */
specifier|public
name|Method
index|[]
name|getMethods
parameter_list|()
block|{
return|return
name|methods
return|;
block|}
comment|/**      * @return Minor number of class file version.      */
specifier|public
name|int
name|getMinor
parameter_list|()
block|{
return|return
name|minor
return|;
block|}
comment|/**      * @return Package name.      */
specifier|public
name|String
name|getPackageName
parameter_list|()
block|{
return|return
name|packageName
return|;
block|}
comment|/**      * Gets the ClassRepository which holds its definition. By default this is the same as      * SyntheticRepository.getInstance();      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|Repository
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
comment|/**      * @return returns either HEAP (generated), FILE, or ZIP      */
specifier|public
specifier|final
name|byte
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
comment|/**      * @return absolute path to file where this class was read from      */
specifier|public
name|String
name|getSourceFileName
parameter_list|()
block|{
return|return
name|sourceFileName
return|;
block|}
comment|/**      * @return the superclass for this JavaClass object, or null if this is java.lang.Object      * @throws ClassNotFoundException if the superclass can't be found      */
specifier|public
name|JavaClass
name|getSuperClass
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
literal|"java.lang.Object"
operator|.
name|equals
argument_list|(
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|repository
operator|.
name|loadClass
argument_list|(
name|getSuperclassName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return list of super classes of this class in ascending order, i.e., java.lang.Object is always the last element      * @throws ClassNotFoundException if any of the superclasses can't be found      */
specifier|public
name|JavaClass
index|[]
name|getSuperClasses
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|JavaClass
name|clazz
init|=
name|this
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JavaClass
argument_list|>
name|allSuperClasses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|clazz
operator|=
name|clazz
operator|.
name|getSuperClass
argument_list|()
init|;
name|clazz
operator|!=
literal|null
condition|;
name|clazz
operator|=
name|clazz
operator|.
name|getSuperClass
argument_list|()
control|)
block|{
name|allSuperClasses
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|allSuperClasses
operator|.
name|toArray
argument_list|(
name|JavaClass
operator|.
name|EMPTY_ARRAY
argument_list|)
return|;
block|}
comment|/**      * returns the super class name of this class. In the case that this class is java.lang.Object, it will return itself      * (java.lang.Object). This is probably incorrect but isn't fixed at this time to not break existing clients.      *      * @return Superclass name.      */
specifier|public
name|String
name|getSuperclassName
parameter_list|()
block|{
return|return
name|superclassName
return|;
block|}
comment|/**      * @return Class name index.      */
specifier|public
name|int
name|getSuperclassNameIndex
parameter_list|()
block|{
return|return
name|superclassNameIndex
return|;
block|}
comment|/**      * Return value as defined by given BCELComparator strategy. By default return the hashcode of the class name.      *      * @see Object#hashCode()      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|bcelComparator
operator|.
name|hashCode
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * @return true, if this class is an implementation of interface inter      * @throws ClassNotFoundException if superclasses or superinterfaces of this class can't be found      */
specifier|public
name|boolean
name|implementationOf
parameter_list|(
specifier|final
name|JavaClass
name|inter
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
operator|!
name|inter
operator|.
name|isInterface
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|inter
operator|.
name|getClassName
argument_list|()
operator|+
literal|" is no interface"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|equals
argument_list|(
name|inter
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|JavaClass
index|[]
name|super_interfaces
init|=
name|getAllInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|JavaClass
name|super_interface
range|:
name|super_interfaces
control|)
block|{
if|if
condition|(
name|super_interface
operator|.
name|equals
argument_list|(
name|inter
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Equivalent to runtime "instanceof" operator.      *      * @return true if this JavaClass is derived from the super class      * @throws ClassNotFoundException if superclasses or superinterfaces of this object can't be found      */
specifier|public
specifier|final
name|boolean
name|instanceOf
parameter_list|(
specifier|final
name|JavaClass
name|super_class
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|this
operator|.
name|equals
argument_list|(
name|super_class
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|JavaClass
index|[]
name|super_classes
init|=
name|getSuperClasses
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|JavaClass
name|super_classe
range|:
name|super_classes
control|)
block|{
if|if
condition|(
name|super_classe
operator|.
name|equals
argument_list|(
name|super_class
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|super_class
operator|.
name|isInterface
argument_list|()
condition|)
block|{
return|return
name|implementationOf
argument_list|(
name|super_class
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * @since 6.0      */
specifier|public
specifier|final
name|boolean
name|isAnonymous
parameter_list|()
block|{
name|computeNestedTypeStatus
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|isAnonymous
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isClass
parameter_list|()
block|{
return|return
operator|(
name|super
operator|.
name|getAccessFlags
argument_list|()
operator|&
name|Const
operator|.
name|ACC_INTERFACE
operator|)
operator|==
literal|0
return|;
block|}
comment|/**      * @since 6.0      */
specifier|public
specifier|final
name|boolean
name|isNested
parameter_list|()
block|{
name|computeNestedTypeStatus
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|isNested
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isSuper
parameter_list|()
block|{
return|return
operator|(
name|super
operator|.
name|getAccessFlags
argument_list|()
operator|&
name|Const
operator|.
name|ACC_SUPER
operator|)
operator|!=
literal|0
return|;
block|}
comment|/**      * @param attributes .      */
specifier|public
name|void
name|setAttributes
parameter_list|(
specifier|final
name|Attribute
index|[]
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * @param className .      */
specifier|public
name|void
name|setClassName
parameter_list|(
specifier|final
name|String
name|className
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
block|}
comment|/**      * @param classNameIndex .      */
specifier|public
name|void
name|setClassNameIndex
parameter_list|(
specifier|final
name|int
name|classNameIndex
parameter_list|)
block|{
name|this
operator|.
name|classNameIndex
operator|=
name|classNameIndex
expr_stmt|;
block|}
comment|/**      * @param constantPool .      */
specifier|public
name|void
name|setConstantPool
parameter_list|(
specifier|final
name|ConstantPool
name|constantPool
parameter_list|)
block|{
name|this
operator|.
name|constantPool
operator|=
name|constantPool
expr_stmt|;
block|}
comment|/**      * @param fields .      */
specifier|public
name|void
name|setFields
parameter_list|(
specifier|final
name|Field
index|[]
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
comment|/**      * Set File name of class, aka SourceFile attribute value      */
specifier|public
name|void
name|setFileName
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
comment|/**      * @param interfaceNames .      */
specifier|public
name|void
name|setInterfaceNames
parameter_list|(
specifier|final
name|String
index|[]
name|interfaceNames
parameter_list|)
block|{
name|this
operator|.
name|interfaceNames
operator|=
name|interfaceNames
expr_stmt|;
block|}
comment|/**      * @param interfaces .      */
specifier|public
name|void
name|setInterfaces
parameter_list|(
specifier|final
name|int
index|[]
name|interfaces
parameter_list|)
block|{
name|this
operator|.
name|interfaces
operator|=
name|interfaces
expr_stmt|;
block|}
comment|/**      * @param major .      */
specifier|public
name|void
name|setMajor
parameter_list|(
specifier|final
name|int
name|major
parameter_list|)
block|{
name|this
operator|.
name|major
operator|=
name|major
expr_stmt|;
block|}
comment|/**      * @param methods .      */
specifier|public
name|void
name|setMethods
parameter_list|(
specifier|final
name|Method
index|[]
name|methods
parameter_list|)
block|{
name|this
operator|.
name|methods
operator|=
name|methods
expr_stmt|;
block|}
comment|/**      * @param minor .      */
specifier|public
name|void
name|setMinor
parameter_list|(
specifier|final
name|int
name|minor
parameter_list|)
block|{
name|this
operator|.
name|minor
operator|=
name|minor
expr_stmt|;
block|}
comment|/**      * Sets the ClassRepository which loaded the JavaClass. Should be called immediately after parsing is done.      */
specifier|public
name|void
name|setRepository
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|Repository
name|repository
parameter_list|)
block|{
comment|// TODO make protected?
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
comment|/**      * Set absolute path to file this class was read from.      */
specifier|public
name|void
name|setSourceFileName
parameter_list|(
specifier|final
name|String
name|sourceFileName
parameter_list|)
block|{
name|this
operator|.
name|sourceFileName
operator|=
name|sourceFileName
expr_stmt|;
block|}
comment|/**      * @param superclassName .      */
specifier|public
name|void
name|setSuperclassName
parameter_list|(
specifier|final
name|String
name|superclassName
parameter_list|)
block|{
name|this
operator|.
name|superclassName
operator|=
name|superclassName
expr_stmt|;
block|}
comment|/**      * @param superclassNameIndex .      */
specifier|public
name|void
name|setSuperclassNameIndex
parameter_list|(
specifier|final
name|int
name|superclassNameIndex
parameter_list|)
block|{
name|this
operator|.
name|superclassNameIndex
operator|=
name|superclassNameIndex
expr_stmt|;
block|}
comment|/**      * @return String representing class contents.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|access
init|=
name|Utility
operator|.
name|accessToString
argument_list|(
name|super
operator|.
name|getAccessFlags
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|access
operator|=
name|access
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|access
operator|+
literal|" "
expr_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|128
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|access
argument_list|)
operator|.
name|append
argument_list|(
name|Utility
operator|.
name|classOrInterface
argument_list|(
name|super
operator|.
name|getAccessFlags
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|className
argument_list|)
operator|.
name|append
argument_list|(
literal|" extends "
argument_list|)
operator|.
name|append
argument_list|(
name|Utility
operator|.
name|compactClassName
argument_list|(
name|superclassName
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
specifier|final
name|int
name|size
init|=
name|interfaces
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"implements\t\t"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|interfaceNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|size
operator|-
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"file name\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|fileName
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"compiled from\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|sourceFileName
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"compiler version\t"
argument_list|)
operator|.
name|append
argument_list|(
name|major
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|minor
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"access flags\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|super
operator|.
name|getAccessFlags
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"constant pool\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|constantPool
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" entries\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"ACC_SUPER flag\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|isSuper
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\nAttribute(s):\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|indent
argument_list|(
name|attribute
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|AnnotationEntry
index|[]
name|annotations
init|=
name|getAnnotationEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|annotations
operator|!=
literal|null
operator|&&
name|annotations
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\nAnnotation(s):\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|AnnotationEntry
name|annotation
range|:
name|annotations
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|indent
argument_list|(
name|annotation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fields
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|fields
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|" fields:\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|fields
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|methods
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|methods
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|" methods:\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|methods
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|method
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

