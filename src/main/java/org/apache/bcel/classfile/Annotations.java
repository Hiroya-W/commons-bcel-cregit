begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_comment
comment|/**  * base class for annotations  *  * @since 6.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Annotations
extends|extends
name|Attribute
block|{
specifier|private
name|AnnotationEntry
index|[]
name|annotationTable
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isRuntimeVisible
decl_stmt|;
comment|/**      * @param annotation_type the subclass type of the annotation      * @param name_index Index pointing to the name<em>Code</em>      * @param length Content length in bytes      * @param input Input stream      * @param constant_pool Array of constants      * @param isRuntimeVisible whether this Annotation visible at runtime      * @throws IOException if an I/O error occurs.      */
name|Annotations
parameter_list|(
specifier|final
name|byte
name|annotation_type
parameter_list|,
specifier|final
name|int
name|name_index
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|DataInput
name|input
parameter_list|,
specifier|final
name|ConstantPool
name|constant_pool
parameter_list|,
specifier|final
name|boolean
name|isRuntimeVisible
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|annotation_type
argument_list|,
name|name_index
argument_list|,
name|length
argument_list|,
operator|(
name|AnnotationEntry
index|[]
operator|)
literal|null
argument_list|,
name|constant_pool
argument_list|,
name|isRuntimeVisible
argument_list|)
expr_stmt|;
specifier|final
name|int
name|annotation_table_length
init|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|annotationTable
operator|=
operator|new
name|AnnotationEntry
index|[
name|annotation_table_length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotation_table_length
condition|;
name|i
operator|++
control|)
block|{
name|annotationTable
index|[
name|i
index|]
operator|=
name|AnnotationEntry
operator|.
name|read
argument_list|(
name|input
argument_list|,
name|constant_pool
argument_list|,
name|isRuntimeVisible
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param annotationType the subclass type of the annotation      * @param nameIndex Index pointing to the name<em>Code</em>      * @param length Content length in bytes      * @param annotationTable the actual annotations      * @param constantPool Array of constants      * @param isRuntimeVisible whether this Annotation visible at runtime      */
specifier|public
name|Annotations
parameter_list|(
specifier|final
name|byte
name|annotationType
parameter_list|,
specifier|final
name|int
name|nameIndex
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|AnnotationEntry
index|[]
name|annotationTable
parameter_list|,
specifier|final
name|ConstantPool
name|constantPool
parameter_list|,
specifier|final
name|boolean
name|isRuntimeVisible
parameter_list|)
block|{
name|super
argument_list|(
name|annotationType
argument_list|,
name|nameIndex
argument_list|,
name|length
argument_list|,
name|constantPool
argument_list|)
expr_stmt|;
name|this
operator|.
name|annotationTable
operator|=
name|annotationTable
expr_stmt|;
name|this
operator|.
name|isRuntimeVisible
operator|=
name|isRuntimeVisible
expr_stmt|;
block|}
comment|/**      * Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class.      * I.e., the hierarchy of methods, fields, attributes, etc. spawns a tree of objects.      *      * @param v Visitor object      */
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
specifier|final
name|Visitor
name|v
parameter_list|)
block|{
name|v
operator|.
name|visitAnnotation
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param annotationTable the entries to set in this annotation      */
specifier|public
specifier|final
name|void
name|setAnnotationTable
parameter_list|(
specifier|final
name|AnnotationEntry
index|[]
name|annotationTable
parameter_list|)
block|{
name|this
operator|.
name|annotationTable
operator|=
name|annotationTable
expr_stmt|;
block|}
comment|/**      * returns the array of annotation entries in this annotation      */
specifier|public
name|AnnotationEntry
index|[]
name|getAnnotationEntries
parameter_list|()
block|{
return|return
name|annotationTable
return|;
block|}
comment|/**      * @return the number of annotation entries in this annotation      */
specifier|public
specifier|final
name|int
name|getNumAnnotations
parameter_list|()
block|{
if|if
condition|(
name|annotationTable
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|annotationTable
operator|.
name|length
return|;
block|}
specifier|public
name|boolean
name|isRuntimeVisible
parameter_list|()
block|{
return|return
name|isRuntimeVisible
return|;
block|}
specifier|protected
name|void
name|writeAnnotations
parameter_list|(
specifier|final
name|DataOutputStream
name|dos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|annotationTable
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|dos
operator|.
name|writeShort
argument_list|(
name|annotationTable
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|AnnotationEntry
name|element
range|:
name|annotationTable
control|)
block|{
name|element
operator|.
name|dump
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return String representation      */
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|Const
operator|.
name|getAttributeName
argument_list|(
name|getTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotationTable
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
operator|.
name|append
argument_list|(
name|annotationTable
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|annotationTable
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

