begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_comment
comment|/**  * Denotes basic type such as int.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BasicType
extends|extends
name|Type
block|{
comment|// @since 6.0 no longer final
specifier|public
specifier|static
name|BasicType
name|getType
parameter_list|(
specifier|final
name|byte
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Const
operator|.
name|T_VOID
case|:
return|return
name|VOID
return|;
case|case
name|Const
operator|.
name|T_BOOLEAN
case|:
return|return
name|BOOLEAN
return|;
case|case
name|Const
operator|.
name|T_BYTE
case|:
return|return
name|BYTE
return|;
case|case
name|Const
operator|.
name|T_SHORT
case|:
return|return
name|SHORT
return|;
case|case
name|Const
operator|.
name|T_CHAR
case|:
return|return
name|CHAR
return|;
case|case
name|Const
operator|.
name|T_INT
case|:
return|return
name|INT
return|;
case|case
name|Const
operator|.
name|T_LONG
case|:
return|return
name|LONG
return|;
case|case
name|Const
operator|.
name|T_DOUBLE
case|:
return|return
name|DOUBLE
return|;
case|case
name|Const
operator|.
name|T_FLOAT
case|:
return|return
name|FLOAT
return|;
default|default:
throw|throw
operator|new
name|ClassGenException
argument_list|(
literal|"Invalid type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**      * Constructor for basic types such as int, long, `void'      *      * @param type one of T_INT, T_BOOLEAN, ..., T_VOID      * @see Const      */
name|BasicType
parameter_list|(
specifier|final
name|byte
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|Const
operator|.
name|getShortTypeName
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
argument_list|<
name|Const
operator|.
name|T_BOOLEAN
operator|||
name|type
argument_list|>
name|Const
operator|.
name|T_VOID
condition|)
block|{
throw|throw
operator|new
name|ClassGenException
argument_list|(
literal|"Invalid type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/** @return true if both type objects refer to the same type      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|_type
parameter_list|)
block|{
return|return
name|_type
operator|instanceof
name|BasicType
condition|?
operator|(
operator|(
name|BasicType
operator|)
name|_type
operator|)
operator|.
name|getType
argument_list|()
operator|==
name|this
operator|.
name|getType
argument_list|()
else|:
literal|false
return|;
block|}
comment|/** @return a hash code value for the object.      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
end_class

end_unit

