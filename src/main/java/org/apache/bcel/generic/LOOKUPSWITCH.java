begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_comment
comment|/**  * LOOKUPSWITCH - Switch with unordered set of values  *  * @version $Id$  * @see SWITCH  */
end_comment

begin_class
specifier|public
class|class
name|LOOKUPSWITCH
extends|extends
name|Select
block|{
comment|/**      * Empty constructor needed for Instruction.readInstruction.      * Not to be used otherwise.      */
name|LOOKUPSWITCH
parameter_list|()
block|{
block|}
specifier|public
name|LOOKUPSWITCH
parameter_list|(
specifier|final
name|int
index|[]
name|match
parameter_list|,
specifier|final
name|InstructionHandle
index|[]
name|targets
parameter_list|,
specifier|final
name|InstructionHandle
name|defaultTarget
parameter_list|)
block|{
name|super
argument_list|(
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
operator|.
name|LOOKUPSWITCH
argument_list|,
name|match
argument_list|,
name|targets
argument_list|,
name|defaultTarget
argument_list|)
expr_stmt|;
comment|/* alignment remainder assumed 0 here, until dump time. */
specifier|final
name|short
name|_length
init|=
operator|(
name|short
operator|)
operator|(
literal|9
operator|+
name|getMatch_length
argument_list|()
operator|*
literal|8
operator|)
decl_stmt|;
name|super
operator|.
name|setLength
argument_list|(
name|_length
argument_list|)
expr_stmt|;
name|setFixed_length
argument_list|(
name|_length
argument_list|)
expr_stmt|;
block|}
comment|/**      * Dump instruction as byte code to stream out.      * @param out Output stream      */
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|dump
argument_list|(
name|out
argument_list|)
expr_stmt|;
specifier|final
name|int
name|_match_length
init|=
name|getMatch_length
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|_match_length
argument_list|)
expr_stmt|;
comment|// npairs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_match_length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|super
operator|.
name|getMatch
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// match-offset pairs
name|out
operator|.
name|writeInt
argument_list|(
name|setIndices
argument_list|(
name|i
argument_list|,
name|getTargetOffset
argument_list|(
name|super
operator|.
name|getTarget
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Read needed data (e.g. index) from file.      */
annotation|@
name|Override
specifier|protected
name|void
name|initFromFile
parameter_list|(
specifier|final
name|ByteSequence
name|bytes
parameter_list|,
specifier|final
name|boolean
name|wide
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initFromFile
argument_list|(
name|bytes
argument_list|,
name|wide
argument_list|)
expr_stmt|;
comment|// reads padding
specifier|final
name|int
name|_match_length
init|=
name|bytes
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|setMatch_length
argument_list|(
name|_match_length
argument_list|)
expr_stmt|;
specifier|final
name|short
name|_fixed_length
init|=
operator|(
name|short
operator|)
operator|(
literal|9
operator|+
name|_match_length
operator|*
literal|8
operator|)
decl_stmt|;
name|setFixed_length
argument_list|(
name|_fixed_length
argument_list|)
expr_stmt|;
specifier|final
name|short
name|_length
init|=
operator|(
name|short
operator|)
operator|(
name|_match_length
operator|+
name|super
operator|.
name|getPadding
argument_list|()
operator|)
decl_stmt|;
name|super
operator|.
name|setLength
argument_list|(
name|_length
argument_list|)
expr_stmt|;
name|super
operator|.
name|setMatches
argument_list|(
operator|new
name|int
index|[
name|_match_length
index|]
argument_list|)
expr_stmt|;
name|super
operator|.
name|setIndices
argument_list|(
operator|new
name|int
index|[
name|_match_length
index|]
argument_list|)
expr_stmt|;
name|super
operator|.
name|setTargets
argument_list|(
operator|new
name|InstructionHandle
index|[
name|_match_length
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_match_length
condition|;
name|i
operator|++
control|)
block|{
name|super
operator|.
name|setMatch
argument_list|(
name|i
argument_list|,
name|bytes
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setIndices
argument_list|(
name|i
argument_list|,
name|bytes
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Call corresponding visitor method(s). The order is:      * Call visitor methods of implemented interfaces first, then      * call methods according to the class hierarchy in descending order,      * i.e., the most specific visitXXX() call comes last.      *      * @param v Visitor object      */
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
specifier|final
name|Visitor
name|v
parameter_list|)
block|{
name|v
operator|.
name|visitVariableLengthInstruction
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|v
operator|.
name|visitStackConsumer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|v
operator|.
name|visitBranchInstruction
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|v
operator|.
name|visitSelect
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|v
operator|.
name|visitLOOKUPSWITCH
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

