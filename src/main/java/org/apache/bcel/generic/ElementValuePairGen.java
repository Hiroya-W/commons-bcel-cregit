begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.   *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantUtf8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ElementValuePair
import|;
end_import

begin_class
specifier|public
class|class
name|ElementValuePairGen
block|{
specifier|private
name|int
name|nameIdx
decl_stmt|;
specifier|private
name|ElementValueGen
name|value
decl_stmt|;
specifier|private
name|ConstantPoolGen
name|cpool
decl_stmt|;
specifier|public
name|ElementValuePairGen
parameter_list|(
name|ElementValuePair
name|nvp
parameter_list|,
name|ConstantPoolGen
name|cpool
parameter_list|,
name|boolean
name|copyPoolEntries
parameter_list|)
block|{
name|this
operator|.
name|cpool
operator|=
name|cpool
expr_stmt|;
comment|// J5ASSERT:
comment|// Could assert nvp.getNameString() points to the same thing as
comment|// cpool.getConstant(nvp.getNameIndex())
comment|// if
comment|// (!nvp.getNameString().equals(((ConstantUtf8)cpool.getConstant(nvp.getNameIndex())).getBytes()))
comment|// {
comment|// throw new RuntimeException("envp buggered");
comment|// }
if|if
condition|(
name|copyPoolEntries
condition|)
block|{
name|nameIdx
operator|=
name|cpool
operator|.
name|addUtf8
argument_list|(
name|nvp
operator|.
name|getNameString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nameIdx
operator|=
name|nvp
operator|.
name|getNameIndex
argument_list|()
expr_stmt|;
block|}
name|value
operator|=
name|ElementValueGen
operator|.
name|copy
argument_list|(
name|nvp
operator|.
name|getValue
argument_list|()
argument_list|,
name|cpool
argument_list|,
name|copyPoolEntries
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Retrieve an immutable version of this ElementNameValuePairGen 	 */
specifier|public
name|ElementValuePair
name|getElementNameValuePair
parameter_list|()
block|{
name|ElementValue
name|immutableValue
init|=
name|value
operator|.
name|getElementValue
argument_list|()
decl_stmt|;
return|return
operator|new
name|ElementValuePair
argument_list|(
name|nameIdx
argument_list|,
name|immutableValue
argument_list|,
name|cpool
operator|.
name|getConstantPool
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|ElementValuePairGen
parameter_list|(
name|int
name|idx
parameter_list|,
name|ElementValueGen
name|value
parameter_list|,
name|ConstantPoolGen
name|cpool
parameter_list|)
block|{
name|this
operator|.
name|nameIdx
operator|=
name|idx
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|cpool
operator|=
name|cpool
expr_stmt|;
block|}
specifier|public
name|ElementValuePairGen
parameter_list|(
name|String
name|name
parameter_list|,
name|ElementValueGen
name|value
parameter_list|,
name|ConstantPoolGen
name|cpool
parameter_list|)
block|{
name|this
operator|.
name|nameIdx
operator|=
name|cpool
operator|.
name|addUtf8
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|cpool
operator|=
name|cpool
expr_stmt|;
block|}
specifier|protected
name|void
name|dump
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|)
throws|throws
name|IOException
block|{
name|dos
operator|.
name|writeShort
argument_list|(
name|nameIdx
argument_list|)
expr_stmt|;
comment|// u2 name of the element
name|value
operator|.
name|dump
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNameIndex
parameter_list|()
block|{
return|return
name|nameIdx
return|;
block|}
specifier|public
specifier|final
name|String
name|getNameString
parameter_list|()
block|{
comment|// ConstantString cu8 = (ConstantString)cpool.getConstant(nameIdx);
return|return
operator|(
operator|(
name|ConstantUtf8
operator|)
name|cpool
operator|.
name|getConstant
argument_list|(
name|nameIdx
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|ElementValueGen
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ElementValuePair:["
operator|+
name|getNameString
argument_list|()
operator|+
literal|"="
operator|+
name|value
operator|.
name|stringifyValue
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

