begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/**  * This interface contains shareable instruction objects.  *<p>  * In order to save memory you can use some instructions multiply, since they have an immutable state and are directly  * derived from Instruction. I.e. they have no instance fields that could be changed. Since some of these instructions  * like ICONST_0 occur very frequently this can save a lot of time and space. This feature is an adaptation of the  * FlyWeight design pattern, we just use an array instead of a factory.  *</p>  *<p>  * The Instructions can also accessed directly under their names, so it's possible to write  * il.append(Instruction.ICONST_0);  *</p>  *  * @deprecated (since 6.0) Do not use. Use InstructionConst instead.  */
end_comment

begin_interface
annotation|@
name|Deprecated
specifier|public
interface|interface
name|InstructionConstants
block|{
class|class
name|Clinit
block|{}
comment|/*      * NOTE these are not currently immutable, because Instruction has mutable protected fields opcode and length.      */
name|Instruction
name|NOP
init|=
name|InstructionConst
operator|.
name|NOP
decl_stmt|;
name|Instruction
name|ACONST_NULL
init|=
name|InstructionConst
operator|.
name|ACONST_NULL
decl_stmt|;
name|Instruction
name|ICONST_M1
init|=
name|InstructionConst
operator|.
name|ICONST_M1
decl_stmt|;
name|Instruction
name|ICONST_0
init|=
name|InstructionConst
operator|.
name|ICONST_0
decl_stmt|;
name|Instruction
name|ICONST_1
init|=
name|InstructionConst
operator|.
name|ICONST_1
decl_stmt|;
name|Instruction
name|ICONST_2
init|=
name|InstructionConst
operator|.
name|ICONST_2
decl_stmt|;
name|Instruction
name|ICONST_3
init|=
name|InstructionConst
operator|.
name|ICONST_3
decl_stmt|;
name|Instruction
name|ICONST_4
init|=
name|InstructionConst
operator|.
name|ICONST_4
decl_stmt|;
name|Instruction
name|ICONST_5
init|=
name|InstructionConst
operator|.
name|ICONST_5
decl_stmt|;
name|Instruction
name|LCONST_0
init|=
name|InstructionConst
operator|.
name|LCONST_0
decl_stmt|;
name|Instruction
name|LCONST_1
init|=
name|InstructionConst
operator|.
name|LCONST_1
decl_stmt|;
name|Instruction
name|FCONST_0
init|=
name|InstructionConst
operator|.
name|FCONST_0
decl_stmt|;
name|Instruction
name|FCONST_1
init|=
name|InstructionConst
operator|.
name|FCONST_1
decl_stmt|;
name|Instruction
name|FCONST_2
init|=
name|InstructionConst
operator|.
name|FCONST_2
decl_stmt|;
name|Instruction
name|DCONST_0
init|=
name|InstructionConst
operator|.
name|FCONST_2
decl_stmt|;
name|Instruction
name|DCONST_1
init|=
name|InstructionConst
operator|.
name|DCONST_1
decl_stmt|;
name|ArrayInstruction
name|IALOAD
init|=
name|InstructionConst
operator|.
name|IALOAD
decl_stmt|;
name|ArrayInstruction
name|LALOAD
init|=
name|InstructionConst
operator|.
name|LALOAD
decl_stmt|;
name|ArrayInstruction
name|FALOAD
init|=
name|InstructionConst
operator|.
name|FALOAD
decl_stmt|;
name|ArrayInstruction
name|DALOAD
init|=
name|InstructionConst
operator|.
name|DALOAD
decl_stmt|;
name|ArrayInstruction
name|AALOAD
init|=
name|InstructionConst
operator|.
name|AALOAD
decl_stmt|;
name|ArrayInstruction
name|BALOAD
init|=
name|InstructionConst
operator|.
name|BALOAD
decl_stmt|;
name|ArrayInstruction
name|CALOAD
init|=
name|InstructionConst
operator|.
name|CALOAD
decl_stmt|;
name|ArrayInstruction
name|SALOAD
init|=
name|InstructionConst
operator|.
name|SALOAD
decl_stmt|;
name|ArrayInstruction
name|IASTORE
init|=
name|InstructionConst
operator|.
name|IASTORE
decl_stmt|;
name|ArrayInstruction
name|LASTORE
init|=
name|InstructionConst
operator|.
name|LASTORE
decl_stmt|;
name|ArrayInstruction
name|FASTORE
init|=
name|InstructionConst
operator|.
name|FASTORE
decl_stmt|;
name|ArrayInstruction
name|DASTORE
init|=
name|InstructionConst
operator|.
name|DASTORE
decl_stmt|;
name|ArrayInstruction
name|AASTORE
init|=
name|InstructionConst
operator|.
name|AASTORE
decl_stmt|;
name|ArrayInstruction
name|BASTORE
init|=
name|InstructionConst
operator|.
name|BASTORE
decl_stmt|;
name|ArrayInstruction
name|CASTORE
init|=
name|InstructionConst
operator|.
name|CASTORE
decl_stmt|;
name|ArrayInstruction
name|SASTORE
init|=
name|InstructionConst
operator|.
name|SASTORE
decl_stmt|;
name|StackInstruction
name|POP
init|=
name|InstructionConst
operator|.
name|POP
decl_stmt|;
name|StackInstruction
name|POP2
init|=
name|InstructionConst
operator|.
name|POP2
decl_stmt|;
name|StackInstruction
name|DUP
init|=
name|InstructionConst
operator|.
name|DUP
decl_stmt|;
name|StackInstruction
name|DUP_X1
init|=
name|InstructionConst
operator|.
name|DUP_X1
decl_stmt|;
name|StackInstruction
name|DUP_X2
init|=
name|InstructionConst
operator|.
name|DUP_X2
decl_stmt|;
name|StackInstruction
name|DUP2
init|=
name|InstructionConst
operator|.
name|DUP2
decl_stmt|;
name|StackInstruction
name|DUP2_X1
init|=
name|InstructionConst
operator|.
name|DUP2_X1
decl_stmt|;
name|StackInstruction
name|DUP2_X2
init|=
name|InstructionConst
operator|.
name|DUP2_X2
decl_stmt|;
name|StackInstruction
name|SWAP
init|=
name|InstructionConst
operator|.
name|SWAP
decl_stmt|;
name|ArithmeticInstruction
name|IADD
init|=
name|InstructionConst
operator|.
name|IADD
decl_stmt|;
name|ArithmeticInstruction
name|LADD
init|=
name|InstructionConst
operator|.
name|LADD
decl_stmt|;
name|ArithmeticInstruction
name|FADD
init|=
name|InstructionConst
operator|.
name|FADD
decl_stmt|;
name|ArithmeticInstruction
name|DADD
init|=
name|InstructionConst
operator|.
name|DADD
decl_stmt|;
name|ArithmeticInstruction
name|ISUB
init|=
name|InstructionConst
operator|.
name|ISUB
decl_stmt|;
name|ArithmeticInstruction
name|LSUB
init|=
name|InstructionConst
operator|.
name|LSUB
decl_stmt|;
name|ArithmeticInstruction
name|FSUB
init|=
name|InstructionConst
operator|.
name|FSUB
decl_stmt|;
name|ArithmeticInstruction
name|DSUB
init|=
name|InstructionConst
operator|.
name|DSUB
decl_stmt|;
name|ArithmeticInstruction
name|IMUL
init|=
name|InstructionConst
operator|.
name|IMUL
decl_stmt|;
name|ArithmeticInstruction
name|LMUL
init|=
name|InstructionConst
operator|.
name|LMUL
decl_stmt|;
name|ArithmeticInstruction
name|FMUL
init|=
name|InstructionConst
operator|.
name|FMUL
decl_stmt|;
name|ArithmeticInstruction
name|DMUL
init|=
name|InstructionConst
operator|.
name|DMUL
decl_stmt|;
name|ArithmeticInstruction
name|IDIV
init|=
name|InstructionConst
operator|.
name|IDIV
decl_stmt|;
name|ArithmeticInstruction
name|LDIV
init|=
name|InstructionConst
operator|.
name|LDIV
decl_stmt|;
name|ArithmeticInstruction
name|FDIV
init|=
name|InstructionConst
operator|.
name|FDIV
decl_stmt|;
name|ArithmeticInstruction
name|DDIV
init|=
name|InstructionConst
operator|.
name|DDIV
decl_stmt|;
name|ArithmeticInstruction
name|IREM
init|=
name|InstructionConst
operator|.
name|IREM
decl_stmt|;
name|ArithmeticInstruction
name|LREM
init|=
name|InstructionConst
operator|.
name|LREM
decl_stmt|;
name|ArithmeticInstruction
name|FREM
init|=
name|InstructionConst
operator|.
name|FREM
decl_stmt|;
name|ArithmeticInstruction
name|DREM
init|=
name|InstructionConst
operator|.
name|DREM
decl_stmt|;
name|ArithmeticInstruction
name|INEG
init|=
name|InstructionConst
operator|.
name|INEG
decl_stmt|;
name|ArithmeticInstruction
name|LNEG
init|=
name|InstructionConst
operator|.
name|LNEG
decl_stmt|;
name|ArithmeticInstruction
name|FNEG
init|=
name|InstructionConst
operator|.
name|FNEG
decl_stmt|;
name|ArithmeticInstruction
name|DNEG
init|=
name|InstructionConst
operator|.
name|DNEG
decl_stmt|;
name|ArithmeticInstruction
name|ISHL
init|=
name|InstructionConst
operator|.
name|ISHL
decl_stmt|;
name|ArithmeticInstruction
name|LSHL
init|=
name|InstructionConst
operator|.
name|LSHL
decl_stmt|;
name|ArithmeticInstruction
name|ISHR
init|=
name|InstructionConst
operator|.
name|ISHR
decl_stmt|;
name|ArithmeticInstruction
name|LSHR
init|=
name|InstructionConst
operator|.
name|LSHR
decl_stmt|;
name|ArithmeticInstruction
name|IUSHR
init|=
name|InstructionConst
operator|.
name|IUSHR
decl_stmt|;
name|ArithmeticInstruction
name|LUSHR
init|=
name|InstructionConst
operator|.
name|LUSHR
decl_stmt|;
name|ArithmeticInstruction
name|IAND
init|=
name|InstructionConst
operator|.
name|IAND
decl_stmt|;
name|ArithmeticInstruction
name|LAND
init|=
name|InstructionConst
operator|.
name|LAND
decl_stmt|;
name|ArithmeticInstruction
name|IOR
init|=
name|InstructionConst
operator|.
name|IOR
decl_stmt|;
name|ArithmeticInstruction
name|LOR
init|=
name|InstructionConst
operator|.
name|LOR
decl_stmt|;
name|ArithmeticInstruction
name|IXOR
init|=
name|InstructionConst
operator|.
name|IXOR
decl_stmt|;
name|ArithmeticInstruction
name|LXOR
init|=
name|InstructionConst
operator|.
name|LXOR
decl_stmt|;
name|ConversionInstruction
name|I2L
init|=
name|InstructionConst
operator|.
name|I2L
decl_stmt|;
name|ConversionInstruction
name|I2F
init|=
name|InstructionConst
operator|.
name|I2F
decl_stmt|;
name|ConversionInstruction
name|I2D
init|=
name|InstructionConst
operator|.
name|I2D
decl_stmt|;
name|ConversionInstruction
name|L2I
init|=
name|InstructionConst
operator|.
name|L2I
decl_stmt|;
name|ConversionInstruction
name|L2F
init|=
name|InstructionConst
operator|.
name|L2F
decl_stmt|;
name|ConversionInstruction
name|L2D
init|=
name|InstructionConst
operator|.
name|L2D
decl_stmt|;
name|ConversionInstruction
name|F2I
init|=
name|InstructionConst
operator|.
name|F2I
decl_stmt|;
name|ConversionInstruction
name|F2L
init|=
name|InstructionConst
operator|.
name|F2L
decl_stmt|;
name|ConversionInstruction
name|F2D
init|=
name|InstructionConst
operator|.
name|F2D
decl_stmt|;
name|ConversionInstruction
name|D2I
init|=
name|InstructionConst
operator|.
name|D2I
decl_stmt|;
name|ConversionInstruction
name|D2L
init|=
name|InstructionConst
operator|.
name|D2L
decl_stmt|;
name|ConversionInstruction
name|D2F
init|=
name|InstructionConst
operator|.
name|D2F
decl_stmt|;
name|ConversionInstruction
name|I2B
init|=
name|InstructionConst
operator|.
name|I2B
decl_stmt|;
name|ConversionInstruction
name|I2C
init|=
name|InstructionConst
operator|.
name|I2C
decl_stmt|;
name|ConversionInstruction
name|I2S
init|=
name|InstructionConst
operator|.
name|I2S
decl_stmt|;
name|Instruction
name|LCMP
init|=
name|InstructionConst
operator|.
name|LCMP
decl_stmt|;
name|Instruction
name|FCMPL
init|=
name|InstructionConst
operator|.
name|FCMPL
decl_stmt|;
name|Instruction
name|FCMPG
init|=
name|InstructionConst
operator|.
name|FCMPG
decl_stmt|;
name|Instruction
name|DCMPL
init|=
name|InstructionConst
operator|.
name|DCMPL
decl_stmt|;
name|Instruction
name|DCMPG
init|=
name|InstructionConst
operator|.
name|DCMPG
decl_stmt|;
name|ReturnInstruction
name|IRETURN
init|=
name|InstructionConst
operator|.
name|IRETURN
decl_stmt|;
name|ReturnInstruction
name|LRETURN
init|=
name|InstructionConst
operator|.
name|LRETURN
decl_stmt|;
name|ReturnInstruction
name|FRETURN
init|=
name|InstructionConst
operator|.
name|FRETURN
decl_stmt|;
name|ReturnInstruction
name|DRETURN
init|=
name|InstructionConst
operator|.
name|DRETURN
decl_stmt|;
name|ReturnInstruction
name|ARETURN
init|=
name|InstructionConst
operator|.
name|ARETURN
decl_stmt|;
name|ReturnInstruction
name|RETURN
init|=
name|InstructionConst
operator|.
name|RETURN
decl_stmt|;
name|Instruction
name|ARRAYLENGTH
init|=
name|InstructionConst
operator|.
name|ARRAYLENGTH
decl_stmt|;
name|Instruction
name|ATHROW
init|=
name|InstructionConst
operator|.
name|ATHROW
decl_stmt|;
name|Instruction
name|MONITORENTER
init|=
name|InstructionConst
operator|.
name|MONITORENTER
decl_stmt|;
name|Instruction
name|MONITOREXIT
init|=
name|InstructionConst
operator|.
name|MONITOREXIT
decl_stmt|;
comment|/**      * You can use these constants in multiple places safely, if you can guarantee that you will never alter their internal      * values, e.g. call setIndex().      */
name|LocalVariableInstruction
name|THIS
init|=
name|InstructionConst
operator|.
name|THIS
decl_stmt|;
name|LocalVariableInstruction
name|ALOAD_0
init|=
name|THIS
decl_stmt|;
name|LocalVariableInstruction
name|ALOAD_1
init|=
name|InstructionConst
operator|.
name|ALOAD_1
decl_stmt|;
name|LocalVariableInstruction
name|ALOAD_2
init|=
name|InstructionConst
operator|.
name|ALOAD_2
decl_stmt|;
name|LocalVariableInstruction
name|ILOAD_0
init|=
name|InstructionConst
operator|.
name|ILOAD_0
decl_stmt|;
name|LocalVariableInstruction
name|ILOAD_1
init|=
name|InstructionConst
operator|.
name|ILOAD_1
decl_stmt|;
name|LocalVariableInstruction
name|ILOAD_2
init|=
name|InstructionConst
operator|.
name|ILOAD_2
decl_stmt|;
name|LocalVariableInstruction
name|ASTORE_0
init|=
name|InstructionConst
operator|.
name|ASTORE_0
decl_stmt|;
name|LocalVariableInstruction
name|ASTORE_1
init|=
name|InstructionConst
operator|.
name|ASTORE_1
decl_stmt|;
name|LocalVariableInstruction
name|ASTORE_2
init|=
name|InstructionConst
operator|.
name|ASTORE_2
decl_stmt|;
name|LocalVariableInstruction
name|ISTORE_0
init|=
name|InstructionConst
operator|.
name|ISTORE_0
decl_stmt|;
name|LocalVariableInstruction
name|ISTORE_1
init|=
name|InstructionConst
operator|.
name|ISTORE_1
decl_stmt|;
name|LocalVariableInstruction
name|ISTORE_2
init|=
name|InstructionConst
operator|.
name|ISTORE_2
decl_stmt|;
comment|/**      * Gets object via its opcode, for immutable instructions like branch instructions entries are set to null.      */
name|Instruction
index|[]
name|INSTRUCTIONS
init|=
name|InstructionConst
operator|.
name|INSTRUCTIONS
decl_stmt|;
comment|/**      * Interfaces may have no static initializers, so we simulate this with an inner class.      */
name|Clinit
name|bla
init|=
operator|new
name|Clinit
argument_list|()
decl_stmt|;
block|}
end_interface

end_unit

