begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/**  * Super class for JSR - Jump to subroutine  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|JsrInstruction
extends|extends
name|BranchInstruction
implements|implements
name|UnconditionalBranch
implements|,
name|TypedInstruction
implements|,
name|StackProducer
block|{
name|JsrInstruction
parameter_list|(
specifier|final
name|short
name|opcode
parameter_list|,
specifier|final
name|InstructionHandle
name|target
parameter_list|)
block|{
name|super
argument_list|(
name|opcode
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**      * Empty constructor needed for Instruction.readInstruction.      * Not to be used otherwise.      */
name|JsrInstruction
parameter_list|()
block|{
block|}
comment|/** @return return address type      */
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|(
specifier|final
name|ConstantPoolGen
name|cp
parameter_list|)
block|{
return|return
operator|new
name|ReturnaddressType
argument_list|(
name|physicalSuccessor
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns an InstructionHandle to the physical successor      * of this JsrInstruction.<B>For this method to work,      * this JsrInstruction object must not be shared between      * multiple InstructionHandle objects!</B>      * Formally, there must not be InstructionHandle objects      * i, j where i != j and i.getInstruction() == this ==      * j.getInstruction().      * @return an InstructionHandle to the "next" instruction that      * will be executed when RETurned from a subroutine.      */
specifier|public
name|InstructionHandle
name|physicalSuccessor
parameter_list|()
block|{
name|InstructionHandle
name|ih
init|=
name|super
operator|.
name|getTarget
argument_list|()
decl_stmt|;
comment|// Rewind!
while|while
condition|(
name|ih
operator|.
name|getPrev
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ih
operator|=
name|ih
operator|.
name|getPrev
argument_list|()
expr_stmt|;
block|}
comment|// Find the handle for "this" JsrInstruction object.
while|while
condition|(
name|ih
operator|.
name|getInstruction
argument_list|()
operator|!=
name|this
condition|)
block|{
name|ih
operator|=
name|ih
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
specifier|final
name|InstructionHandle
name|toThis
init|=
name|ih
decl_stmt|;
while|while
condition|(
name|ih
operator|!=
literal|null
condition|)
block|{
name|ih
operator|=
name|ih
operator|.
name|getNext
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|ih
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ih
operator|.
name|getInstruction
argument_list|()
operator|==
name|this
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"physicalSuccessor() called on a shared JsrInstruction."
argument_list|)
throw|;
block|}
block|}
comment|// Return the physical successor
return|return
name|toThis
operator|.
name|getNext
argument_list|()
return|;
block|}
block|}
end_class

end_unit

