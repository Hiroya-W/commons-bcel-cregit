begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright  2000-2004 The Apache Software Foundation  *  *  Licensed under the Apache License, Version 2.0 (the "License");   *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.   *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Super class for the x2y family of instructions.  *  * @version $Id$  * @author<A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ConversionInstruction
extends|extends
name|Instruction
implements|implements
name|TypedInstruction
implements|,
name|StackProducer
implements|,
name|StackConsumer
block|{
comment|/**      * Empty constructor needed for the Class.newInstance() statement in      * Instruction.readInstruction(). Not to be used otherwise.      */
name|ConversionInstruction
parameter_list|()
block|{
block|}
comment|/**      * @param opcode opcode of instruction      */
specifier|protected
name|ConversionInstruction
parameter_list|(
name|short
name|opcode
parameter_list|)
block|{
name|super
argument_list|(
name|opcode
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/** @return type associated with the instruction      */
specifier|public
name|Type
name|getType
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|)
block|{
switch|switch
condition|(
name|opcode
condition|)
block|{
case|case
name|Constants
operator|.
name|D2I
case|:
case|case
name|Constants
operator|.
name|F2I
case|:
case|case
name|Constants
operator|.
name|L2I
case|:
return|return
name|Type
operator|.
name|INT
return|;
case|case
name|Constants
operator|.
name|D2F
case|:
case|case
name|Constants
operator|.
name|I2F
case|:
case|case
name|Constants
operator|.
name|L2F
case|:
return|return
name|Type
operator|.
name|FLOAT
return|;
case|case
name|Constants
operator|.
name|D2L
case|:
case|case
name|Constants
operator|.
name|F2L
case|:
case|case
name|Constants
operator|.
name|I2L
case|:
return|return
name|Type
operator|.
name|LONG
return|;
case|case
name|Constants
operator|.
name|F2D
case|:
case|case
name|Constants
operator|.
name|I2D
case|:
case|case
name|Constants
operator|.
name|L2D
case|:
return|return
name|Type
operator|.
name|DOUBLE
return|;
case|case
name|Constants
operator|.
name|I2B
case|:
return|return
name|Type
operator|.
name|BYTE
return|;
case|case
name|Constants
operator|.
name|I2C
case|:
return|return
name|Type
operator|.
name|CHAR
return|;
case|case
name|Constants
operator|.
name|I2S
case|:
return|return
name|Type
operator|.
name|SHORT
return|;
default|default:
comment|// Never reached
throw|throw
operator|new
name|ClassGenException
argument_list|(
literal|"Unknown type "
operator|+
name|opcode
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

