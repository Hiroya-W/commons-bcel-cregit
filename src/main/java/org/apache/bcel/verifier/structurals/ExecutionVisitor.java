begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|structurals
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantString
import|;
end_import

begin_comment
comment|// CHECKSTYLE:OFF (there are lots of references!)
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|*
import|;
end_import

begin_comment
comment|//CHECKSTYLE:ON
end_comment

begin_comment
comment|/**  * This Visitor class may be used for a type-based Java Virtual Machine  * simulation.  *  *<p>It does not check for correct types on the OperandStack or in the  * LocalVariables; nor does it check their sizes are sufficiently big.  * Thus, to use this Visitor for bytecode verifying, you have to make sure  * externally that the type constraints of the Java Virtual Machine instructions  * are satisfied. An InstConstraintVisitor may be used for this.  * Anyway, this Visitor does not mandate it. For example, when you  * visitIADD(IADD o), then there are two stack slots popped and one  * stack slot containing a Type.INT is pushed (where you could also  * pop only one slot if you know there are two Type.INT on top of the  * stack). Monitor-specific behavior is not simulated.</p>  *  *<b>Conventions:</b>  *  *<p>Type.VOID will never be pushed onto the stack. Type.DOUBLE and Type.LONG  * that would normally take up two stack slots (like Double_HIGH and  * Double_LOW) are represented by a simple single Type.DOUBLE or Type.LONG  * object on the stack here.</p>  *  *<p>If a two-slot type is stored into a local variable, the next variable  * is given the type Type.UNKNOWN.</p>  *  * @see #visitDSTORE(DSTORE o)  * @see InstConstraintVisitor  */
end_comment

begin_class
specifier|public
class|class
name|ExecutionVisitor
extends|extends
name|EmptyVisitor
block|{
comment|/**      * The executionframe we're operating on.      */
specifier|private
name|Frame
name|frame
init|=
literal|null
decl_stmt|;
comment|/**      * The ConstantPoolGen we're working with.      * @see #setConstantPoolGen(ConstantPoolGen)      */
specifier|private
name|ConstantPoolGen
name|cpg
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor. Constructs a new instance of this class.      */
specifier|public
name|ExecutionVisitor
parameter_list|()
block|{
block|}
comment|/**      * The OperandStack from the current Frame we're operating on.      * @see #setFrame(Frame)      */
specifier|private
name|OperandStack
name|stack
parameter_list|()
block|{
return|return
name|frame
operator|.
name|getStack
argument_list|()
return|;
block|}
comment|/**      * The LocalVariables from the current Frame we're operating on.      * @see #setFrame(Frame)      */
specifier|private
name|LocalVariables
name|locals
parameter_list|()
block|{
return|return
name|frame
operator|.
name|getLocals
argument_list|()
return|;
block|}
comment|/**      * Sets the ConstantPoolGen needed for symbolic execution.      */
specifier|public
name|void
name|setConstantPoolGen
parameter_list|(
specifier|final
name|ConstantPoolGen
name|cpg
parameter_list|)
block|{
comment|// TODO could be package-protected?
name|this
operator|.
name|cpg
operator|=
name|cpg
expr_stmt|;
block|}
comment|/**      * The only method granting access to the single instance of      * the ExecutionVisitor class. Before actively using this      * instance,<B>SET THE ConstantPoolGen FIRST</B>.      * @see #setConstantPoolGen(ConstantPoolGen)      */
specifier|public
name|void
name|setFrame
parameter_list|(
specifier|final
name|Frame
name|f
parameter_list|)
block|{
comment|// TODO could be package-protected?
name|this
operator|.
name|frame
operator|=
name|f
expr_stmt|;
block|}
comment|///** Symbolically executes the corresponding Java Virtual Machine instruction. */
comment|//public void visitWIDE(WIDE o) {
comment|// The WIDE instruction is modelled as a flag
comment|// of the embedded instructions in BCEL.
comment|// Therefore BCEL checks for possible errors
comment|// when parsing in the .class file: We don't
comment|// have even the possibilty to care for WIDE
comment|// here.
comment|//}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitAALOAD
parameter_list|(
specifier|final
name|AALOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|// pop the index int
comment|//System.out.print(stack().peek());
specifier|final
name|Type
name|t
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
comment|// Pop Array type
if|if
condition|(
name|t
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
comment|// Do nothing stackwise --- a NullPointerException is thrown at Run-Time
else|else
block|{
specifier|final
name|ArrayType
name|at
init|=
operator|(
name|ArrayType
operator|)
name|t
decl_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|at
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitAASTORE
parameter_list|(
specifier|final
name|AASTORE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitACONST_NULL
parameter_list|(
specifier|final
name|ACONST_NULL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitALOAD
parameter_list|(
specifier|final
name|ALOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|locals
argument_list|()
operator|.
name|get
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitANEWARRAY
parameter_list|(
specifier|final
name|ANEWARRAY
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|//count
name|stack
argument_list|()
operator|.
name|push
argument_list|(
operator|new
name|ArrayType
argument_list|(
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitARETURN
parameter_list|(
specifier|final
name|ARETURN
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitARRAYLENGTH
parameter_list|(
specifier|final
name|ARRAYLENGTH
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitASTORE
parameter_list|(
specifier|final
name|ASTORE
name|o
parameter_list|)
block|{
name|locals
argument_list|()
operator|.
name|set
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|,
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
comment|//System.err.println("TODO-DEBUG:    set LV '"+o.getIndex()+"' to '"+locals().get(o.getIndex())+"'.");
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitATHROW
parameter_list|(
specifier|final
name|ATHROW
name|o
parameter_list|)
block|{
specifier|final
name|Type
name|t
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|stack
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|getType
argument_list|(
literal|"Ljava/lang/NullPointerException;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitBALOAD
parameter_list|(
specifier|final
name|BALOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitBASTORE
parameter_list|(
specifier|final
name|BASTORE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitBIPUSH
parameter_list|(
specifier|final
name|BIPUSH
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitCALOAD
parameter_list|(
specifier|final
name|CALOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitCASTORE
parameter_list|(
specifier|final
name|CASTORE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitCHECKCAST
parameter_list|(
specifier|final
name|CHECKCAST
name|o
parameter_list|)
block|{
comment|// It's possibly wrong to do so, but SUN's
comment|// ByteCode verifier seems to do (only) this, too.
comment|// TODO: One could use a sophisticated analysis here to check
comment|//       if a type cannot possibly be cated to another and by
comment|//       so doing predict the ClassCastException at run-time.
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitD2F
parameter_list|(
specifier|final
name|D2F
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitD2I
parameter_list|(
specifier|final
name|D2I
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitD2L
parameter_list|(
specifier|final
name|D2L
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDADD
parameter_list|(
specifier|final
name|DADD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDALOAD
parameter_list|(
specifier|final
name|DALOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDASTORE
parameter_list|(
specifier|final
name|DASTORE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDCMPG
parameter_list|(
specifier|final
name|DCMPG
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDCMPL
parameter_list|(
specifier|final
name|DCMPL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDCONST
parameter_list|(
specifier|final
name|DCONST
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDDIV
parameter_list|(
specifier|final
name|DDIV
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDLOAD
parameter_list|(
specifier|final
name|DLOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDMUL
parameter_list|(
specifier|final
name|DMUL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDNEG
parameter_list|(
specifier|final
name|DNEG
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDREM
parameter_list|(
specifier|final
name|DREM
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDRETURN
parameter_list|(
specifier|final
name|DRETURN
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDSTORE
parameter_list|(
specifier|final
name|DSTORE
name|o
parameter_list|)
block|{
name|locals
argument_list|()
operator|.
name|set
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|,
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
name|locals
argument_list|()
operator|.
name|set
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
argument_list|,
name|Type
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDSUB
parameter_list|(
specifier|final
name|DSUB
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDUP
parameter_list|(
specifier|final
name|DUP
name|o
parameter_list|)
block|{
specifier|final
name|Type
name|t
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDUP_X1
parameter_list|(
specifier|final
name|DUP_X1
name|o
parameter_list|)
block|{
specifier|final
name|Type
name|w1
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|Type
name|w2
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|w1
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|w2
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|w1
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDUP_X2
parameter_list|(
specifier|final
name|DUP_X2
name|o
parameter_list|)
block|{
specifier|final
name|Type
name|w1
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|Type
name|w2
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|w2
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|w1
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|w2
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|w1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Type
name|w3
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|w1
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|w3
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|w2
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|w1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDUP2
parameter_list|(
specifier|final
name|DUP2
name|o
parameter_list|)
block|{
specifier|final
name|Type
name|t
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// t.getSize() is 1
specifier|final
name|Type
name|u
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDUP2_X1
parameter_list|(
specifier|final
name|DUP2_X1
name|o
parameter_list|)
block|{
specifier|final
name|Type
name|t
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
specifier|final
name|Type
name|u
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//t.getSize() is1
specifier|final
name|Type
name|u
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|Type
name|v
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitDUP2_X2
parameter_list|(
specifier|final
name|DUP2_X2
name|o
parameter_list|)
block|{
specifier|final
name|Type
name|t
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
specifier|final
name|Type
name|u
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Type
name|v
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//t.getSize() is 1
specifier|final
name|Type
name|u
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|Type
name|v
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Type
name|w
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitF2D
parameter_list|(
specifier|final
name|F2D
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitF2I
parameter_list|(
specifier|final
name|F2I
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitF2L
parameter_list|(
specifier|final
name|F2L
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFADD
parameter_list|(
specifier|final
name|FADD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFALOAD
parameter_list|(
specifier|final
name|FALOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFASTORE
parameter_list|(
specifier|final
name|FASTORE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFCMPG
parameter_list|(
specifier|final
name|FCMPG
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFCMPL
parameter_list|(
specifier|final
name|FCMPL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFCONST
parameter_list|(
specifier|final
name|FCONST
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFDIV
parameter_list|(
specifier|final
name|FDIV
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFLOAD
parameter_list|(
specifier|final
name|FLOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFMUL
parameter_list|(
specifier|final
name|FMUL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFNEG
parameter_list|(
specifier|final
name|FNEG
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFREM
parameter_list|(
specifier|final
name|FREM
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFRETURN
parameter_list|(
specifier|final
name|FRETURN
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFSTORE
parameter_list|(
specifier|final
name|FSTORE
name|o
parameter_list|)
block|{
name|locals
argument_list|()
operator|.
name|set
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|,
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitFSUB
parameter_list|(
specifier|final
name|FSUB
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitGETFIELD
parameter_list|(
specifier|final
name|GETFIELD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|Type
name|t
init|=
name|o
operator|.
name|getFieldType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|CHAR
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
condition|)
block|{
name|t
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitGETSTATIC
parameter_list|(
specifier|final
name|GETSTATIC
name|o
parameter_list|)
block|{
name|Type
name|t
init|=
name|o
operator|.
name|getFieldType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|CHAR
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
condition|)
block|{
name|t
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitGOTO
parameter_list|(
specifier|final
name|GOTO
name|o
parameter_list|)
block|{
comment|// no stack changes.
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitGOTO_W
parameter_list|(
specifier|final
name|GOTO_W
name|o
parameter_list|)
block|{
comment|// no stack changes.
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitI2B
parameter_list|(
specifier|final
name|I2B
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitI2C
parameter_list|(
specifier|final
name|I2C
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitI2D
parameter_list|(
specifier|final
name|I2D
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitI2F
parameter_list|(
specifier|final
name|I2F
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitI2L
parameter_list|(
specifier|final
name|I2L
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitI2S
parameter_list|(
specifier|final
name|I2S
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIADD
parameter_list|(
specifier|final
name|IADD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIALOAD
parameter_list|(
specifier|final
name|IALOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIAND
parameter_list|(
specifier|final
name|IAND
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIASTORE
parameter_list|(
specifier|final
name|IASTORE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitICONST
parameter_list|(
specifier|final
name|ICONST
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIDIV
parameter_list|(
specifier|final
name|IDIV
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIF_ACMPEQ
parameter_list|(
specifier|final
name|IF_ACMPEQ
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIF_ACMPNE
parameter_list|(
specifier|final
name|IF_ACMPNE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIF_ICMPEQ
parameter_list|(
specifier|final
name|IF_ICMPEQ
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIF_ICMPGE
parameter_list|(
specifier|final
name|IF_ICMPGE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIF_ICMPGT
parameter_list|(
specifier|final
name|IF_ICMPGT
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIF_ICMPLE
parameter_list|(
specifier|final
name|IF_ICMPLE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIF_ICMPLT
parameter_list|(
specifier|final
name|IF_ICMPLT
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIF_ICMPNE
parameter_list|(
specifier|final
name|IF_ICMPNE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIFEQ
parameter_list|(
specifier|final
name|IFEQ
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIFGE
parameter_list|(
specifier|final
name|IFGE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIFGT
parameter_list|(
specifier|final
name|IFGT
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIFLE
parameter_list|(
specifier|final
name|IFLE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIFLT
parameter_list|(
specifier|final
name|IFLT
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIFNE
parameter_list|(
specifier|final
name|IFNE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIFNONNULL
parameter_list|(
specifier|final
name|IFNONNULL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIFNULL
parameter_list|(
specifier|final
name|IFNULL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIINC
parameter_list|(
specifier|final
name|IINC
name|o
parameter_list|)
block|{
comment|// stack is not changed.
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitILOAD
parameter_list|(
specifier|final
name|ILOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIMUL
parameter_list|(
specifier|final
name|IMUL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitINEG
parameter_list|(
specifier|final
name|INEG
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitINSTANCEOF
parameter_list|(
specifier|final
name|INSTANCEOF
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/**      * Symbolically executes the corresponding Java Virtual Machine instruction.      * @since 6.0      */
annotation|@
name|Override
specifier|public
name|void
name|visitINVOKEDYNAMIC
parameter_list|(
specifier|final
name|INVOKEDYNAMIC
name|o
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|o
operator|.
name|getArgumentTypes
argument_list|(
name|cpg
argument_list|)
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|// We are sure the invoked method will xRETURN eventually
comment|// We simulate xRETURNs functionality here because we
comment|// don't really "jump into" and simulate the invoked
comment|// method.
if|if
condition|(
name|o
operator|.
name|getReturnType
argument_list|(
name|cpg
argument_list|)
operator|!=
name|Type
operator|.
name|VOID
condition|)
block|{
name|Type
name|t
init|=
name|o
operator|.
name|getReturnType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|CHAR
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
condition|)
block|{
name|t
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitINVOKEINTERFACE
parameter_list|(
specifier|final
name|INVOKEINTERFACE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|//objectref
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|o
operator|.
name|getArgumentTypes
argument_list|(
name|cpg
argument_list|)
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|// We are sure the invoked method will xRETURN eventually
comment|// We simulate xRETURNs functionality here because we
comment|// don't really "jump into" and simulate the invoked
comment|// method.
if|if
condition|(
name|o
operator|.
name|getReturnType
argument_list|(
name|cpg
argument_list|)
operator|!=
name|Type
operator|.
name|VOID
condition|)
block|{
name|Type
name|t
init|=
name|o
operator|.
name|getReturnType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|CHAR
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
condition|)
block|{
name|t
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitINVOKESPECIAL
parameter_list|(
specifier|final
name|INVOKESPECIAL
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|.
name|getMethodName
argument_list|(
name|cpg
argument_list|)
operator|.
name|equals
argument_list|(
name|Const
operator|.
name|CONSTRUCTOR_NAME
argument_list|)
condition|)
block|{
specifier|final
name|UninitializedObjectType
name|t
init|=
operator|(
name|UninitializedObjectType
operator|)
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
name|o
operator|.
name|getArgumentTypes
argument_list|(
name|cpg
argument_list|)
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
name|Frame
operator|.
name|getThis
argument_list|()
condition|)
block|{
name|Frame
operator|.
name|setThis
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|stack
argument_list|()
operator|.
name|initializeObject
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|locals
argument_list|()
operator|.
name|initializeObject
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|//objectref
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|o
operator|.
name|getArgumentTypes
argument_list|(
name|cpg
argument_list|)
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|// We are sure the invoked method will xRETURN eventually
comment|// We simulate xRETURNs functionality here because we
comment|// don't really "jump into" and simulate the invoked
comment|// method.
if|if
condition|(
name|o
operator|.
name|getReturnType
argument_list|(
name|cpg
argument_list|)
operator|!=
name|Type
operator|.
name|VOID
condition|)
block|{
name|Type
name|t
init|=
name|o
operator|.
name|getReturnType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|CHAR
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
condition|)
block|{
name|t
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitINVOKESTATIC
parameter_list|(
specifier|final
name|INVOKESTATIC
name|o
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|o
operator|.
name|getArgumentTypes
argument_list|(
name|cpg
argument_list|)
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|// We are sure the invoked method will xRETURN eventually
comment|// We simulate xRETURNs functionality here because we
comment|// don't really "jump into" and simulate the invoked
comment|// method.
if|if
condition|(
name|o
operator|.
name|getReturnType
argument_list|(
name|cpg
argument_list|)
operator|!=
name|Type
operator|.
name|VOID
condition|)
block|{
name|Type
name|t
init|=
name|o
operator|.
name|getReturnType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|CHAR
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
condition|)
block|{
name|t
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitINVOKEVIRTUAL
parameter_list|(
specifier|final
name|INVOKEVIRTUAL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|//objectref
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|o
operator|.
name|getArgumentTypes
argument_list|(
name|cpg
argument_list|)
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|// We are sure the invoked method will xRETURN eventually
comment|// We simulate xRETURNs functionality here because we
comment|// don't really "jump into" and simulate the invoked
comment|// method.
if|if
condition|(
name|o
operator|.
name|getReturnType
argument_list|(
name|cpg
argument_list|)
operator|!=
name|Type
operator|.
name|VOID
condition|)
block|{
name|Type
name|t
init|=
name|o
operator|.
name|getReturnType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|CHAR
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
operator|||
name|t
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
condition|)
block|{
name|t
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIOR
parameter_list|(
specifier|final
name|IOR
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIREM
parameter_list|(
specifier|final
name|IREM
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIRETURN
parameter_list|(
specifier|final
name|IRETURN
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitISHL
parameter_list|(
specifier|final
name|ISHL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitISHR
parameter_list|(
specifier|final
name|ISHR
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitISTORE
parameter_list|(
specifier|final
name|ISTORE
name|o
parameter_list|)
block|{
name|locals
argument_list|()
operator|.
name|set
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|,
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitISUB
parameter_list|(
specifier|final
name|ISUB
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIUSHR
parameter_list|(
specifier|final
name|IUSHR
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitIXOR
parameter_list|(
specifier|final
name|IXOR
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitJSR
parameter_list|(
specifier|final
name|JSR
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
operator|new
name|ReturnaddressType
argument_list|(
name|o
operator|.
name|physicalSuccessor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//System.err.println("TODO-----------:"+o.physicalSuccessor());
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitJSR_W
parameter_list|(
specifier|final
name|JSR_W
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
operator|new
name|ReturnaddressType
argument_list|(
name|o
operator|.
name|physicalSuccessor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitL2D
parameter_list|(
specifier|final
name|L2D
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitL2F
parameter_list|(
specifier|final
name|L2F
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitL2I
parameter_list|(
specifier|final
name|L2I
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLADD
parameter_list|(
specifier|final
name|LADD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLALOAD
parameter_list|(
specifier|final
name|LALOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLAND
parameter_list|(
specifier|final
name|LAND
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLASTORE
parameter_list|(
specifier|final
name|LASTORE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLCMP
parameter_list|(
specifier|final
name|LCMP
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLCONST
parameter_list|(
specifier|final
name|LCONST
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLDC
parameter_list|(
specifier|final
name|LDC
name|o
parameter_list|)
block|{
specifier|final
name|Constant
name|c
init|=
name|cpg
operator|.
name|getConstant
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|ConstantInteger
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|ConstantFloat
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|ConstantString
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|ConstantClass
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|CLASS
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
specifier|public
name|void
name|visitLDC_W
parameter_list|(
specifier|final
name|LDC_W
name|o
parameter_list|)
block|{
specifier|final
name|Constant
name|c
init|=
name|cpg
operator|.
name|getConstant
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|ConstantInteger
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|ConstantFloat
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|ConstantString
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|ConstantClass
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|CLASS
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLDC2_W
parameter_list|(
specifier|final
name|LDC2_W
name|o
parameter_list|)
block|{
specifier|final
name|Constant
name|c
init|=
name|cpg
operator|.
name|getConstant
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|ConstantLong
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|ConstantDouble
condition|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLDIV
parameter_list|(
specifier|final
name|LDIV
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLLOAD
parameter_list|(
specifier|final
name|LLOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|locals
argument_list|()
operator|.
name|get
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLMUL
parameter_list|(
specifier|final
name|LMUL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLNEG
parameter_list|(
specifier|final
name|LNEG
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLOOKUPSWITCH
parameter_list|(
specifier|final
name|LOOKUPSWITCH
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|//key
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLOR
parameter_list|(
specifier|final
name|LOR
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLREM
parameter_list|(
specifier|final
name|LREM
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLRETURN
parameter_list|(
specifier|final
name|LRETURN
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLSHL
parameter_list|(
specifier|final
name|LSHL
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLSHR
parameter_list|(
specifier|final
name|LSHR
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLSTORE
parameter_list|(
specifier|final
name|LSTORE
name|o
parameter_list|)
block|{
name|locals
argument_list|()
operator|.
name|set
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|,
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
name|locals
argument_list|()
operator|.
name|set
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
argument_list|,
name|Type
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLSUB
parameter_list|(
specifier|final
name|LSUB
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLUSHR
parameter_list|(
specifier|final
name|LUSHR
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitLXOR
parameter_list|(
specifier|final
name|LXOR
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitMONITORENTER
parameter_list|(
specifier|final
name|MONITORENTER
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitMONITOREXIT
parameter_list|(
specifier|final
name|MONITOREXIT
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitMULTIANEWARRAY
parameter_list|(
specifier|final
name|MULTIANEWARRAY
name|o
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|o
operator|.
name|getDimensions
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitNEW
parameter_list|(
specifier|final
name|NEW
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
operator|new
name|UninitializedObjectType
argument_list|(
operator|(
name|ObjectType
operator|)
operator|(
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitNEWARRAY
parameter_list|(
specifier|final
name|NEWARRAY
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|o
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitNOP
parameter_list|(
specifier|final
name|NOP
name|o
parameter_list|)
block|{
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitPOP
parameter_list|(
specifier|final
name|POP
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitPOP2
parameter_list|(
specifier|final
name|POP2
name|o
parameter_list|)
block|{
specifier|final
name|Type
name|t
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|getSize
argument_list|()
operator|==
literal|1
condition|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitPUTFIELD
parameter_list|(
specifier|final
name|PUTFIELD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitPUTSTATIC
parameter_list|(
specifier|final
name|PUTSTATIC
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitRET
parameter_list|(
specifier|final
name|RET
name|o
parameter_list|)
block|{
comment|// do nothing, return address
comment|// is in in the local variables.
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitRETURN
parameter_list|(
specifier|final
name|RETURN
name|o
parameter_list|)
block|{
comment|// do nothing.
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitSALOAD
parameter_list|(
specifier|final
name|SALOAD
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitSASTORE
parameter_list|(
specifier|final
name|SASTORE
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitSIPUSH
parameter_list|(
specifier|final
name|SIPUSH
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitSWAP
parameter_list|(
specifier|final
name|SWAP
name|o
parameter_list|)
block|{
specifier|final
name|Type
name|t
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|Type
name|u
init|=
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|stack
argument_list|()
operator|.
name|push
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
comment|/** Symbolically executes the corresponding Java Virtual Machine instruction. */
annotation|@
name|Override
specifier|public
name|void
name|visitTABLESWITCH
parameter_list|(
specifier|final
name|TABLESWITCH
name|o
parameter_list|)
block|{
name|stack
argument_list|()
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

