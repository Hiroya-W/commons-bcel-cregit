begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.   *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|structurals
package|;
end_package

begin_comment
comment|/**  * This class represents a JVM execution frame; that means,  * a local variable array and an operand stack.  *  * @version $Id$  * @author Enver Haase  */
end_comment

begin_class
specifier|public
class|class
name|Frame
block|{
comment|/** 	 * For instance initialization methods, it is important to remember 	 * which instance it is that is not initialized yet. It will be 	 * initialized invoking another constructor later. 	 * NULL means the instance already *is* initialized. 	 */
specifier|protected
specifier|static
name|UninitializedObjectType
name|_this
decl_stmt|;
comment|/** 	 * 	 */
specifier|private
name|LocalVariables
name|locals
decl_stmt|;
comment|/** 	 * 	 */
specifier|private
name|OperandStack
name|stack
decl_stmt|;
comment|/** 	 * 	 */
specifier|public
name|Frame
parameter_list|(
name|int
name|maxLocals
parameter_list|,
name|int
name|maxStack
parameter_list|)
block|{
name|locals
operator|=
operator|new
name|LocalVariables
argument_list|(
name|maxLocals
argument_list|)
expr_stmt|;
name|stack
operator|=
operator|new
name|OperandStack
argument_list|(
name|maxStack
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * 	 */
specifier|public
name|Frame
parameter_list|(
name|LocalVariables
name|locals
parameter_list|,
name|OperandStack
name|stack
parameter_list|)
block|{
name|this
operator|.
name|locals
operator|=
name|locals
expr_stmt|;
name|this
operator|.
name|stack
operator|=
name|stack
expr_stmt|;
block|}
comment|/** 	 * 	 */
specifier|protected
name|Object
name|clone
parameter_list|()
block|{
name|Frame
name|f
init|=
operator|new
name|Frame
argument_list|(
name|locals
operator|.
name|getClone
argument_list|()
argument_list|,
name|stack
operator|.
name|getClone
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|f
return|;
block|}
comment|/** 	 * 	 */
specifier|public
name|Frame
name|getClone
parameter_list|()
block|{
return|return
operator|(
name|Frame
operator|)
name|clone
argument_list|()
return|;
block|}
comment|/** 	 * 	 */
specifier|public
name|LocalVariables
name|getLocals
parameter_list|()
block|{
return|return
name|locals
return|;
block|}
comment|/** 	 * 	 */
specifier|public
name|OperandStack
name|getStack
parameter_list|()
block|{
return|return
name|stack
return|;
block|}
comment|/** @return a hash code value for the object.      */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|stack
operator|.
name|hashCode
argument_list|()
operator|^
name|locals
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/** 	 * 	 */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Frame
operator|)
condition|)
block|{
return|return
literal|false
return|;
comment|// implies "null" is non-equal.
block|}
name|Frame
name|f
init|=
operator|(
name|Frame
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|stack
operator|.
name|equals
argument_list|(
name|f
operator|.
name|stack
argument_list|)
operator|&&
name|this
operator|.
name|locals
operator|.
name|equals
argument_list|(
name|f
operator|.
name|locals
argument_list|)
return|;
block|}
comment|/** 	 * Returns a String representation of the Frame instance. 	 */
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|s
init|=
literal|"Local Variables:\n"
decl_stmt|;
name|s
operator|+=
name|locals
expr_stmt|;
name|s
operator|+=
literal|"OperandStack:\n"
expr_stmt|;
name|s
operator|+=
name|stack
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
end_class

end_unit

