begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_comment
comment|/**  * This repository is used in situations where a Class is created outside the realm of a ClassLoader. Classes are loaded  * from the file systems using the paths specified in the given class path. By default, this is the value returned by  * ClassPath.getClassPath(). This repository holds onto classes with SoftReferences, and will reload as needed, in cases  * where memory sizes are important.  *  * @see org.apache.bcel.Repository  */
end_comment

begin_class
specifier|public
class|class
name|MemorySensitiveClassPathRepository
extends|extends
name|AbstractClassPathRepository
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SoftReference
argument_list|<
name|JavaClass
argument_list|>
argument_list|>
name|loadedClasses
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// CLASSNAME X JAVACLASS
specifier|public
name|MemorySensitiveClassPathRepository
parameter_list|(
specifier|final
name|ClassPath
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clear all entries from cache.      */
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|loadedClasses
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Find an already defined (cached) JavaClass object by name.      */
annotation|@
name|Override
specifier|public
name|JavaClass
name|findClass
parameter_list|(
specifier|final
name|String
name|className
parameter_list|)
block|{
specifier|final
name|SoftReference
argument_list|<
name|JavaClass
argument_list|>
name|ref
init|=
name|loadedClasses
operator|.
name|get
argument_list|(
name|className
argument_list|)
decl_stmt|;
return|return
name|ref
operator|==
literal|null
condition|?
literal|null
else|:
name|ref
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Remove class from repository      */
annotation|@
name|Override
specifier|public
name|void
name|removeClass
parameter_list|(
specifier|final
name|JavaClass
name|clazz
parameter_list|)
block|{
name|loadedClasses
operator|.
name|remove
argument_list|(
name|clazz
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Store a new JavaClass instance into this Repository.      */
annotation|@
name|Override
specifier|public
name|void
name|storeClass
parameter_list|(
specifier|final
name|JavaClass
name|clazz
parameter_list|)
block|{
comment|// Not calling super.storeClass because this subclass maintains the mapping.
name|loadedClasses
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getClassName
argument_list|()
argument_list|,
operator|new
name|SoftReference
argument_list|<>
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setRepository
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

