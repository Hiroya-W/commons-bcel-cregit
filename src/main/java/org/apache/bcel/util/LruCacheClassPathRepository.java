begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_comment
comment|/**  * This repository maintains least-recently-used (LRU) cache of {@link JavaClass} with maximum size {@code cacheSize}.  *  *<p>This repository supports a class path consisting of too many JAR files to handle in {@link  * ClassPathRepository} or {@link MemorySensitiveClassPathRepository} without causing {@code OutOfMemoryError}.  *  * @since 6.4.0  */
end_comment

begin_class
specifier|public
class|class
name|LruCacheClassPathRepository
extends|extends
name|ClassPathRepository
block|{
specifier|private
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|JavaClass
argument_list|>
name|loadedClass
decl_stmt|;
specifier|public
name|LruCacheClassPathRepository
parameter_list|(
specifier|final
name|ClassPath
name|path
parameter_list|,
specifier|final
name|int
name|cacheSize
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheSize
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cacheSize must be a positive number"
argument_list|)
throw|;
block|}
name|int
name|initialCapacity
init|=
operator|(
name|int
operator|)
operator|(
literal|0.75
operator|*
name|cacheSize
operator|)
decl_stmt|;
name|boolean
name|accessOrder
init|=
literal|true
decl_stmt|;
comment|// Evicts least-recently-accessed
name|loadedClass
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|JavaClass
argument_list|>
argument_list|(
name|initialCapacity
argument_list|,
name|cacheSize
argument_list|,
name|accessOrder
argument_list|)
block|{
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JavaClass
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|cacheSize
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeClass
parameter_list|(
specifier|final
name|JavaClass
name|javaClass
parameter_list|)
block|{
comment|// Not storing parent's _loadedClass
name|loadedClass
operator|.
name|put
argument_list|(
name|javaClass
operator|.
name|getClassName
argument_list|()
argument_list|,
name|javaClass
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|setRepository
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JavaClass
name|findClass
parameter_list|(
specifier|final
name|String
name|className
parameter_list|)
block|{
return|return
name|loadedClass
operator|.
name|get
argument_list|(
name|className
argument_list|)
return|;
block|}
block|}
end_class

end_unit

