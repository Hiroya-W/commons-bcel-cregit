begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Code
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|CodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantFieldref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantInterfaceMethodref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantInvokeDynamic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantMethodref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantNameAndType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|LocalVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|LocalVariableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Utility
import|;
end_import

begin_comment
comment|/**  * Convert code into HTML file.  *  * @version $Id$  *   */
end_comment

begin_class
specifier|final
class|class
name|CodeHTML
block|{
specifier|private
specifier|final
name|String
name|class_name
decl_stmt|;
comment|// name of current class
comment|//    private Method[] methods; // Methods to print
specifier|private
specifier|final
name|PrintWriter
name|file
decl_stmt|;
comment|// file to write to
specifier|private
name|BitSet
name|goto_set
decl_stmt|;
specifier|private
specifier|final
name|ConstantPool
name|constant_pool
decl_stmt|;
specifier|private
specifier|final
name|ConstantHTML
name|constant_html
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|wide
init|=
literal|false
decl_stmt|;
name|CodeHTML
parameter_list|(
specifier|final
name|String
name|dir
parameter_list|,
specifier|final
name|String
name|class_name
parameter_list|,
specifier|final
name|Method
index|[]
name|methods
parameter_list|,
specifier|final
name|ConstantPool
name|constant_pool
parameter_list|,
specifier|final
name|ConstantHTML
name|constant_html
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|class_name
operator|=
name|class_name
expr_stmt|;
comment|//        this.methods = methods;
name|this
operator|.
name|constant_pool
operator|=
name|constant_pool
expr_stmt|;
name|this
operator|.
name|constant_html
operator|=
name|constant_html
expr_stmt|;
name|file
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|dir
operator|+
name|class_name
operator|+
literal|"_code.html"
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|println
argument_list|(
literal|"<HTML><BODY BGCOLOR=\"#C0C0C0\">"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writeMethod
argument_list|(
name|methods
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|println
argument_list|(
literal|"</BODY></HTML>"
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Disassemble a stream of byte codes and return the      * string representation.      *      * @param  stream data input stream      * @return String representation of byte code      */
specifier|private
name|String
name|codeToHTML
parameter_list|(
specifier|final
name|ByteSequence
name|bytes
parameter_list|,
specifier|final
name|int
name|method_number
parameter_list|)
throws|throws
name|IOException
block|{
name|short
name|opcode
init|=
operator|(
name|short
operator|)
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|String
name|name
decl_stmt|;
name|String
name|signature
decl_stmt|;
name|int
name|default_offset
init|=
literal|0
decl_stmt|;
name|int
name|low
decl_stmt|;
name|int
name|high
decl_stmt|;
name|int
name|index
decl_stmt|;
name|int
name|class_index
decl_stmt|;
name|int
name|vindex
decl_stmt|;
name|int
name|constant
decl_stmt|;
name|int
index|[]
name|jump_table
decl_stmt|;
name|int
name|no_pad_bytes
init|=
literal|0
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|256
argument_list|)
decl_stmt|;
comment|// CHECKSTYLE IGNORE MagicNumber
name|buf
operator|.
name|append
argument_list|(
literal|"<TT>"
argument_list|)
operator|.
name|append
argument_list|(
name|Const
operator|.
name|getOpcodeName
argument_list|(
name|opcode
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</TT></TD><TD>"
argument_list|)
expr_stmt|;
comment|/* Special case: Skip (0-3) padding bytes, i.e., the          * following bytes are 4-byte-aligned          */
if|if
condition|(
operator|(
name|opcode
operator|==
name|Const
operator|.
name|TABLESWITCH
operator|)
operator|||
operator|(
name|opcode
operator|==
name|Const
operator|.
name|LOOKUPSWITCH
operator|)
condition|)
block|{
name|int
name|remainder
init|=
name|bytes
operator|.
name|getIndex
argument_list|()
operator|%
literal|4
decl_stmt|;
name|no_pad_bytes
operator|=
operator|(
name|remainder
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
literal|4
operator|-
name|remainder
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|no_pad_bytes
condition|;
name|i
operator|++
control|)
block|{
name|bytes
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
comment|// Both cases have a field default_offset in common
name|default_offset
operator|=
name|bytes
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|opcode
condition|)
block|{
case|case
name|Const
operator|.
name|TABLESWITCH
case|:
name|low
operator|=
name|bytes
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|high
operator|=
name|bytes
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|offset
operator|=
name|bytes
operator|.
name|getIndex
argument_list|()
operator|-
literal|12
operator|-
name|no_pad_bytes
operator|-
literal|1
expr_stmt|;
name|default_offset
operator|+=
name|offset
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<TABLE BORDER=1><TR>"
argument_list|)
expr_stmt|;
comment|// Print switch indices in first row (and default)
name|jump_table
operator|=
operator|new
name|int
index|[
name|high
operator|-
name|low
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jump_table
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|jump_table
index|[
name|i
index|]
operator|=
name|offset
operator|+
name|bytes
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<TH>"
argument_list|)
operator|.
name|append
argument_list|(
name|low
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"</TH>"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"<TH>default</TH></TR>\n<TR>"
argument_list|)
expr_stmt|;
comment|// Print target and default indices in second row
for|for
control|(
name|int
name|element
range|:
name|jump_table
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<TD><A HREF=\"#code"
argument_list|)
operator|.
name|append
argument_list|(
name|method_number
argument_list|)
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|element
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
operator|.
name|append
argument_list|(
name|element
argument_list|)
operator|.
name|append
argument_list|(
literal|"</A></TD>"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"<TD><A HREF=\"#code"
argument_list|)
operator|.
name|append
argument_list|(
name|method_number
argument_list|)
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|default_offset
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
operator|.
name|append
argument_list|(
name|default_offset
argument_list|)
operator|.
name|append
argument_list|(
literal|"</A></TD></TR>\n</TABLE>\n"
argument_list|)
expr_stmt|;
break|break;
comment|/* Lookup switch has variable length arguments.              */
case|case
name|Const
operator|.
name|LOOKUPSWITCH
case|:
name|int
name|npairs
init|=
name|bytes
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|offset
operator|=
name|bytes
operator|.
name|getIndex
argument_list|()
operator|-
literal|8
operator|-
name|no_pad_bytes
operator|-
literal|1
expr_stmt|;
name|jump_table
operator|=
operator|new
name|int
index|[
name|npairs
index|]
expr_stmt|;
name|default_offset
operator|+=
name|offset
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<TABLE BORDER=1><TR>"
argument_list|)
expr_stmt|;
comment|// Print switch indices in first row (and default)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|npairs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|match
init|=
name|bytes
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|jump_table
index|[
name|i
index|]
operator|=
name|offset
operator|+
name|bytes
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<TH>"
argument_list|)
operator|.
name|append
argument_list|(
name|match
argument_list|)
operator|.
name|append
argument_list|(
literal|"</TH>"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"<TH>default</TH></TR>\n<TR>"
argument_list|)
expr_stmt|;
comment|// Print target and default indices in second row
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|npairs
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<TD><A HREF=\"#code"
argument_list|)
operator|.
name|append
argument_list|(
name|method_number
argument_list|)
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|jump_table
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
operator|.
name|append
argument_list|(
name|jump_table
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"</A></TD>"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"<TD><A HREF=\"#code"
argument_list|)
operator|.
name|append
argument_list|(
name|method_number
argument_list|)
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|default_offset
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
operator|.
name|append
argument_list|(
name|default_offset
argument_list|)
operator|.
name|append
argument_list|(
literal|"</A></TD></TR>\n</TABLE>\n"
argument_list|)
expr_stmt|;
break|break;
comment|/* Two address bytes + offset from start of byte stream form the              * jump target.              */
case|case
name|Const
operator|.
name|GOTO
case|:
case|case
name|Const
operator|.
name|IFEQ
case|:
case|case
name|Const
operator|.
name|IFGE
case|:
case|case
name|Const
operator|.
name|IFGT
case|:
case|case
name|Const
operator|.
name|IFLE
case|:
case|case
name|Const
operator|.
name|IFLT
case|:
case|case
name|Const
operator|.
name|IFNE
case|:
case|case
name|Const
operator|.
name|IFNONNULL
case|:
case|case
name|Const
operator|.
name|IFNULL
case|:
case|case
name|Const
operator|.
name|IF_ACMPEQ
case|:
case|case
name|Const
operator|.
name|IF_ACMPNE
case|:
case|case
name|Const
operator|.
name|IF_ICMPEQ
case|:
case|case
name|Const
operator|.
name|IF_ICMPGE
case|:
case|case
name|Const
operator|.
name|IF_ICMPGT
case|:
case|case
name|Const
operator|.
name|IF_ICMPLE
case|:
case|case
name|Const
operator|.
name|IF_ICMPLT
case|:
case|case
name|Const
operator|.
name|IF_ICMPNE
case|:
case|case
name|Const
operator|.
name|JSR
case|:
name|index
operator|=
name|bytes
operator|.
name|getIndex
argument_list|()
operator|+
name|bytes
operator|.
name|readShort
argument_list|()
operator|-
literal|1
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<A HREF=\"#code"
argument_list|)
operator|.
name|append
argument_list|(
name|method_number
argument_list|)
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|index
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
operator|.
name|append
argument_list|(
name|index
argument_list|)
operator|.
name|append
argument_list|(
literal|"</A>"
argument_list|)
expr_stmt|;
break|break;
comment|/* Same for 32-bit wide jumps              */
case|case
name|Const
operator|.
name|GOTO_W
case|:
case|case
name|Const
operator|.
name|JSR_W
case|:
name|int
name|windex
init|=
name|bytes
operator|.
name|getIndex
argument_list|()
operator|+
name|bytes
operator|.
name|readInt
argument_list|()
operator|-
literal|1
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<A HREF=\"#code"
argument_list|)
operator|.
name|append
argument_list|(
name|method_number
argument_list|)
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|windex
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
operator|.
name|append
argument_list|(
name|windex
argument_list|)
operator|.
name|append
argument_list|(
literal|"</A>"
argument_list|)
expr_stmt|;
break|break;
comment|/* Index byte references local variable (register)              */
case|case
name|Const
operator|.
name|ALOAD
case|:
case|case
name|Const
operator|.
name|ASTORE
case|:
case|case
name|Const
operator|.
name|DLOAD
case|:
case|case
name|Const
operator|.
name|DSTORE
case|:
case|case
name|Const
operator|.
name|FLOAD
case|:
case|case
name|Const
operator|.
name|FSTORE
case|:
case|case
name|Const
operator|.
name|ILOAD
case|:
case|case
name|Const
operator|.
name|ISTORE
case|:
case|case
name|Const
operator|.
name|LLOAD
case|:
case|case
name|Const
operator|.
name|LSTORE
case|:
case|case
name|Const
operator|.
name|RET
case|:
if|if
condition|(
name|wide
condition|)
block|{
name|vindex
operator|=
name|bytes
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|wide
operator|=
literal|false
expr_stmt|;
comment|// Clear flag
block|}
else|else
block|{
name|vindex
operator|=
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"%"
argument_list|)
operator|.
name|append
argument_list|(
name|vindex
argument_list|)
expr_stmt|;
break|break;
comment|/*              * Remember wide byte which is used to form a 16-bit address in the              * following instruction. Relies on that the method is called again with              * the following opcode.              */
case|case
name|Const
operator|.
name|WIDE
case|:
name|wide
operator|=
literal|true
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"(wide)"
argument_list|)
expr_stmt|;
break|break;
comment|/* Array of basic type.              */
case|case
name|Const
operator|.
name|NEWARRAY
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"<FONT COLOR=\"#00FF00\">"
argument_list|)
operator|.
name|append
argument_list|(
name|Const
operator|.
name|getTypeName
argument_list|(
name|bytes
operator|.
name|readByte
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</FONT>"
argument_list|)
expr_stmt|;
break|break;
comment|/* Access object/class fields.              */
case|case
name|Const
operator|.
name|GETFIELD
case|:
case|case
name|Const
operator|.
name|GETSTATIC
case|:
case|case
name|Const
operator|.
name|PUTFIELD
case|:
case|case
name|Const
operator|.
name|PUTSTATIC
case|:
name|index
operator|=
name|bytes
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|ConstantFieldref
name|c1
init|=
operator|(
name|ConstantFieldref
operator|)
name|constant_pool
operator|.
name|getConstant
argument_list|(
name|index
argument_list|,
name|Const
operator|.
name|CONSTANT_Fieldref
argument_list|)
decl_stmt|;
name|class_index
operator|=
name|c1
operator|.
name|getClassIndex
argument_list|()
expr_stmt|;
name|name
operator|=
name|constant_pool
operator|.
name|getConstantString
argument_list|(
name|class_index
argument_list|,
name|Const
operator|.
name|CONSTANT_Class
argument_list|)
expr_stmt|;
name|name
operator|=
name|Utility
operator|.
name|compactClassName
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|index
operator|=
name|c1
operator|.
name|getNameAndTypeIndex
argument_list|()
expr_stmt|;
name|String
name|field_name
init|=
name|constant_pool
operator|.
name|constantToString
argument_list|(
name|index
argument_list|,
name|Const
operator|.
name|CONSTANT_NameAndType
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|class_name
argument_list|)
condition|)
block|{
comment|// Local field
name|buf
operator|.
name|append
argument_list|(
literal|"<A HREF=\""
argument_list|)
operator|.
name|append
argument_list|(
name|class_name
argument_list|)
operator|.
name|append
argument_list|(
literal|"_methods.html#field"
argument_list|)
operator|.
name|append
argument_list|(
name|field_name
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" TARGET=Methods>"
argument_list|)
operator|.
name|append
argument_list|(
name|field_name
argument_list|)
operator|.
name|append
argument_list|(
literal|"</A>\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|constant_html
operator|.
name|referenceConstant
argument_list|(
name|class_index
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|field_name
argument_list|)
expr_stmt|;
block|}
break|break;
comment|/* Operands are references to classes in constant pool              */
case|case
name|Const
operator|.
name|CHECKCAST
case|:
case|case
name|Const
operator|.
name|INSTANCEOF
case|:
case|case
name|Const
operator|.
name|NEW
case|:
name|index
operator|=
name|bytes
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|constant_html
operator|.
name|referenceConstant
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
break|break;
comment|/* Operands are references to methods in constant pool              */
case|case
name|Const
operator|.
name|INVOKESPECIAL
case|:
case|case
name|Const
operator|.
name|INVOKESTATIC
case|:
case|case
name|Const
operator|.
name|INVOKEVIRTUAL
case|:
case|case
name|Const
operator|.
name|INVOKEINTERFACE
case|:
case|case
name|Const
operator|.
name|INVOKEDYNAMIC
case|:
name|int
name|m_index
init|=
name|bytes
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|String
name|str
decl_stmt|;
if|if
condition|(
name|opcode
operator|==
name|Const
operator|.
name|INVOKEINTERFACE
condition|)
block|{
comment|// Special treatment needed
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
expr_stmt|;
comment|// Redundant
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
expr_stmt|;
comment|// Reserved
comment|//                    int nargs = bytes.readUnsignedByte(); // Redundant
comment|//                    int reserved = bytes.readUnsignedByte(); // Reserved
name|ConstantInterfaceMethodref
name|c
init|=
operator|(
name|ConstantInterfaceMethodref
operator|)
name|constant_pool
operator|.
name|getConstant
argument_list|(
name|m_index
argument_list|,
name|Const
operator|.
name|CONSTANT_InterfaceMethodref
argument_list|)
decl_stmt|;
name|class_index
operator|=
name|c
operator|.
name|getClassIndex
argument_list|()
expr_stmt|;
name|index
operator|=
name|c
operator|.
name|getNameAndTypeIndex
argument_list|()
expr_stmt|;
name|name
operator|=
name|Class2HTML
operator|.
name|referenceClass
argument_list|(
name|class_index
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|opcode
operator|==
name|Const
operator|.
name|INVOKEDYNAMIC
condition|)
block|{
comment|// Special treatment needed
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
expr_stmt|;
comment|// Reserved
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
expr_stmt|;
comment|// Reserved
name|ConstantInvokeDynamic
name|c
init|=
operator|(
name|ConstantInvokeDynamic
operator|)
name|constant_pool
operator|.
name|getConstant
argument_list|(
name|m_index
argument_list|,
name|Const
operator|.
name|CONSTANT_InvokeDynamic
argument_list|)
decl_stmt|;
name|index
operator|=
name|c
operator|.
name|getNameAndTypeIndex
argument_list|()
expr_stmt|;
name|name
operator|=
literal|"#"
operator|+
name|c
operator|.
name|getBootstrapMethodAttrIndex
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to
comment|// reference EITHER a Methodref OR an InterfaceMethodref.
comment|// Not sure if that affects this code or not.  (markro)
name|ConstantMethodref
name|c
init|=
operator|(
name|ConstantMethodref
operator|)
name|constant_pool
operator|.
name|getConstant
argument_list|(
name|m_index
argument_list|,
name|Const
operator|.
name|CONSTANT_Methodref
argument_list|)
decl_stmt|;
name|class_index
operator|=
name|c
operator|.
name|getClassIndex
argument_list|()
expr_stmt|;
name|index
operator|=
name|c
operator|.
name|getNameAndTypeIndex
argument_list|()
expr_stmt|;
name|name
operator|=
name|Class2HTML
operator|.
name|referenceClass
argument_list|(
name|class_index
argument_list|)
expr_stmt|;
block|}
name|str
operator|=
name|Class2HTML
operator|.
name|toHTML
argument_list|(
name|constant_pool
operator|.
name|constantToString
argument_list|(
name|constant_pool
operator|.
name|getConstant
argument_list|(
name|index
argument_list|,
name|Const
operator|.
name|CONSTANT_NameAndType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get signature, i.e., types
name|ConstantNameAndType
name|c2
init|=
operator|(
name|ConstantNameAndType
operator|)
name|constant_pool
operator|.
name|getConstant
argument_list|(
name|index
argument_list|,
name|Const
operator|.
name|CONSTANT_NameAndType
argument_list|)
decl_stmt|;
name|signature
operator|=
name|constant_pool
operator|.
name|constantToString
argument_list|(
name|c2
operator|.
name|getSignatureIndex
argument_list|()
argument_list|,
name|Const
operator|.
name|CONSTANT_Utf8
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
name|Utility
operator|.
name|methodSignatureArgumentTypes
argument_list|(
name|signature
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|Utility
operator|.
name|methodSignatureReturnType
argument_list|(
name|signature
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".<A HREF=\""
argument_list|)
operator|.
name|append
argument_list|(
name|class_name
argument_list|)
operator|.
name|append
argument_list|(
literal|"_cp.html#cp"
argument_list|)
operator|.
name|append
argument_list|(
name|m_index
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" TARGET=ConstantPool>"
argument_list|)
operator|.
name|append
argument_list|(
name|str
argument_list|)
operator|.
name|append
argument_list|(
literal|"</A>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
comment|// List arguments
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|Class2HTML
operator|.
name|referenceType
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Attach return type
name|buf
operator|.
name|append
argument_list|(
literal|"):"
argument_list|)
operator|.
name|append
argument_list|(
name|Class2HTML
operator|.
name|referenceType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
break|break;
comment|/* Operands are references to items in constant pool              */
case|case
name|Const
operator|.
name|LDC_W
case|:
case|case
name|Const
operator|.
name|LDC2_W
case|:
name|index
operator|=
name|bytes
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<A HREF=\""
argument_list|)
operator|.
name|append
argument_list|(
name|class_name
argument_list|)
operator|.
name|append
argument_list|(
literal|"_cp.html#cp"
argument_list|)
operator|.
name|append
argument_list|(
name|index
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" TARGET=\"ConstantPool\">"
argument_list|)
operator|.
name|append
argument_list|(
name|Class2HTML
operator|.
name|toHTML
argument_list|(
name|constant_pool
operator|.
name|constantToString
argument_list|(
name|index
argument_list|,
name|constant_pool
operator|.
name|getConstant
argument_list|(
name|index
argument_list|)
operator|.
name|getTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Const
operator|.
name|LDC
case|:
name|index
operator|=
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<A HREF=\""
argument_list|)
operator|.
name|append
argument_list|(
name|class_name
argument_list|)
operator|.
name|append
argument_list|(
literal|"_cp.html#cp"
argument_list|)
operator|.
name|append
argument_list|(
name|index
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" TARGET=\"ConstantPool\">"
argument_list|)
operator|.
name|append
argument_list|(
name|Class2HTML
operator|.
name|toHTML
argument_list|(
name|constant_pool
operator|.
name|constantToString
argument_list|(
name|index
argument_list|,
name|constant_pool
operator|.
name|getConstant
argument_list|(
name|index
argument_list|)
operator|.
name|getTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>"
argument_list|)
expr_stmt|;
break|break;
comment|/* Array of references.              */
case|case
name|Const
operator|.
name|ANEWARRAY
case|:
name|index
operator|=
name|bytes
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|constant_html
operator|.
name|referenceConstant
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
break|break;
comment|/* Multidimensional array of references.              */
case|case
name|Const
operator|.
name|MULTIANEWARRAY
case|:
name|index
operator|=
name|bytes
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|int
name|dimensions
init|=
name|bytes
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|constant_html
operator|.
name|referenceConstant
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|dimensions
argument_list|)
operator|.
name|append
argument_list|(
literal|"-dimensional"
argument_list|)
expr_stmt|;
break|break;
comment|/* Increment local variable.              */
case|case
name|Const
operator|.
name|IINC
case|:
if|if
condition|(
name|wide
condition|)
block|{
name|vindex
operator|=
name|bytes
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|constant
operator|=
name|bytes
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|wide
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|vindex
operator|=
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
expr_stmt|;
name|constant
operator|=
name|bytes
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"%"
argument_list|)
operator|.
name|append
argument_list|(
name|vindex
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|constant
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|Const
operator|.
name|getNoOfOperands
argument_list|(
name|opcode
argument_list|)
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Const
operator|.
name|getOperandTypeCount
argument_list|(
name|opcode
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|Const
operator|.
name|getOperandType
argument_list|(
name|opcode
argument_list|,
name|i
argument_list|)
condition|)
block|{
case|case
name|Const
operator|.
name|T_BYTE
case|:
name|buf
operator|.
name|append
argument_list|(
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Const
operator|.
name|T_SHORT
case|:
comment|// Either branch or index
name|buf
operator|.
name|append
argument_list|(
name|bytes
operator|.
name|readShort
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Const
operator|.
name|T_INT
case|:
name|buf
operator|.
name|append
argument_list|(
name|bytes
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// Never reached
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unreachable default case reached! "
operator|+
name|Const
operator|.
name|getOperandType
argument_list|(
name|opcode
argument_list|,
name|i
argument_list|)
argument_list|)
throw|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</TD>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Find all target addresses in code, so that they can be marked      * with&lt;A NAME = ...&gt;. Target addresses are kept in an BitSet object.      */
specifier|private
name|void
name|findGotos
parameter_list|(
specifier|final
name|ByteSequence
name|bytes
parameter_list|,
specifier|final
name|Code
name|code
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|index
decl_stmt|;
name|goto_set
operator|=
operator|new
name|BitSet
argument_list|(
name|bytes
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|opcode
decl_stmt|;
comment|/* First get Code attribute from method and the exceptions handled          * (try .. catch) in this method. We only need the line number here.          */
if|if
condition|(
name|code
operator|!=
literal|null
condition|)
block|{
name|CodeException
index|[]
name|ce
init|=
name|code
operator|.
name|getExceptionTable
argument_list|()
decl_stmt|;
for|for
control|(
name|CodeException
name|cex
range|:
name|ce
control|)
block|{
name|goto_set
operator|.
name|set
argument_list|(
name|cex
operator|.
name|getStartPC
argument_list|()
argument_list|)
expr_stmt|;
name|goto_set
operator|.
name|set
argument_list|(
name|cex
operator|.
name|getEndPC
argument_list|()
argument_list|)
expr_stmt|;
name|goto_set
operator|.
name|set
argument_list|(
name|cex
operator|.
name|getHandlerPC
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Look for local variables and their range
name|Attribute
index|[]
name|attributes
init|=
name|code
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|getTag
argument_list|()
operator|==
name|Const
operator|.
name|ATTR_LOCAL_VARIABLE_TABLE
condition|)
block|{
name|LocalVariable
index|[]
name|vars
init|=
operator|(
operator|(
name|LocalVariableTable
operator|)
name|attribute
operator|)
operator|.
name|getLocalVariableTable
argument_list|()
decl_stmt|;
for|for
control|(
name|LocalVariable
name|var
range|:
name|vars
control|)
block|{
name|int
name|start
init|=
name|var
operator|.
name|getStartPC
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|start
operator|+
name|var
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|goto_set
operator|.
name|set
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|goto_set
operator|.
name|set
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
comment|// Get target addresses from GOTO, JSR, TABLESWITCH, etc.
for|for
control|(
init|;
name|bytes
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|;
control|)
block|{
name|opcode
operator|=
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
expr_stmt|;
comment|//System.out.println(getOpcodeName(opcode));
switch|switch
condition|(
name|opcode
condition|)
block|{
case|case
name|Const
operator|.
name|TABLESWITCH
case|:
case|case
name|Const
operator|.
name|LOOKUPSWITCH
case|:
comment|//bytes.readByte(); // Skip already read byte
name|int
name|remainder
init|=
name|bytes
operator|.
name|getIndex
argument_list|()
operator|%
literal|4
decl_stmt|;
name|int
name|no_pad_bytes
init|=
operator|(
name|remainder
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
literal|4
operator|-
name|remainder
decl_stmt|;
name|int
name|default_offset
decl_stmt|;
name|int
name|offset
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|no_pad_bytes
condition|;
name|j
operator|++
control|)
block|{
name|bytes
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
comment|// Both cases have a field default_offset in common
name|default_offset
operator|=
name|bytes
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|opcode
operator|==
name|Const
operator|.
name|TABLESWITCH
condition|)
block|{
name|int
name|low
init|=
name|bytes
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|high
init|=
name|bytes
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|offset
operator|=
name|bytes
operator|.
name|getIndex
argument_list|()
operator|-
literal|12
operator|-
name|no_pad_bytes
operator|-
literal|1
expr_stmt|;
name|default_offset
operator|+=
name|offset
expr_stmt|;
name|goto_set
operator|.
name|set
argument_list|(
name|default_offset
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
operator|(
name|high
operator|-
name|low
operator|+
literal|1
operator|)
condition|;
name|j
operator|++
control|)
block|{
name|index
operator|=
name|offset
operator|+
name|bytes
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|goto_set
operator|.
name|set
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// LOOKUPSWITCH
name|int
name|npairs
init|=
name|bytes
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|offset
operator|=
name|bytes
operator|.
name|getIndex
argument_list|()
operator|-
literal|8
operator|-
name|no_pad_bytes
operator|-
literal|1
expr_stmt|;
name|default_offset
operator|+=
name|offset
expr_stmt|;
name|goto_set
operator|.
name|set
argument_list|(
name|default_offset
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|npairs
condition|;
name|j
operator|++
control|)
block|{
comment|//                            int match = bytes.readInt();
name|bytes
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|index
operator|=
name|offset
operator|+
name|bytes
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|goto_set
operator|.
name|set
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Const
operator|.
name|GOTO
case|:
case|case
name|Const
operator|.
name|IFEQ
case|:
case|case
name|Const
operator|.
name|IFGE
case|:
case|case
name|Const
operator|.
name|IFGT
case|:
case|case
name|Const
operator|.
name|IFLE
case|:
case|case
name|Const
operator|.
name|IFLT
case|:
case|case
name|Const
operator|.
name|IFNE
case|:
case|case
name|Const
operator|.
name|IFNONNULL
case|:
case|case
name|Const
operator|.
name|IFNULL
case|:
case|case
name|Const
operator|.
name|IF_ACMPEQ
case|:
case|case
name|Const
operator|.
name|IF_ACMPNE
case|:
case|case
name|Const
operator|.
name|IF_ICMPEQ
case|:
case|case
name|Const
operator|.
name|IF_ICMPGE
case|:
case|case
name|Const
operator|.
name|IF_ICMPGT
case|:
case|case
name|Const
operator|.
name|IF_ICMPLE
case|:
case|case
name|Const
operator|.
name|IF_ICMPLT
case|:
case|case
name|Const
operator|.
name|IF_ICMPNE
case|:
case|case
name|Const
operator|.
name|JSR
case|:
comment|//bytes.readByte(); // Skip already read byte
name|index
operator|=
name|bytes
operator|.
name|getIndex
argument_list|()
operator|+
name|bytes
operator|.
name|readShort
argument_list|()
operator|-
literal|1
expr_stmt|;
name|goto_set
operator|.
name|set
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
case|case
name|Const
operator|.
name|GOTO_W
case|:
case|case
name|Const
operator|.
name|JSR_W
case|:
comment|//bytes.readByte(); // Skip already read byte
name|index
operator|=
name|bytes
operator|.
name|getIndex
argument_list|()
operator|+
name|bytes
operator|.
name|readInt
argument_list|()
operator|-
literal|1
expr_stmt|;
name|goto_set
operator|.
name|set
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
default|default:
name|bytes
operator|.
name|unreadByte
argument_list|()
expr_stmt|;
name|codeToHTML
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Ignore output
block|}
block|}
block|}
comment|/**      * Write a single method with the byte code associated with it.      */
specifier|private
name|void
name|writeMethod
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|int
name|method_number
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get raw signature
name|String
name|signature
init|=
name|method
operator|.
name|getSignature
argument_list|()
decl_stmt|;
comment|// Get array of strings containing the argument types
name|String
index|[]
name|args
init|=
name|Utility
operator|.
name|methodSignatureArgumentTypes
argument_list|(
name|signature
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Get return type string
name|String
name|type
init|=
name|Utility
operator|.
name|methodSignatureReturnType
argument_list|(
name|signature
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Get method name
name|String
name|name
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|html_name
init|=
name|Class2HTML
operator|.
name|toHTML
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// Get method's access flags
name|String
name|access
init|=
name|Utility
operator|.
name|accessToString
argument_list|(
name|method
operator|.
name|getAccessFlags
argument_list|()
argument_list|)
decl_stmt|;
name|access
operator|=
name|Utility
operator|.
name|replace
argument_list|(
name|access
argument_list|,
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
comment|// Get the method's attributes, the Code Attribute in particular
name|Attribute
index|[]
name|attributes
init|=
name|method
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|file
operator|.
name|print
argument_list|(
literal|"<P><B><FONT COLOR=\"#FF0000\">"
operator|+
name|access
operator|+
literal|"</FONT>&nbsp;"
operator|+
literal|"<A NAME=method"
operator|+
name|method_number
operator|+
literal|">"
operator|+
name|Class2HTML
operator|.
name|referenceType
argument_list|(
name|type
argument_list|)
operator|+
literal|"</A>&nbsp<A HREF=\""
operator|+
name|class_name
operator|+
literal|"_methods.html#method"
operator|+
name|method_number
operator|+
literal|"\" TARGET=Methods>"
operator|+
name|html_name
operator|+
literal|"</A>("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|file
operator|.
name|print
argument_list|(
name|Class2HTML
operator|.
name|referenceType
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|file
operator|.
name|print
argument_list|(
literal|",&nbsp;"
argument_list|)
expr_stmt|;
block|}
block|}
name|file
operator|.
name|println
argument_list|(
literal|")</B></P>"
argument_list|)
expr_stmt|;
name|Code
name|c
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|code
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|file
operator|.
name|print
argument_list|(
literal|"<H4>Attributes</H4><UL>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|tag
init|=
name|attributes
index|[
name|i
index|]
operator|.
name|getTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
name|Const
operator|.
name|ATTR_UNKNOWN
condition|)
block|{
name|file
operator|.
name|print
argument_list|(
literal|"<LI><A HREF=\""
operator|+
name|class_name
operator|+
literal|"_attributes.html#method"
operator|+
name|method_number
operator|+
literal|"@"
operator|+
name|i
operator|+
literal|"\" TARGET=Attributes>"
operator|+
name|Const
operator|.
name|getAttributeName
argument_list|(
name|tag
argument_list|)
operator|+
literal|"</A></LI>\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|print
argument_list|(
literal|"<LI>"
operator|+
name|attributes
index|[
name|i
index|]
operator|+
literal|"</LI>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tag
operator|==
name|Const
operator|.
name|ATTR_CODE
condition|)
block|{
name|c
operator|=
operator|(
name|Code
operator|)
name|attributes
index|[
name|i
index|]
expr_stmt|;
name|Attribute
index|[]
name|attributes2
init|=
name|c
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|code
operator|=
name|c
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|file
operator|.
name|print
argument_list|(
literal|"<UL>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|attributes2
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|tag
operator|=
name|attributes2
index|[
name|j
index|]
operator|.
name|getTag
argument_list|()
expr_stmt|;
name|file
operator|.
name|print
argument_list|(
literal|"<LI><A HREF=\""
operator|+
name|class_name
operator|+
literal|"_attributes.html#"
operator|+
literal|"method"
operator|+
name|method_number
operator|+
literal|"@"
operator|+
name|i
operator|+
literal|"@"
operator|+
name|j
operator|+
literal|"\" TARGET=Attributes>"
operator|+
name|Const
operator|.
name|getAttributeName
argument_list|(
name|tag
argument_list|)
operator|+
literal|"</A></LI>\n"
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|print
argument_list|(
literal|"</UL>"
argument_list|)
expr_stmt|;
block|}
block|}
name|file
operator|.
name|println
argument_list|(
literal|"</UL>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|code
operator|!=
literal|null
condition|)
block|{
comment|// No code, an abstract method, e.g.
comment|//System.out.println(name + "\n" + Utility.codeToString(code, constant_pool, 0, -1));
comment|// Print the byte code
name|ByteSequence
name|stream
init|=
operator|new
name|ByteSequence
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|stream
operator|.
name|mark
argument_list|(
name|stream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|findGotos
argument_list|(
name|stream
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|file
operator|.
name|println
argument_list|(
literal|"<TABLE BORDER=0><TR><TH ALIGN=LEFT>Byte<BR>offset</TH>"
operator|+
literal|"<TH ALIGN=LEFT>Instruction</TH><TH ALIGN=LEFT>Argument</TH>"
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|stream
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|;
control|)
block|{
name|int
name|offset
init|=
name|stream
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|String
name|str
init|=
name|codeToHTML
argument_list|(
name|stream
argument_list|,
name|method_number
argument_list|)
decl_stmt|;
name|String
name|anchor
init|=
literal|""
decl_stmt|;
comment|/* Set an anchor mark if this line is targetted by a goto, jsr, etc.                  * Defining an anchor for every line is very inefficient!                  */
if|if
condition|(
name|goto_set
operator|.
name|get
argument_list|(
name|offset
argument_list|)
condition|)
block|{
name|anchor
operator|=
literal|"<A NAME=code"
operator|+
name|method_number
operator|+
literal|"@"
operator|+
name|offset
operator|+
literal|"></A>"
expr_stmt|;
block|}
name|String
name|anchor2
decl_stmt|;
if|if
condition|(
name|stream
operator|.
name|getIndex
argument_list|()
operator|==
name|code
operator|.
name|length
condition|)
block|{
name|anchor2
operator|=
literal|"<A NAME=code"
operator|+
name|method_number
operator|+
literal|"@"
operator|+
name|code
operator|.
name|length
operator|+
literal|">"
operator|+
name|offset
operator|+
literal|"</A>"
expr_stmt|;
block|}
else|else
block|{
name|anchor2
operator|=
literal|""
operator|+
name|offset
expr_stmt|;
block|}
name|file
operator|.
name|println
argument_list|(
literal|"<TR VALIGN=TOP><TD>"
operator|+
name|anchor2
operator|+
literal|"</TD><TD>"
operator|+
name|anchor
operator|+
name|str
operator|+
literal|"</TR>"
argument_list|)
expr_stmt|;
block|}
comment|// Mark last line, may be targetted from Attributes window
name|file
operator|.
name|println
argument_list|(
literal|"<TR><TD></A></TD></TR>"
argument_list|)
expr_stmt|;
name|file
operator|.
name|println
argument_list|(
literal|"</TABLE>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

