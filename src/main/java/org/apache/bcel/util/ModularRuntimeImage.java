begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Wraps a Java 9 JEP 220 modular runtime image. Requires the JRT NIO file system.  *  * @since 6.3  */
end_comment

begin_class
specifier|public
class|class
name|ModularRuntimeImage
implements|implements
name|Closeable
block|{
specifier|static
specifier|final
name|String
name|MODULES_PATH
init|=
name|File
operator|.
name|separator
operator|+
literal|"modules"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PACKAGES_PATH
init|=
name|File
operator|.
name|separator
operator|+
literal|"packages"
decl_stmt|;
specifier|private
specifier|final
name|URLClassLoader
name|classLoader
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
comment|/**      * Constructs a default instance.      *      * @throws IOException      *             an I/O error occurs accessing the file system      */
specifier|public
name|ModularRuntimeImage
parameter_list|()
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|FileSystems
operator|.
name|getFileSystem
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"jrt:/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs an instance using the JRT file system implementation from a specific Java Home.      *      * @param javaHome      *            Path to a Java 9 or greater home.      *      * @throws IOException      *             an I/O error occurs accessing the file system      */
specifier|public
name|ModularRuntimeImage
parameter_list|(
specifier|final
name|String
name|javaHome
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|emptyMap
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|jrePath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|javaHome
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|jrtFsPath
init|=
name|jrePath
operator|.
name|resolve
argument_list|(
literal|"lib"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"jrt-fs.jar"
argument_list|)
decl_stmt|;
name|this
operator|.
name|classLoader
operator|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|jrtFsPath
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystem
operator|=
name|FileSystems
operator|.
name|newFileSystem
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"jrt:/"
argument_list|)
argument_list|,
name|emptyMap
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ModularRuntimeImage
parameter_list|(
specifier|final
name|URLClassLoader
name|cl
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|classLoader
operator|=
name|cl
expr_stmt|;
name|this
operator|.
name|fileSystem
operator|=
name|fs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|classLoader
operator|!=
literal|null
condition|)
block|{
name|classLoader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fileSystem
operator|!=
literal|null
condition|)
block|{
name|fileSystem
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|fileSystem
return|;
block|}
comment|/**      * Lists all entries in the given directory.      *      * @param dirPath      *            directory path.      * @return a list of dir entries if an I/O error occurs      * @throws IOException      *             an I/O error occurs accessing the file system      */
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|list
parameter_list|(
specifier|final
name|Path
name|dirPath
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|ds
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|dirPath
argument_list|)
init|)
block|{
specifier|final
name|Iterator
argument_list|<
name|Path
argument_list|>
name|iterator
init|=
name|ds
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**      * Lists all entries in the given directory.      *      * @param dirName      *            directory path.      * @return a list of dir entries if an I/O error occurs      * @throws IOException      *             an I/O error occurs accessing the file system      */
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|list
parameter_list|(
specifier|final
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|list
argument_list|(
name|fileSystem
operator|.
name|getPath
argument_list|(
name|dirName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Lists all modules.      *      * @return a list of modules      * @throws IOException      *             an I/O error occurs accessing the file system      */
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|modules
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|list
argument_list|(
name|MODULES_PATH
argument_list|)
return|;
block|}
comment|/**      * Lists all packages.      *      * @return a list of modules      * @throws IOException      *             an I/O error occurs accessing the file system      */
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|packages
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|list
argument_list|(
name|PACKAGES_PATH
argument_list|)
return|;
block|}
block|}
end_class

end_unit

