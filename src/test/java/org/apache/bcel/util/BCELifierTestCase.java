begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|BCELifierTestCase
block|{
comment|// Canonicalise the javap output so it compares better
specifier|private
name|String
name|canonHashRef
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|input
operator|=
name|input
operator|.
name|replaceAll
argument_list|(
literal|"#\\d+"
argument_list|,
literal|"#n"
argument_list|)
expr_stmt|;
comment|// numbers may vary in length
name|input
operator|=
name|input
operator|.
name|replaceAll
argument_list|(
literal|" +"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// collapse spaces
name|input
operator|=
name|input
operator|.
name|replaceAll
argument_list|(
literal|"//.+"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// comments may vary
return|return
name|input
return|;
block|}
specifier|private
name|String
name|exec
parameter_list|(
specifier|final
name|File
name|workDir
parameter_list|,
specifier|final
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
comment|// System.err.println(java.util.Arrays.toString(args));
specifier|final
name|ProcessBuilder
name|pb
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|pb
operator|.
name|directory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
specifier|final
name|Process
name|proc
init|=
name|pb
operator|.
name|start
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedInputStream
name|is
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|proc
operator|.
name|getInputStream
argument_list|()
argument_list|)
init|;
name|InputStream
name|es
init|=
name|proc
operator|.
name|getErrorStream
argument_list|()
init|)
block|{
name|proc
operator|.
name|waitFor
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|buff
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|es
operator|.
name|read
argument_list|(
name|buff
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
operator|new
name|String
argument_list|(
name|buff
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|is
operator|.
name|read
argument_list|(
name|buff
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|buff
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|testClassOnPath
parameter_list|(
specifier|final
name|String
name|javaClass
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Get javap of the input class
specifier|final
name|String
name|initial
init|=
name|exec
argument_list|(
literal|null
argument_list|,
literal|"javap"
argument_list|,
literal|"-p"
argument_list|,
literal|"-c"
argument_list|,
name|javaClass
argument_list|)
decl_stmt|;
specifier|final
name|File
name|workDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|infile
init|=
operator|new
name|File
argument_list|(
name|javaClass
argument_list|)
decl_stmt|;
specifier|final
name|JavaClass
name|java_class
init|=
name|BCELifier
operator|.
name|getJavaClass
argument_list|(
name|infile
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|".class"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|java_class
argument_list|)
expr_stmt|;
specifier|final
name|File
name|outfile
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
name|infile
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|".class"
argument_list|,
literal|"Creator.java"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outfile
argument_list|)
init|)
block|{
specifier|final
name|BCELifier
name|bcelifier
init|=
operator|new
name|BCELifier
argument_list|(
name|java_class
argument_list|,
name|fos
argument_list|)
decl_stmt|;
name|bcelifier
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|exec
argument_list|(
name|workDir
argument_list|,
literal|"javac"
argument_list|,
literal|"-cp"
argument_list|,
literal|"classes"
argument_list|,
name|outfile
operator|.
name|getName
argument_list|()
argument_list|,
literal|"-source"
argument_list|,
literal|"1.8"
argument_list|,
literal|"-target"
argument_list|,
literal|"1.8"
argument_list|)
expr_stmt|;
name|exec
argument_list|(
name|workDir
argument_list|,
literal|"java"
argument_list|,
literal|"-cp"
argument_list|,
literal|"."
operator|+
name|File
operator|.
name|pathSeparator
operator|+
literal|"classes"
argument_list|,
name|outfile
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|".java"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|output
init|=
name|exec
argument_list|(
name|workDir
argument_list|,
literal|"javap"
argument_list|,
literal|"-p"
argument_list|,
literal|"-c"
argument_list|,
name|infile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|canonHashRef
argument_list|(
name|initial
argument_list|)
argument_list|,
name|canonHashRef
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Dump a class using "javap" and compare with the same class recreated      * using BCELifier, "javac", "java" and dumped with "javap"      * TODO: detect if JDK present and skip test if not      */
annotation|@
name|Test
specifier|public
name|void
name|testJavapCompare
parameter_list|()
throws|throws
name|Exception
block|{
name|testClassOnPath
argument_list|(
literal|"target/test-classes/Java8Example.class"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|OutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|JavaClass
name|java_class
init|=
name|BCELifier
operator|.
name|getJavaClass
argument_list|(
literal|"Java8Example"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|java_class
argument_list|)
expr_stmt|;
specifier|final
name|BCELifier
name|bcelifier
init|=
operator|new
name|BCELifier
argument_list|(
name|java_class
argument_list|,
name|os
argument_list|)
decl_stmt|;
name|bcelifier
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

