begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests {@link LruCacheClassPathRepository}.  */
end_comment

begin_class
specifier|public
class|class
name|LruCacheClassPathRepositoryTestCase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCacheEviction
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
try|try
init|(
specifier|final
name|ClassPath
name|classPath
init|=
operator|new
name|ClassPath
argument_list|(
literal|""
argument_list|)
init|)
block|{
specifier|final
name|LruCacheClassPathRepository
name|repository
init|=
operator|new
name|LruCacheClassPathRepository
argument_list|(
name|classPath
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|JavaClass
name|class1
init|=
name|repository
operator|.
name|loadClass
argument_list|(
literal|"java.lang.String"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|class1
argument_list|)
expr_stmt|;
specifier|final
name|JavaClass
name|class2
init|=
name|repository
operator|.
name|loadClass
argument_list|(
literal|"java.lang.Long"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|class2
argument_list|)
expr_stmt|;
specifier|final
name|JavaClass
name|class3
init|=
name|repository
operator|.
name|loadClass
argument_list|(
literal|"java.lang.Integer"
argument_list|)
decl_stmt|;
comment|// Evicts class1
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|class3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|repository
operator|.
name|findClass
argument_list|(
literal|"java.lang.String"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|JavaClass
name|cachedClass2
init|=
name|repository
operator|.
name|findClass
argument_list|(
literal|"java.lang.Long"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|class2
argument_list|,
name|cachedClass2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLeastRecentlyUsedEviction
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
try|try
init|(
specifier|final
name|ClassPath
name|classPath
init|=
operator|new
name|ClassPath
argument_list|(
literal|""
argument_list|)
init|)
block|{
specifier|final
name|LruCacheClassPathRepository
name|repository
init|=
operator|new
name|LruCacheClassPathRepository
argument_list|(
name|classPath
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|JavaClass
name|class1
init|=
name|repository
operator|.
name|loadClass
argument_list|(
literal|"java.lang.String"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|class1
argument_list|)
expr_stmt|;
specifier|final
name|JavaClass
name|class2
init|=
name|repository
operator|.
name|loadClass
argument_list|(
literal|"java.lang.Long"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|class2
argument_list|)
expr_stmt|;
name|repository
operator|.
name|findClass
argument_list|(
literal|"java.lang.String"
argument_list|)
expr_stmt|;
comment|// Uses class1
specifier|final
name|JavaClass
name|class3
init|=
name|repository
operator|.
name|loadClass
argument_list|(
literal|"java.lang.Integer"
argument_list|)
decl_stmt|;
comment|// Evicts class2
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|class3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|repository
operator|.
name|findClass
argument_list|(
literal|"java.lang.Long"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|JavaClass
name|cachedClass1
init|=
name|repository
operator|.
name|findClass
argument_list|(
literal|"java.lang.String"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|class1
argument_list|,
name|cachedClass1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testZeroCacheSize
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|ClassPath
name|classPath
init|=
operator|new
name|ClassPath
argument_list|(
literal|""
argument_list|)
init|)
block|{
operator|new
name|LruCacheClassPathRepository
argument_list|(
name|classPath
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

