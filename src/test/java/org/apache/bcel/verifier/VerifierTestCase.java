begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|NestHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|exc
operator|.
name|AssertionViolatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|statics
operator|.
name|StringRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|VerifierTestCase
block|{
specifier|private
specifier|static
name|File
name|getJarFile
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|File
argument_list|(
name|clazz
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|testDefaultMethodValidation
parameter_list|(
specifier|final
name|String
name|className
parameter_list|,
specifier|final
name|String
modifier|...
name|excludes
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|endsWithAny
argument_list|(
name|className
argument_list|,
name|excludes
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Verifier
name|verifier
init|=
name|VerifierFactory
operator|.
name|getVerifier
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|VerificationResult
name|result
init|=
name|verifier
operator|.
name|doPass1
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|VerificationResult
operator|.
name|VERIFIED_OK
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|"Pass 1 verification of "
operator|+
name|className
operator|+
literal|" failed: "
operator|+
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|verifier
operator|.
name|doPass2
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|VerificationResult
operator|.
name|VERIFIED_OK
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|"Pass 2 verification of "
operator|+
name|className
operator|+
literal|" failed: "
operator|+
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|VerificationResult
operator|.
name|VR_OK
condition|)
block|{
specifier|final
name|JavaClass
name|jc
init|=
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Repository
operator|.
name|lookupClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jc
operator|.
name|getMethods
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|verifier
operator|.
name|doPass3a
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|VerificationResult
operator|.
name|VR_OK
argument_list|,
name|result
argument_list|,
literal|"Pass 3a, method number "
operator|+
name|i
operator|+
literal|" ['"
operator|+
name|jc
operator|.
name|getMethods
argument_list|()
index|[
name|i
index|]
operator|+
literal|"']:\n"
operator|+
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|verifier
operator|.
name|doPass3b
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|VerificationResult
operator|.
name|VR_OK
argument_list|,
name|result
argument_list|,
literal|"Pass 3b, method number "
operator|+
name|i
operator|+
literal|" ['"
operator|+
name|jc
operator|.
name|getMethods
argument_list|()
index|[
name|i
index|]
operator|+
literal|"']:\n"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|testJarFile
parameter_list|(
specifier|final
name|File
name|file
parameter_list|,
specifier|final
name|String
modifier|...
name|excludes
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
init|(
name|JarFile
name|jarFile
init|=
operator|new
name|JarFile
argument_list|(
name|file
argument_list|)
init|)
block|{
specifier|final
name|Enumeration
argument_list|<
name|JarEntry
argument_list|>
name|entries
init|=
name|jarFile
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|JarEntry
name|jarEntry
init|=
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|entryName
init|=
name|jarEntry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|entryName
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|entryName
operator|=
name|entryName
operator|.
name|replaceFirst
argument_list|(
literal|"\\.class$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|entryName
operator|=
name|Utility
operator|.
name|compactClassName
argument_list|(
name|entryName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testDefaultMethodValidation
argument_list|(
name|entryName
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|testNestHostWithJavaVersion
parameter_list|(
specifier|final
name|String
name|className
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
specifier|final
name|String
name|version
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|version
argument_list|)
expr_stmt|;
try|try
block|{
name|testDefaultMethodValidation
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|version
operator|.
name|startsWith
argument_list|(
literal|"1."
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|AssertionViolatedException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|version
operator|.
name|startsWith
argument_list|(
literal|"1."
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|expectedMessage
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|expectedMessage
operator|.
name|append
argument_list|(
literal|"INTERNAL ERROR: Please adapt '"
argument_list|)
expr_stmt|;
name|expectedMessage
operator|.
name|append
argument_list|(
name|StringRepresentation
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedMessage
operator|.
name|append
argument_list|(
literal|"' to deal with objects of class '"
argument_list|)
expr_stmt|;
name|expectedMessage
operator|.
name|append
argument_list|(
name|NestHost
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedMessage
operator|.
name|append
argument_list|(
literal|"'."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMessage
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterEach
specifier|public
name|void
name|afterEach
parameter_list|()
block|{
name|VerifierFactory
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayUtils
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|testNestHostWithJavaVersion
argument_list|(
literal|"org.apache.commons.lang.ArrayUtils"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCollection
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|testDefaultMethodValidation
argument_list|(
literal|"java.util.Collection"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommonsLang1
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|ClassNotFoundException
block|{
name|testJarFile
argument_list|(
name|getJarFile
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|class
argument_list|)
argument_list|,
literal|"ArrayUtils"
argument_list|,
literal|"SerializationUtils"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefinitionImpl
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|testNestHostWithJavaVersion
argument_list|(
literal|"com.ibm.wsdl.DefinitionImpl"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWSDL
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|ClassNotFoundException
block|{
name|testJarFile
argument_list|(
name|getJarFile
argument_list|(
name|javax
operator|.
name|wsdl
operator|.
name|Port
operator|.
name|class
argument_list|)
argument_list|,
literal|"WSDLReaderImpl"
argument_list|,
literal|"DefinitionImpl"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

