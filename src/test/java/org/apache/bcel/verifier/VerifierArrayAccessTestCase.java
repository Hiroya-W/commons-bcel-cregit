begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|tests
operator|.
name|TestArrayAccess02Creator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|tests
operator|.
name|TestArrayAccess03Creator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|tests
operator|.
name|TestArrayAccess04DoubleCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|tests
operator|.
name|TestArrayAccess04FloatCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|tests
operator|.
name|TestArrayAccess04IntCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|tests
operator|.
name|TestArrayAccess04LongCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|tests
operator|.
name|TestArrayAccess04UnknownCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|tests
operator|.
name|TestArrayAccess04ShortCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_class
class|class
name|VerifierArrayAccessTestCase
extends|extends
name|AbstractVerifierTestCase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testInvalidArrayAccess
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
operator|new
name|TestArrayAccess03Creator
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertVerifyRejected
argument_list|(
literal|"TestArrayAccess03"
argument_list|,
literal|"Verification of an arraystore instruction on an object must fail."
argument_list|)
expr_stmt|;
operator|new
name|TestArrayAccess04IntCreator
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertVerifyRejected
argument_list|(
literal|"TestArrayAccess04Int"
argument_list|,
literal|"Verification of an arraystore instruction of an int on an array of references must fail."
argument_list|)
expr_stmt|;
operator|new
name|TestArrayAccess04FloatCreator
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertVerifyRejected
argument_list|(
literal|"TestArrayAccess04Float"
argument_list|,
literal|"Verification of an arraystore instruction of a float on an array of references must fail."
argument_list|)
expr_stmt|;
operator|new
name|TestArrayAccess04DoubleCreator
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertVerifyRejected
argument_list|(
literal|"TestArrayAccess04Double"
argument_list|,
literal|"Verification of an arraystore instruction of a double on an array of references must fail."
argument_list|)
expr_stmt|;
operator|new
name|TestArrayAccess04LongCreator
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertVerifyRejected
argument_list|(
literal|"TestArrayAccess04Long"
argument_list|,
literal|"Verification of an arraystore instruction of a long on an array of references must fail."
argument_list|)
expr_stmt|;
operator|new
name|TestArrayAccess04ShortCreator
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertVerifyRejected
argument_list|(
literal|"TestArrayAccess04Short"
argument_list|,
literal|"Verification of an arraystore instruction of a short on an array of references must fail."
argument_list|)
expr_stmt|;
specifier|final
name|TestArrayAccess04UnknownCreator
name|testArrayAccess04UnknownCreator
init|=
operator|new
name|TestArrayAccess04UnknownCreator
argument_list|()
decl_stmt|;
name|Assertions
operator|.
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|testArrayAccess04UnknownCreator
operator|::
name|create
argument_list|,
literal|"Invalid type<unknown object>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidArrayAccess
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|assertVerifyOK
argument_list|(
literal|"TestArrayAccess01"
argument_list|,
literal|"Verification of an arraystore instruction on an array that is not compatible with the stored element must pass."
argument_list|)
expr_stmt|;
operator|new
name|TestArrayAccess02Creator
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertVerifyOK
argument_list|(
literal|"TestArrayAccess02"
argument_list|,
literal|"Verification of an arraystore instruction on an array that is not compatible with the stored element must pass."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

