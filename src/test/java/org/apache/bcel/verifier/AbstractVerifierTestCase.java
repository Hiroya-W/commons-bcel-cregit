begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|AbstractTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|AfterEach
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractVerifierTestCase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TEST_PACKAGE
init|=
name|AbstractVerifierTestCase
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".tests."
decl_stmt|;
annotation|@
name|AfterEach
specifier|public
name|void
name|afterEach
parameter_list|()
block|{
name|AbstractTestCase
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Asserts that the verification of the given class is OK. If it isn't it throws an AssertionFailedError with the given      * message.      *      * @param className simple class name of the class to verify      * @param message message displayed if assertion fails      */
specifier|public
name|void
name|assertVerifyOK
parameter_list|(
specifier|final
name|String
name|className
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
specifier|final
name|String
name|testClassName
init|=
name|TEST_PACKAGE
operator|+
name|className
decl_stmt|;
name|assertTrue
argument_list|(
name|doAllPasses
argument_list|(
name|testClassName
argument_list|)
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that the verification of the given class is rejected. If it isn't it throws an AssertionFailedError with the      * given message.      *      * @param className simple class name of the class to verify      * @param message message displayed if assertion fails      */
specifier|public
name|void
name|assertVerifyRejected
parameter_list|(
specifier|final
name|String
name|className
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
specifier|final
name|String
name|testClassname
init|=
name|TEST_PACKAGE
operator|+
name|className
decl_stmt|;
name|assertFalse
argument_list|(
name|doAllPasses
argument_list|(
name|testClassname
argument_list|)
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes all the verification on the given class.      *      * @param className name of the class to verify      * @return false if the verification fails, true otherwise      */
specifier|public
name|boolean
name|doAllPasses
parameter_list|(
specifier|final
name|String
name|className
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
specifier|final
name|JavaClass
name|jc
init|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nbMethods
init|=
name|jc
operator|.
name|getMethods
argument_list|()
operator|.
name|length
decl_stmt|;
specifier|final
name|Verifier
name|verifier
init|=
name|VerifierFactory
operator|.
name|getVerifier
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|VerificationResult
name|result
init|=
name|verifier
operator|.
name|doPass1
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getStatus
argument_list|()
operator|!=
name|VerificationResult
operator|.
name|VERIFIED_OK
condition|)
block|{
return|return
literal|false
return|;
block|}
name|result
operator|=
name|verifier
operator|.
name|doPass2
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|getStatus
argument_list|()
operator|!=
name|VerificationResult
operator|.
name|VERIFIED_OK
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|nbMethods
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
block|{
name|result
operator|=
name|verifier
operator|.
name|doPass3a
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|getStatus
argument_list|()
operator|!=
name|VerificationResult
operator|.
name|VERIFIED_OK
condition|)
block|{
return|return
literal|false
return|;
block|}
name|result
operator|=
name|verifier
operator|.
name|doPass3b
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|getStatus
argument_list|()
operator|!=
name|VerificationResult
operator|.
name|VERIFIED_OK
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

