begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|AbstractTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ClassParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|EmptyVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|SWAP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|internal
operator|.
name|compiler
operator|.
name|batch
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|VerifierMainTestCase
extends|extends
name|AbstractTestCase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSWAP
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"src/test/java/org/apache/bcel/data/SWAP.java"
block|,
literal|"-g"
block|,
literal|"-source"
block|,
literal|"1.4"
block|,
literal|"-target"
block|,
literal|"1.4"
block|,
literal|"-d"
block|,
literal|"target/test-classes"
block|}
decl_stmt|;
operator|new
name|Main
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|,
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|err
argument_list|)
argument_list|,
literal|false
comment|/*systemExit*/
argument_list|,
literal|null
comment|/*options*/
argument_list|,
literal|null
comment|/*progress*/
argument_list|)
operator|.
name|compile
argument_list|(
name|argv
argument_list|)
expr_stmt|;
specifier|final
name|String
name|javaAgent
init|=
name|getJavaAgent
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"java"
argument_list|)
expr_stmt|;
if|if
condition|(
name|javaAgent
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
name|javaAgent
operator|.
name|replace
argument_list|(
literal|"jacoco.exec"
argument_list|,
literal|"jacoco_org.apache.bcel.data.SWAP.exec"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|add
argument_list|(
literal|"-cp"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"org.apache.bcel.verifier.Verifier"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"org/apache/bcel/data/SWAP.class"
argument_list|)
expr_stmt|;
specifier|final
name|ProcessBuilder
name|pb
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|pb
operator|.
name|redirectErrorStream
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Process
name|p
init|=
name|pb
operator|.
name|start
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedInputStream
name|is
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|byte
index|[]
name|buff
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|len
init|;
operator|(
name|len
operator|=
name|is
operator|.
name|read
argument_list|(
name|buff
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|buff
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|output
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|waitFor
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|output
argument_list|,
literal|"VERIFIED_REJECTED"
argument_list|)
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|output
argument_list|,
literal|"VERIFIED_OK"
argument_list|)
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
comment|// Class has passed the JustIce verifier, but now we need to ensure that the SWAP instruction is in the compiled class.
specifier|final
name|List
argument_list|<
name|SWAP
argument_list|>
name|swapInstructionsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|EmptyVisitor
name|swapCollector
init|=
operator|new
name|EmptyVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visitSWAP
parameter_list|(
specifier|final
name|SWAP
name|obj
parameter_list|)
block|{
name|swapInstructionsList
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|super
operator|.
name|visitSWAP
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"target/test-classes/org/apache/bcel/data/SWAP.class"
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|ClassParser
name|classParser
init|=
operator|new
name|ClassParser
argument_list|(
name|in
argument_list|,
literal|"SWAP.class"
argument_list|)
decl_stmt|;
specifier|final
name|JavaClass
name|javaClass
init|=
name|classParser
operator|.
name|parse
argument_list|()
decl_stmt|;
specifier|final
name|Method
name|method
init|=
name|javaClass
operator|.
name|getMethod
argument_list|(
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|data
operator|.
name|SWAP
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getTestConstructor"
argument_list|,
name|Class
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|code
init|=
name|method
operator|.
name|getCode
argument_list|()
operator|.
name|getCode
argument_list|()
decl_stmt|;
specifier|final
name|InstructionList
name|instructionList
init|=
operator|new
name|InstructionList
argument_list|(
name|code
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|InstructionHandle
name|instructionHandle
range|:
name|instructionList
control|)
block|{
name|instructionHandle
operator|.
name|accept
argument_list|(
name|swapCollector
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|swapInstructionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

