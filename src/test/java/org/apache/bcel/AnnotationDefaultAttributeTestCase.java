begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|AnnotationDefault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|SimpleElementValue
import|;
end_import

begin_class
specifier|public
class|class
name|AnnotationDefaultAttributeTestCase
extends|extends
name|AbstractTestCase
block|{
comment|/** 	 * For values in an annotation that have default values, we should be able 	 * to query the AnnotationDefault attribute against the method to discover 	 * the default value that was originally declared. 	 */
specifier|public
name|void
name|testMethodAnnotations
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|JavaClass
name|clazz
init|=
name|getTestClass
argument_list|(
literal|"org.apache.bcel.data.SimpleAnnotation"
argument_list|)
decl_stmt|;
name|Method
name|m
init|=
name|getMethod
argument_list|(
name|clazz
argument_list|,
literal|"fruit"
argument_list|)
decl_stmt|;
name|AnnotationDefault
name|a
init|=
operator|(
name|AnnotationDefault
operator|)
name|findAttribute
argument_list|(
literal|"AnnotationDefault"
argument_list|,
name|m
operator|.
name|getAttributes
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleElementValue
name|val
init|=
operator|(
name|SimpleElementValue
operator|)
name|a
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should be STRING but is "
operator|+
name|val
operator|.
name|getElementValueType
argument_list|()
argument_list|,
name|val
operator|.
name|getElementValueType
argument_list|()
operator|==
name|ElementValue
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have default of bananas but default is "
operator|+
name|val
operator|.
name|getValueString
argument_list|()
argument_list|,
name|val
operator|.
name|getValueString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"bananas"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

