begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertDoesNotThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|AbstractTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|ConstantPoolGen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|MethodGen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|ClassPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|ClassPathRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_class
class|class
name|ClassWithDoubleConstantPoolItem
block|{
name|double
name|d
init|=
literal|42
decl_stmt|;
comment|// here is the key; we need a double constant value
block|}
end_class

begin_class
class|class
name|ClassWithLongConstantPoolItem
block|{
name|long
name|l
init|=
literal|42
decl_stmt|;
comment|// here is the key; we need a double constant value
block|}
end_class

begin_class
specifier|public
class|class
name|ConstantPoolTestCase
extends|extends
name|AbstractTestCase
block|{
specifier|private
specifier|static
name|InstructionHandle
index|[]
name|getInstructionHandles
parameter_list|(
specifier|final
name|JavaClass
name|clazz
parameter_list|,
specifier|final
name|ConstantPoolGen
name|cp
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|)
block|{
specifier|final
name|MethodGen
name|methodGen
init|=
operator|new
name|MethodGen
argument_list|(
name|method
argument_list|,
name|clazz
operator|.
name|getClassName
argument_list|()
argument_list|,
name|cp
argument_list|)
decl_stmt|;
return|return
name|methodGen
operator|.
name|getInstructionList
argument_list|()
operator|.
name|getInstructionHandles
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassWithDoubleConstantPoolItem
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
try|try
init|(
specifier|final
name|ClassPath
name|cp
init|=
operator|new
name|ClassPath
argument_list|(
literal|"target/test-classes/org/apache/bcel/classfile"
argument_list|)
init|)
block|{
specifier|final
name|ClassWithDoubleConstantPoolItem
name|classWithDoubleConstantPoolItem
init|=
operator|new
name|ClassWithDoubleConstantPoolItem
argument_list|()
decl_stmt|;
specifier|final
name|JavaClass
name|c
init|=
operator|new
name|ClassPathRepository
argument_list|(
name|cp
argument_list|)
operator|.
name|loadClass
argument_list|(
name|classWithDoubleConstantPoolItem
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
name|c
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ClassWithDoubleConstantPoolItem
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|fields
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ConstantPool
name|pool
init|=
name|c
operator|.
name|getConstantPool
argument_list|()
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|assertDoesNotThrow
argument_list|(
parameter_list|()
lambda|->
block|{
name|final
name|Constant
name|constant
operator|=
name|pool
operator|.
name|getConstant
argument_list|(
name|i
argument_list|)
argument_list|;                 if
operator|(
name|constant
operator|instanceof
name|ConstantDouble
operator|)
block|{
name|assertEquals
argument_list|(
name|classWithDoubleConstantPoolItem
operator|.
name|d
argument_list|,
operator|(
operator|(
name|ConstantDouble
operator|)
name|constant
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
block|;                 }
return|return
name|constant
return|;
block|}
block_content|)
block|)
class|;
end_class

begin_function
unit|}     }
annotation|@
name|Test
specifier|public
name|void
name|testClassWithLongConstantPoolItem
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
try|try
init|(
specifier|final
name|ClassPath
name|cp
init|=
operator|new
name|ClassPath
argument_list|(
literal|"target/test-classes/org/apache/bcel/classfile"
argument_list|)
init|)
block|{
specifier|final
name|ClassWithLongConstantPoolItem
name|classWithLongConstantPoolItem
init|=
operator|new
name|ClassWithLongConstantPoolItem
argument_list|()
decl_stmt|;
specifier|final
name|JavaClass
name|c
init|=
operator|new
name|ClassPathRepository
argument_list|(
name|cp
argument_list|)
operator|.
name|loadClass
argument_list|(
name|classWithLongConstantPoolItem
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
name|c
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ClassWithLongConstantPoolItem
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|fields
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ConstantPool
name|pool
init|=
name|c
operator|.
name|getConstantPool
argument_list|()
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|assertDoesNotThrow
argument_list|(
parameter_list|()
lambda|->
block|{
name|final
name|Constant
name|constant
operator|=
name|pool
operator|.
name|getConstant
argument_list|(
name|i
argument_list|)
argument_list|;                 if
operator|(
name|constant
operator|instanceof
name|ConstantLong
operator|)
block|{
name|assertEquals
argument_list|(
name|classWithLongConstantPoolItem
operator|.
name|l
argument_list|,
operator|(
operator|(
name|ConstantLong
operator|)
name|constant
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
block|;                 }
return|return
name|constant
return|;
block|}
block_content|)
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}     }
annotation|@
name|Test
specifier|public
name|void
name|testConstantToString
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
specifier|final
name|JavaClass
name|clazz
init|=
name|getTestJavaClass
argument_list|(
name|PACKAGE_BASE_NAME
operator|+
literal|".data.SimpleClassWithDefaultConstructor"
argument_list|)
decl_stmt|;
specifier|final
name|ConstantPoolGen
name|cp
init|=
operator|new
name|ConstantPoolGen
argument_list|(
name|clazz
operator|.
name|getConstantPool
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Method
index|[]
name|methods
init|=
name|clazz
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"<init>"
argument_list|)
condition|)
block|{
for|for
control|(
specifier|final
name|InstructionHandle
name|instructionHandle
range|:
name|getInstructionHandles
argument_list|(
name|clazz
argument_list|,
name|cp
argument_list|,
name|method
argument_list|)
control|)
block|{
specifier|final
name|String
name|instruction
init|=
name|instructionHandle
operator|.
name|getInstruction
argument_list|()
operator|.
name|toString
argument_list|(
name|cp
operator|.
name|getConstantPool
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|instruction
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|instructionHandle
operator|.
name|getPosition
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|assertEquals
argument_list|(
literal|"aload_0"
argument_list|,
name|instruction
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertEquals
argument_list|(
literal|"invokespecial java/lang/Object/<init>()V"
argument_list|,
name|instruction
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|assertEquals
argument_list|(
literal|"return"
argument_list|,
name|instruction
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testTooManyConstants
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
specifier|final
name|JavaClass
name|clazz
init|=
name|getTestJavaClass
argument_list|(
name|PACKAGE_BASE_NAME
operator|+
literal|".data.SimpleClassWithDefaultConstructor"
argument_list|)
decl_stmt|;
specifier|final
name|ConstantPoolGen
name|cp
init|=
operator|new
name|ConstantPoolGen
argument_list|(
name|clazz
operator|.
name|getConstantPool
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|cp
operator|.
name|getSize
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|Const
operator|.
name|MAX_CP_ENTRIES
operator|-
literal|1
condition|)
block|{
name|cp
operator|.
name|addLong
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|cp
operator|.
name|getSize
argument_list|()
expr_stmt|;
comment|// i += 2
block|}
name|assertThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|cp
operator|.
name|addLong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

