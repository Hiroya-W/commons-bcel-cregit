begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|ValueSource
import|;
end_import

begin_comment
comment|/**  * Tests {@code module-info.class} files.  */
end_comment

begin_class
specifier|public
class|class
name|ConstantPoolModuleToStringTestCase
block|{
specifier|static
class|class
name|ToStringVisitor
implements|implements
name|Visitor
block|{
specifier|private
specifier|final
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConstantPool
name|pool
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|public
name|ToStringVisitor
parameter_list|(
specifier|final
name|ConstantPool
name|pool
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
specifier|private
name|void
name|append
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|stringBuilder
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|stringBuilder
operator|.
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ToStringVisitor [count="
operator|+
name|count
operator|+
literal|", stringBuilder="
operator|+
name|stringBuilder
operator|+
literal|", pool="
operator|+
name|pool
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitAnnotation
parameter_list|(
specifier|final
name|Annotations
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitAnnotationDefault
parameter_list|(
specifier|final
name|AnnotationDefault
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitAnnotationEntry
parameter_list|(
specifier|final
name|AnnotationEntry
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitBootstrapMethods
parameter_list|(
specifier|final
name|BootstrapMethods
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitCode
parameter_list|(
specifier|final
name|Code
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitCodeException
parameter_list|(
specifier|final
name|CodeException
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
operator|.
name|toString
argument_list|(
name|pool
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantClass
parameter_list|(
specifier|final
name|ConstantClass
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantDouble
parameter_list|(
specifier|final
name|ConstantDouble
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantDynamic
parameter_list|(
specifier|final
name|ConstantDynamic
name|constantDynamic
parameter_list|)
block|{
name|append
argument_list|(
name|constantDynamic
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantFieldref
parameter_list|(
specifier|final
name|ConstantFieldref
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantFloat
parameter_list|(
specifier|final
name|ConstantFloat
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantInteger
parameter_list|(
specifier|final
name|ConstantInteger
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantInterfaceMethodref
parameter_list|(
specifier|final
name|ConstantInterfaceMethodref
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantInvokeDynamic
parameter_list|(
specifier|final
name|ConstantInvokeDynamic
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantLong
parameter_list|(
specifier|final
name|ConstantLong
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantMethodHandle
parameter_list|(
specifier|final
name|ConstantMethodHandle
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantMethodref
parameter_list|(
specifier|final
name|ConstantMethodref
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantMethodType
parameter_list|(
specifier|final
name|ConstantMethodType
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantModule
parameter_list|(
specifier|final
name|ConstantModule
name|constantModule
parameter_list|)
block|{
name|append
argument_list|(
name|constantModule
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantNameAndType
parameter_list|(
specifier|final
name|ConstantNameAndType
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantPackage
parameter_list|(
specifier|final
name|ConstantPackage
name|constantPackage
parameter_list|)
block|{
name|append
argument_list|(
name|constantPackage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantPool
parameter_list|(
specifier|final
name|ConstantPool
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantString
parameter_list|(
specifier|final
name|ConstantString
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantUtf8
parameter_list|(
specifier|final
name|ConstantUtf8
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConstantValue
parameter_list|(
specifier|final
name|ConstantValue
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitDeprecated
parameter_list|(
specifier|final
name|Deprecated
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitEnclosingMethod
parameter_list|(
specifier|final
name|EnclosingMethod
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitExceptionTable
parameter_list|(
specifier|final
name|ExceptionTable
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitField
parameter_list|(
specifier|final
name|Field
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitInnerClass
parameter_list|(
specifier|final
name|InnerClass
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
operator|.
name|toString
argument_list|(
name|pool
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitInnerClasses
parameter_list|(
specifier|final
name|InnerClasses
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitJavaClass
parameter_list|(
specifier|final
name|JavaClass
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLineNumber
parameter_list|(
specifier|final
name|LineNumber
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLineNumberTable
parameter_list|(
specifier|final
name|LineNumberTable
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLocalVariable
parameter_list|(
specifier|final
name|LocalVariable
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLocalVariableTable
parameter_list|(
specifier|final
name|LocalVariableTable
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLocalVariableTypeTable
parameter_list|(
specifier|final
name|LocalVariableTypeTable
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitMethod
parameter_list|(
specifier|final
name|Method
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitMethodParameter
parameter_list|(
specifier|final
name|MethodParameter
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitMethodParameters
parameter_list|(
specifier|final
name|MethodParameters
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitModule
parameter_list|(
specifier|final
name|Module
name|constantModule
parameter_list|)
block|{
name|append
argument_list|(
name|constantModule
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitModuleExports
parameter_list|(
specifier|final
name|ModuleExports
name|constantModule
parameter_list|)
block|{
name|append
argument_list|(
name|constantModule
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|constantModule
operator|.
name|toString
argument_list|(
name|pool
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitModuleMainClass
parameter_list|(
specifier|final
name|ModuleMainClass
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitModuleOpens
parameter_list|(
specifier|final
name|ModuleOpens
name|constantModule
parameter_list|)
block|{
name|append
argument_list|(
name|constantModule
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|constantModule
operator|.
name|toString
argument_list|(
name|pool
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitModulePackages
parameter_list|(
specifier|final
name|ModulePackages
name|constantModule
parameter_list|)
block|{
name|append
argument_list|(
name|constantModule
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitModuleProvides
parameter_list|(
specifier|final
name|ModuleProvides
name|constantModule
parameter_list|)
block|{
name|append
argument_list|(
name|constantModule
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|constantModule
operator|.
name|toString
argument_list|(
name|pool
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitModuleRequires
parameter_list|(
specifier|final
name|ModuleRequires
name|constantModule
parameter_list|)
block|{
name|append
argument_list|(
name|constantModule
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|constantModule
operator|.
name|toString
argument_list|(
name|pool
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|s
init|=
name|constantModule
operator|.
name|toString
argument_list|(
name|pool
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"S: "
operator|+
name|s
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"java.base"
argument_list|)
operator|||
name|s
operator|.
name|startsWith
argument_list|(
literal|"Othermodularthing"
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitNestHost
parameter_list|(
specifier|final
name|NestHost
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitNestMembers
parameter_list|(
specifier|final
name|NestMembers
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitParameterAnnotation
parameter_list|(
specifier|final
name|ParameterAnnotations
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitParameterAnnotationEntry
parameter_list|(
specifier|final
name|ParameterAnnotationEntry
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitSignature
parameter_list|(
specifier|final
name|Signature
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitSourceFile
parameter_list|(
specifier|final
name|SourceFile
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitStackMap
parameter_list|(
specifier|final
name|StackMap
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitStackMapEntry
parameter_list|(
specifier|final
name|StackMapEntry
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitSynthetic
parameter_list|(
specifier|final
name|Synthetic
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitUnknown
parameter_list|(
specifier|final
name|Unknown
name|obj
parameter_list|)
block|{
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|ValueSource
argument_list|(
name|strings
operator|=
block|{
comment|// @formatter:off
literal|"src/test/resources/jpms/java11/commons-io/module-info.class"
block|,
literal|"src/test/resources/jpms/java17/commons-io/module-info.class"
block|,
literal|"src/test/resources/jpms/java18/commons-io/module-info.class"
block|,
literal|"src/test/resources/jpms/java19-ea/commons-io/module-info.class"
block|}
argument_list|)
comment|// @formatter:on
specifier|public
name|void
name|test
parameter_list|(
specifier|final
name|String
name|first
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
specifier|final
name|InputStream
name|inputStream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|first
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|ClassParser
name|classParser
init|=
operator|new
name|ClassParser
argument_list|(
name|inputStream
argument_list|,
literal|"module-info.class"
argument_list|)
decl_stmt|;
specifier|final
name|JavaClass
name|javaClass
init|=
name|classParser
operator|.
name|parse
argument_list|()
decl_stmt|;
specifier|final
name|ConstantPool
name|constantPool
init|=
name|javaClass
operator|.
name|getConstantPool
argument_list|()
decl_stmt|;
specifier|final
name|ToStringVisitor
name|visitor
init|=
operator|new
name|ToStringVisitor
argument_list|(
name|constantPool
argument_list|)
decl_stmt|;
specifier|final
name|DescendingVisitor
name|descendingVisitor
init|=
operator|new
name|DescendingVisitor
argument_list|(
name|javaClass
argument_list|,
name|visitor
argument_list|)
decl_stmt|;
try|try
block|{
name|javaClass
operator|.
name|accept
argument_list|(
name|descendingVisitor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
decl||
name|Error
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|visitor
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

