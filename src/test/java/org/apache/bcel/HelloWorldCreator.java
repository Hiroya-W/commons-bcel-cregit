begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|ArrayType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|ClassGen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|ConstantPoolGen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|MethodGen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_class
specifier|public
class|class
name|HelloWorldCreator
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ORG_APACHE_BCEL_HELLO_WORLD
init|=
literal|"org.apache.bcel.HelloWorld"
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|HelloWorldCreator
name|creator
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|HelloWorldCreator
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"target/test-classes/org/apache/bcel/HelloWorld.class"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|out
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|path
argument_list|)
init|)
block|{
name|creator
operator|.
name|create
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|InstructionFactory
name|factory
decl_stmt|;
specifier|private
name|ConstantPoolGen
name|cp
decl_stmt|;
specifier|private
name|ClassGen
name|cg
decl_stmt|;
specifier|public
name|HelloWorldCreator
parameter_list|()
block|{
name|cg
operator|=
operator|new
name|ClassGen
argument_list|(
name|ORG_APACHE_BCEL_HELLO_WORLD
argument_list|,
literal|"java.lang.Object"
argument_list|,
literal|"HelloWorld.java"
argument_list|,
name|Const
operator|.
name|ACC_PUBLIC
operator||
name|Const
operator|.
name|ACC_SUPER
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|cg
operator|.
name|setMajor
argument_list|(
name|Const
operator|.
name|MAJOR_1_8
argument_list|)
expr_stmt|;
name|cg
operator|.
name|setMinor
argument_list|(
name|Const
operator|.
name|MINOR_1_8
argument_list|)
expr_stmt|;
name|cp
operator|=
name|cg
operator|.
name|getConstantPool
argument_list|()
expr_stmt|;
name|factory
operator|=
operator|new
name|InstructionFactory
argument_list|(
name|cg
argument_list|,
name|cp
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|create
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|createConstructor
argument_list|()
expr_stmt|;
name|createMainMethod
argument_list|()
expr_stmt|;
name|cg
operator|.
name|getJavaClass
argument_list|()
operator|.
name|dump
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createConstructor
parameter_list|()
block|{
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|VOID
argument_list|,
name|Type
operator|.
name|NO_ARGS
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|"<init>"
argument_list|,
name|ORG_APACHE_BCEL_HELLO_WORLD
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Object"
argument_list|,
literal|"<init>"
argument_list|,
name|Type
operator|.
name|VOID
argument_list|,
name|Type
operator|.
name|NO_ARGS
argument_list|,
name|Const
operator|.
name|INVOKESPECIAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|VOID
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMainMethod
parameter_list|()
block|{
name|InstructionList
name|il
init|=
name|factory
operator|.
name|createPrintln
argument_list|(
literal|"Hello World!"
argument_list|)
decl_stmt|;
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
operator||
name|Const
operator|.
name|ACC_STATIC
argument_list|,
name|Type
operator|.
name|VOID
argument_list|,
operator|new
name|Type
index|[]
block|{
operator|new
name|ArrayType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"arg0"
block|}
argument_list|,
literal|"main"
argument_list|,
name|ORG_APACHE_BCEL_HELLO_WORLD
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|VOID
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

