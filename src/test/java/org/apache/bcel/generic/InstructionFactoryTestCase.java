begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|AbstractTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionFactory
operator|.
name|createArrayLoad
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionFactory
operator|.
name|createArrayStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionFactory
operator|.
name|createBinaryOperation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionFactory
operator|.
name|createBranchInstruction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionFactory
operator|.
name|createLoad
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionFactory
operator|.
name|createNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionFactory
operator|.
name|createReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionFactory
operator|.
name|createStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|InstructionFactoryTestCase
extends|extends
name|AbstractTestCase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testArrayLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|BALOAD
argument_list|,
name|createArrayLoad
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|BALOAD
argument_list|,
name|createArrayLoad
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|CALOAD
argument_list|,
name|createArrayLoad
argument_list|(
name|Type
operator|.
name|CHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|SALOAD
argument_list|,
name|createArrayLoad
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|IALOAD
argument_list|,
name|createArrayLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|FALOAD
argument_list|,
name|createArrayLoad
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|DALOAD
argument_list|,
name|createArrayLoad
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|LALOAD
argument_list|,
name|createArrayLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|AALOAD
argument_list|,
name|createArrayLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|AALOAD
argument_list|,
name|createArrayLoad
argument_list|(
name|Type
operator|.
name|getType
argument_list|(
literal|"[I"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayStore
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|BASTORE
argument_list|,
name|createArrayStore
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|BASTORE
argument_list|,
name|createArrayStore
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|CASTORE
argument_list|,
name|createArrayStore
argument_list|(
name|Type
operator|.
name|CHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|SASTORE
argument_list|,
name|createArrayStore
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|IASTORE
argument_list|,
name|createArrayStore
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|FASTORE
argument_list|,
name|createArrayStore
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|DASTORE
argument_list|,
name|createArrayStore
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|LASTORE
argument_list|,
name|createArrayStore
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|,
name|createArrayStore
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|,
name|createArrayStore
argument_list|(
name|Type
operator|.
name|getType
argument_list|(
literal|"[I"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceptions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|InstructionFactory
name|factory
init|=
operator|new
name|InstructionFactory
argument_list|(
operator|new
name|ClassGen
argument_list|(
name|Repository
operator|.
name|lookupClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createArrayLoad
argument_list|(
name|Type
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createArrayStore
argument_list|(
name|Type
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createBinaryOperation
argument_list|(
literal|"$"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createBinaryOperation
argument_list|(
literal|"$"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createBinaryOperation
argument_list|(
literal|"$"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createBinaryOperation
argument_list|(
literal|"$"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createBinaryOperation
argument_list|(
literal|"*"
argument_list|,
name|Type
operator|.
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createBranchInstruction
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createLoad
argument_list|(
name|Type
operator|.
name|UNKNOWN
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createNull
argument_list|(
name|Type
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createReturn
argument_list|(
name|Type
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createStore
argument_list|(
name|Type
operator|.
name|UNKNOWN
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|factory
operator|.
name|createAppend
argument_list|(
name|Type
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|factory
operator|.
name|createCast
argument_list|(
name|Type
operator|.
name|UNKNOWN
argument_list|,
name|Type
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|factory
operator|.
name|createFieldAccess
argument_list|(
literal|"java.lang.System"
argument_list|,
literal|"out"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.io.PrintStream"
argument_list|)
argument_list|,
name|Const
operator|.
name|NOP
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrowsExactly
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.io.PrintStream"
argument_list|,
literal|"println"
argument_list|,
name|Type
operator|.
name|VOID
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|NOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|ICONST_0
argument_list|,
name|createNull
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|ICONST_0
argument_list|,
name|createNull
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|ICONST_0
argument_list|,
name|createNull
argument_list|(
name|Type
operator|.
name|CHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|ICONST_0
argument_list|,
name|createNull
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|ICONST_0
argument_list|,
name|createNull
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|FCONST_0
argument_list|,
name|createNull
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|DCONST_0
argument_list|,
name|createNull
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|LCONST_0
argument_list|,
name|createNull
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|NOP
argument_list|,
name|createNull
argument_list|(
name|Type
operator|.
name|VOID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|ACONST_NULL
argument_list|,
name|createNull
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InstructionConst
operator|.
name|ACONST_NULL
argument_list|,
name|createNull
argument_list|(
name|Type
operator|.
name|getType
argument_list|(
literal|"[I"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

