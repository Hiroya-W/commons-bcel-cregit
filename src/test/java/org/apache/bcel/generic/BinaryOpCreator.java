begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|StackMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|StackMapEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|StackMapType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_class
specifier|public
class|class
name|BinaryOpCreator
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
init|=
literal|"org.apache.bcel.generic.BinaryOp"
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|BinaryOpCreator
name|creator
init|=
operator|new
name|BinaryOpCreator
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"target/test-classes/org/apache/bcel/generic/BinaryOp.class"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|out
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|path
argument_list|)
init|)
block|{
name|creator
operator|.
name|create
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|InstructionFactory
name|factory
decl_stmt|;
specifier|private
specifier|final
name|ConstantPoolGen
name|cp
decl_stmt|;
specifier|private
specifier|final
name|ClassGen
name|cg
decl_stmt|;
specifier|public
name|BinaryOpCreator
parameter_list|()
block|{
name|cg
operator|=
operator|new
name|ClassGen
argument_list|(
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
literal|"java.lang.Object"
argument_list|,
literal|"BinaryOp.java"
argument_list|,
name|Const
operator|.
name|ACC_PUBLIC
operator||
name|Const
operator|.
name|ACC_SUPER
argument_list|,
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
argument_list|)
expr_stmt|;
name|cg
operator|.
name|setMajor
argument_list|(
name|Const
operator|.
name|MAJOR_1_8
argument_list|)
expr_stmt|;
name|cg
operator|.
name|setMinor
argument_list|(
name|Const
operator|.
name|MINOR_1_8
argument_list|)
expr_stmt|;
name|cp
operator|=
name|cg
operator|.
name|getConstantPool
argument_list|()
expr_stmt|;
name|factory
operator|=
operator|new
name|InstructionFactory
argument_list|(
name|cg
argument_list|,
name|cp
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|create
parameter_list|(
specifier|final
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|createConstructor
argument_list|()
expr_stmt|;
name|createMethodISUB
argument_list|()
expr_stmt|;
name|createMethodIADD
argument_list|()
expr_stmt|;
name|createMethodIREM
argument_list|()
expr_stmt|;
name|createMethodIMUL
argument_list|()
expr_stmt|;
name|createMethodIDIV
argument_list|()
expr_stmt|;
name|createMethodIAND
argument_list|()
expr_stmt|;
name|createMethodIOR
argument_list|()
expr_stmt|;
name|createMethodIXOR
argument_list|()
expr_stmt|;
name|createMethodISHL
argument_list|()
expr_stmt|;
name|createMethodISHR
argument_list|()
expr_stmt|;
name|createMethodIUSHR
argument_list|()
expr_stmt|;
name|createMethodLSUB
argument_list|()
expr_stmt|;
name|createMethodLADD
argument_list|()
expr_stmt|;
name|createMethodLREM
argument_list|()
expr_stmt|;
name|createMethodLMUL
argument_list|()
expr_stmt|;
name|createMethodLDIV
argument_list|()
expr_stmt|;
name|createMethodLAND
argument_list|()
expr_stmt|;
name|createMethodLOR
argument_list|()
expr_stmt|;
name|createMethodLXOR
argument_list|()
expr_stmt|;
name|createMethodLSHL
argument_list|()
expr_stmt|;
name|createMethodLSHR
argument_list|()
expr_stmt|;
name|createMethodLUSHR
argument_list|()
expr_stmt|;
name|createMethodFSUB
argument_list|()
expr_stmt|;
name|createMethodFADD
argument_list|()
expr_stmt|;
name|createMethodFREM
argument_list|()
expr_stmt|;
name|createMethodFMUL
argument_list|()
expr_stmt|;
name|createMethodFDIV
argument_list|()
expr_stmt|;
name|createMethodDSUB
argument_list|()
expr_stmt|;
name|createMethodDADD
argument_list|()
expr_stmt|;
name|createMethodDREM
argument_list|()
expr_stmt|;
name|createMethodDMUL
argument_list|()
expr_stmt|;
name|createMethodDDIV
argument_list|()
expr_stmt|;
name|createMethodCalculate
argument_list|()
expr_stmt|;
name|createMethodMain
argument_list|()
expr_stmt|;
name|cg
operator|.
name|getJavaClass
argument_list|()
operator|.
name|dump
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createConstructor
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|VOID
argument_list|,
name|Type
operator|.
name|NO_ARGS
argument_list|,
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
argument_list|,
literal|"<init>"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Object"
argument_list|,
literal|"<init>"
argument_list|,
name|Type
operator|.
name|VOID
argument_list|,
name|Type
operator|.
name|NO_ARGS
argument_list|,
name|Const
operator|.
name|INVOKESPECIAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|VOID
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodCalculate
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|OBJECT
argument_list|,
operator|new
name|Type
index|[]
block|{
operator|new
name|ArrayType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"args"
block|}
argument_list|,
literal|"calculate"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|method
operator|.
name|addException
argument_list|(
literal|"java.lang.Exception"
argument_list|)
expr_stmt|;
specifier|final
name|StackMapType
index|[]
name|typesOfLocals
init|=
block|{
operator|new
name|StackMapType
argument_list|(
operator|(
name|byte
operator|)
literal|7
argument_list|,
name|cp
operator|.
name|addClass
argument_list|(
literal|"java.lang.String"
argument_list|)
argument_list|,
name|cp
operator|.
name|getConstantPool
argument_list|()
argument_list|)
block|}
decl_stmt|;
specifier|final
name|StackMapEntry
index|[]
name|table
init|=
block|{
operator|new
name|StackMapEntry
argument_list|(
literal|252
argument_list|,
literal|70
argument_list|,
name|typesOfLocals
argument_list|,
name|StackMapType
operator|.
name|EMPTY_ARRAY
argument_list|,
name|cp
operator|.
name|getConstantPool
argument_list|()
argument_list|)
block|,
operator|new
name|StackMapEntry
argument_list|(
literal|251
argument_list|,
literal|65
argument_list|,
name|StackMapType
operator|.
name|EMPTY_ARRAY
argument_list|,
name|StackMapType
operator|.
name|EMPTY_ARRAY
argument_list|,
name|cp
operator|.
name|getConstantPool
argument_list|()
argument_list|)
block|,
operator|new
name|StackMapEntry
argument_list|(
literal|251
argument_list|,
literal|65
argument_list|,
name|StackMapType
operator|.
name|EMPTY_ARRAY
argument_list|,
name|StackMapType
operator|.
name|EMPTY_ARRAY
argument_list|,
name|cp
operator|.
name|getConstantPool
argument_list|()
argument_list|)
block|,
operator|new
name|StackMapEntry
argument_list|(
literal|251
argument_list|,
literal|65
argument_list|,
name|StackMapType
operator|.
name|EMPTY_ARRAY
argument_list|,
name|StackMapType
operator|.
name|EMPTY_ARRAY
argument_list|,
name|cp
operator|.
name|getConstantPool
argument_list|()
argument_list|)
block|}
decl_stmt|;
name|method
operator|.
name|addCodeAttribute
argument_list|(
operator|new
name|StackMap
argument_list|(
name|cp
operator|.
name|addUtf8
argument_list|(
literal|"StackMapTable"
argument_list|)
argument_list|,
literal|17
argument_list|,
name|table
argument_list|,
name|cp
operator|.
name|getConstantPool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AALOAD
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createStore
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.String"
argument_list|,
literal|"startsWith"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BranchInstruction
name|ifeq1
init|=
name|InstructionFactory
operator|.
name|createBranchInstruction
argument_list|(
name|Const
operator|.
name|IFEQ
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|ifeq1
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Object"
argument_list|,
literal|"getClass"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Type
operator|.
name|NO_ARGS
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createNewArray
argument_list|(
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createFieldAccess
argument_list|(
literal|"java.lang.Integer"
argument_list|,
literal|"TYPE"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Const
operator|.
name|GETSTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createFieldAccess
argument_list|(
literal|"java.lang.Integer"
argument_list|,
literal|"TYPE"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Const
operator|.
name|GETSTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Class"
argument_list|,
literal|"getMethod"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.reflect.Method"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|,
operator|new
name|ArrayType
argument_list|(
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createNewArray
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AALOAD
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Integer"
argument_list|,
literal|"parseInt"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Integer"
argument_list|,
literal|"valueOf"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Integer"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AALOAD
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Integer"
argument_list|,
literal|"parseInt"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Integer"
argument_list|,
literal|"valueOf"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Integer"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.reflect.Method"
argument_list|,
literal|"invoke"
argument_list|,
name|Type
operator|.
name|OBJECT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|OBJECT
block|,
operator|new
name|ArrayType
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|InstructionHandle
name|ih1
init|=
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|"l"
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.String"
argument_list|,
literal|"startsWith"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BranchInstruction
name|ifeq2
init|=
name|InstructionFactory
operator|.
name|createBranchInstruction
argument_list|(
name|Const
operator|.
name|IFEQ
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|ifeq2
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Object"
argument_list|,
literal|"getClass"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Type
operator|.
name|NO_ARGS
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createNewArray
argument_list|(
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createFieldAccess
argument_list|(
literal|"java.lang.Long"
argument_list|,
literal|"TYPE"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Const
operator|.
name|GETSTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createFieldAccess
argument_list|(
literal|"java.lang.Long"
argument_list|,
literal|"TYPE"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Const
operator|.
name|GETSTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Class"
argument_list|,
literal|"getMethod"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.reflect.Method"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|,
operator|new
name|ArrayType
argument_list|(
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createNewArray
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AALOAD
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Long"
argument_list|,
literal|"parseLong"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Long"
argument_list|,
literal|"valueOf"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Long"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AALOAD
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Long"
argument_list|,
literal|"parseLong"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Long"
argument_list|,
literal|"valueOf"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Long"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.reflect.Method"
argument_list|,
literal|"invoke"
argument_list|,
name|Type
operator|.
name|OBJECT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|OBJECT
block|,
operator|new
name|ArrayType
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|InstructionHandle
name|ih2
init|=
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.String"
argument_list|,
literal|"startsWith"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BranchInstruction
name|ifeq3
init|=
name|InstructionFactory
operator|.
name|createBranchInstruction
argument_list|(
name|Const
operator|.
name|IFEQ
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|ifeq3
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Object"
argument_list|,
literal|"getClass"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Type
operator|.
name|NO_ARGS
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createNewArray
argument_list|(
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createFieldAccess
argument_list|(
literal|"java.lang.Float"
argument_list|,
literal|"TYPE"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Const
operator|.
name|GETSTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createFieldAccess
argument_list|(
literal|"java.lang.Float"
argument_list|,
literal|"TYPE"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Const
operator|.
name|GETSTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Class"
argument_list|,
literal|"getMethod"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.reflect.Method"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|,
operator|new
name|ArrayType
argument_list|(
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createNewArray
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AALOAD
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Float"
argument_list|,
literal|"parseFloat"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Float"
argument_list|,
literal|"valueOf"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Float"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|FLOAT
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AALOAD
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Float"
argument_list|,
literal|"parseFloat"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Float"
argument_list|,
literal|"valueOf"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Float"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|FLOAT
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.reflect.Method"
argument_list|,
literal|"invoke"
argument_list|,
name|Type
operator|.
name|OBJECT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|OBJECT
block|,
operator|new
name|ArrayType
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|InstructionHandle
name|ih3
init|=
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.String"
argument_list|,
literal|"startsWith"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BranchInstruction
name|ifeq4
init|=
name|InstructionFactory
operator|.
name|createBranchInstruction
argument_list|(
name|Const
operator|.
name|IFEQ
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|ifeq4
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Object"
argument_list|,
literal|"getClass"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Type
operator|.
name|NO_ARGS
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createNewArray
argument_list|(
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createFieldAccess
argument_list|(
literal|"java.lang.Double"
argument_list|,
literal|"TYPE"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Const
operator|.
name|GETSTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createFieldAccess
argument_list|(
literal|"java.lang.Double"
argument_list|,
literal|"TYPE"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
name|Const
operator|.
name|GETSTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Class"
argument_list|,
literal|"getMethod"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.reflect.Method"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|,
operator|new
name|ArrayType
argument_list|(
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Class"
argument_list|)
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createNewArray
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AALOAD
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Double"
argument_list|,
literal|"parseDouble"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Double"
argument_list|,
literal|"valueOf"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Double"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|DOUBLE
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AALOAD
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Double"
argument_list|,
literal|"parseDouble"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|STRING
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.Double"
argument_list|,
literal|"valueOf"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.lang.Double"
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|DOUBLE
block|}
argument_list|,
name|Const
operator|.
name|INVOKESTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|AASTORE
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.lang.reflect.Method"
argument_list|,
literal|"invoke"
argument_list|,
name|Type
operator|.
name|OBJECT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|OBJECT
block|,
operator|new
name|ArrayType
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|InstructionHandle
name|ih4
init|=
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|ACONST_NULL
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|ifeq1
operator|.
name|setTarget
argument_list|(
name|ih1
argument_list|)
expr_stmt|;
name|ifeq2
operator|.
name|setTarget
argument_list|(
name|ih2
argument_list|)
expr_stmt|;
name|ifeq3
operator|.
name|setTarget
argument_list|(
name|ih3
argument_list|)
expr_stmt|;
name|ifeq4
operator|.
name|setTarget
argument_list|(
name|ih4
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodDADD
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|DOUBLE
block|,
name|Type
operator|.
name|DOUBLE
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"dadd"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"+"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodDDIV
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|DOUBLE
block|,
name|Type
operator|.
name|DOUBLE
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"ddiv"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"/"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodDMUL
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|DOUBLE
block|,
name|Type
operator|.
name|DOUBLE
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"dmul"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"*"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodDREM
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|DOUBLE
block|,
name|Type
operator|.
name|DOUBLE
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"drem"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"%"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodDSUB
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|DOUBLE
block|,
name|Type
operator|.
name|DOUBLE
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"dsub"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"-"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodFADD
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|FLOAT
block|,
name|Type
operator|.
name|FLOAT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"fadd"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"+"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodFDIV
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|FLOAT
block|,
name|Type
operator|.
name|FLOAT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"fdiv"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"/"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodFMUL
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|FLOAT
block|,
name|Type
operator|.
name|FLOAT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"fmul"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"*"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodFREM
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|FLOAT
block|,
name|Type
operator|.
name|FLOAT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"frem"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"%"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodFSUB
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|FLOAT
block|,
name|Type
operator|.
name|FLOAT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"fsub"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"-"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodIADD
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|,
name|Type
operator|.
name|INT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"iadd"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"+"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodIAND
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|,
name|Type
operator|.
name|INT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"iand"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"&"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodIDIV
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|,
name|Type
operator|.
name|INT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"idiv"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"/"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodIMUL
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|,
name|Type
operator|.
name|INT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"imul"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"*"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodIOR
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|,
name|Type
operator|.
name|INT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"ior"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"|"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodIREM
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|,
name|Type
operator|.
name|INT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"irem"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"%"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodISHL
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|,
name|Type
operator|.
name|INT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"ishl"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"<<"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodISHR
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|,
name|Type
operator|.
name|INT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"ishr"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|">>"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodISUB
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|,
name|Type
operator|.
name|INT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"isub"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"-"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodIUSHR
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|,
name|Type
operator|.
name|INT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"iushr"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|">>>"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodIXOR
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|INT
block|,
name|Type
operator|.
name|INT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"ixor"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"^"
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodLADD
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|,
name|Type
operator|.
name|LONG
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"ladd"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"+"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodLAND
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|,
name|Type
operator|.
name|LONG
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"land"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"&"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodLDIV
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|,
name|Type
operator|.
name|LONG
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"ldiv"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"/"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodLMUL
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|,
name|Type
operator|.
name|LONG
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"lmul"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"*"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodLOR
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|,
name|Type
operator|.
name|LONG
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"lor"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"|"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodLREM
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|,
name|Type
operator|.
name|LONG
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"lrem"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"%"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodLSHL
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|,
name|Type
operator|.
name|LONG
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"lshl"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|L2I
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"<<"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodLSHR
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|,
name|Type
operator|.
name|LONG
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"lshr"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|L2I
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|">>"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodLSUB
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|,
name|Type
operator|.
name|LONG
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"lsub"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"-"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodLUSHR
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|,
name|Type
operator|.
name|LONG
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"lushr"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|L2I
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|">>>"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodLXOR
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|LONG
block|,
name|Type
operator|.
name|LONG
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"lxor"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createBinaryOperation
argument_list|(
literal|"^"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createMethodMain
parameter_list|()
block|{
specifier|final
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
specifier|final
name|MethodGen
name|method
init|=
operator|new
name|MethodGen
argument_list|(
name|Const
operator|.
name|ACC_PUBLIC
operator||
name|Const
operator|.
name|ACC_STATIC
argument_list|,
name|Type
operator|.
name|VOID
argument_list|,
operator|new
name|Type
index|[]
block|{
operator|new
name|ArrayType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"args"
block|}
argument_list|,
literal|"main"
argument_list|,
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
name|il
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|method
operator|.
name|addException
argument_list|(
literal|"java.lang.Exception"
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createNew
argument_list|(
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionConst
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
literal|"<init>"
argument_list|,
name|Type
operator|.
name|VOID
argument_list|,
name|Type
operator|.
name|NO_ARGS
argument_list|,
name|Const
operator|.
name|INVOKESPECIAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createStore
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createFieldAccess
argument_list|(
literal|"java.lang.System"
argument_list|,
literal|"out"
argument_list|,
operator|new
name|ObjectType
argument_list|(
literal|"java.io.PrintStream"
argument_list|)
argument_list|,
name|Const
operator|.
name|GETSTATIC
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createLoad
argument_list|(
name|Type
operator|.
name|OBJECT
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
name|ORG_APACHE_BCEL_GENERIC_BINARY_OP
argument_list|,
literal|"calculate"
argument_list|,
name|Type
operator|.
name|OBJECT
argument_list|,
operator|new
name|Type
index|[]
block|{
operator|new
name|ArrayType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|1
argument_list|)
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|factory
operator|.
name|createInvoke
argument_list|(
literal|"java.io.PrintStream"
argument_list|,
literal|"println"
argument_list|,
name|Type
operator|.
name|VOID
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Type
operator|.
name|OBJECT
block|}
argument_list|,
name|Const
operator|.
name|INVOKEVIRTUAL
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|append
argument_list|(
name|InstructionFactory
operator|.
name|createReturn
argument_list|(
name|Type
operator|.
name|VOID
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|setMaxStack
argument_list|()
expr_stmt|;
name|method
operator|.
name|setMaxLocals
argument_list|()
expr_stmt|;
name|cg
operator|.
name|addMethod
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|il
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

