begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Const
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|BasicTypeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testClassName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_BOOLEAN
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_BYTE
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|char
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_CHAR
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|double
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_DOUBLE
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|float
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_FLOAT
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_INT
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|long
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_LONG
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|short
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_SHORT
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|void
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_VOID
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetType
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_BYTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSignature
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Z"
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_BOOLEAN
argument_list|)
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_BYTE
argument_list|)
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C"
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_CHAR
argument_list|)
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"D"
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_DOUBLE
argument_list|)
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"F"
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_FLOAT
argument_list|)
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"I"
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_INT
argument_list|)
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"J"
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_LONG
argument_list|)
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"S"
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_SHORT
argument_list|)
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"V"
argument_list|,
name|BasicType
operator|.
name|getType
argument_list|(
name|Const
operator|.
name|T_VOID
argument_list|)
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

