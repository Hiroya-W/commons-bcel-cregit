begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assumptions
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|PathMatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ClassParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Code
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|ModularRuntimeImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|JavaVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|condition
operator|.
name|DisabledOnJre
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|condition
operator|.
name|JRE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_comment
comment|/**  * Test that the generic dump() methods work on the JDK classes Reads each class into an instruction list and then dumps the instructions. The output bytes  * should be the same as the input.  *<p>  * Set the property {@value JavaHome#EXTRA_JAVA_HOMES} to a {@link File#pathSeparator}-separated list of JRE/JDK paths for additional testing.  *</p>  *<p>  * For example:  *</p>  *  *<pre>  * mvn test -Dtest=JdkGenericDumpTestCase -DExtraJavaHomes="C:\Program Files\Java\openjdk\jdk-13;C:\Program Files\Java\openjdk\jdk-14"  * mvn test -Dtest=JdkGenericDumpTestCase -DExtraJavaRoot="C:\Program Files\Eclipse Adoptium"  *</pre>  *<p>  * Where "C:\Program Files\Eclipse Adoptium" contains JDK directories, for example:  *</p>  *<ul>  *<li>jdk-11.0.16.101-hotspot</li>  *<li>jdk-17.0.4.101-hotspot</li>  *<li>jdk-19.0.0.36-hotspot</li>  *<li>jdk-8.0.345.1-hotspot</li>  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|JdkGenericDumpTestCase
block|{
specifier|private
specifier|static
class|class
name|ClassParserFilesVisitor
extends|extends
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
block|{
specifier|private
specifier|final
name|PathMatcher
name|matcher
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
comment|// FileSystems.getDefault() returns a singleton
name|ClassParserFilesVisitor
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|)
block|{
name|matcher
operator|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPathMatcher
argument_list|(
literal|"glob:"
operator|+
name|pattern
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|find
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|name
init|=
name|path
operator|.
name|getFileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|matcher
operator|.
name|matches
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
init|(
specifier|final
name|InputStream
name|inputStream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|path
argument_list|)
init|)
block|{
specifier|final
name|ClassParser
name|classParser
init|=
operator|new
name|ClassParser
argument_list|(
name|inputStream
argument_list|,
name|name
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|classParser
operator|.
name|parse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|preVisitDirectory
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|find
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|find
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFileFailed
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|hexArray
init|=
literal|"0123456789ABCDEF"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|bytesToHex
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
specifier|final
name|char
index|[]
name|hexChars
init|=
operator|new
name|char
index|[
name|bytes
operator|.
name|length
operator|*
literal|3
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|byte
name|b
range|:
name|bytes
control|)
block|{
specifier|final
name|int
name|v
init|=
name|b
operator|&
literal|0xFF
decl_stmt|;
name|hexChars
index|[
name|i
operator|++
index|]
operator|=
name|hexArray
index|[
name|v
operator|>>>
literal|4
index|]
expr_stmt|;
name|hexChars
index|[
name|i
operator|++
index|]
operator|=
name|hexArray
index|[
name|v
operator|&
literal|0x0F
index|]
expr_stmt|;
name|hexChars
index|[
name|i
operator|++
index|]
operator|=
literal|' '
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|hexChars
argument_list|)
return|;
block|}
specifier|private
name|void
name|compare
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|)
block|{
comment|// System.out.println("Method: " + m);
specifier|final
name|Code
name|code
init|=
name|method
operator|.
name|getCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|code
operator|==
literal|null
condition|)
block|{
return|return;
comment|// e.g. abstract method
block|}
specifier|final
name|byte
index|[]
name|src
init|=
name|code
operator|.
name|getCode
argument_list|()
decl_stmt|;
specifier|final
name|InstructionList
name|instructionList
init|=
operator|new
name|InstructionList
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|out
init|=
name|instructionList
operator|.
name|getByteCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|length
operator|==
name|out
operator|.
name|length
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|src
argument_list|,
name|out
argument_list|,
parameter_list|()
lambda|->
name|name
operator|+
literal|": "
operator|+
name|method
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|+
literal|": "
operator|+
name|method
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|src
operator|.
name|length
operator|+
literal|" "
operator|+
name|out
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|bytesToHex
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|bytesToHex
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|InstructionHandle
name|instructionHandle
range|:
name|instructionList
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|instructionHandle
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Array comparison failure"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testJar
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|file
argument_list|)
expr_stmt|;
try|try
init|(
name|JarFile
name|jar
init|=
operator|new
name|JarFile
argument_list|(
name|file
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|Enumeration
argument_list|<
name|JarEntry
argument_list|>
name|en
init|=
name|jar
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|JarEntry
name|jarEntry
init|=
name|en
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|jarEntry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
comment|// System.out.println("- " + name);
try|try
init|(
name|InputStream
name|inputStream
init|=
name|jar
operator|.
name|getInputStream
argument_list|(
name|jarEntry
argument_list|)
init|)
block|{
specifier|final
name|ClassParser
name|classParser
init|=
operator|new
name|ClassParser
argument_list|(
name|inputStream
argument_list|,
name|name
argument_list|)
decl_stmt|;
specifier|final
name|JavaClass
name|javaClass
init|=
name|classParser
operator|.
name|parse
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|javaClass
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|compare
argument_list|(
name|name
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"org.apache.bcel.generic.JavaHome#streamJarPath"
argument_list|)
specifier|public
name|void
name|testJdkJars
parameter_list|(
specifier|final
name|Path
name|jarPath
parameter_list|)
throws|throws
name|Exception
block|{
name|testJar
argument_list|(
name|jarPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"org.apache.bcel.generic.JavaHome#streamModulePath"
argument_list|)
annotation|@
name|DisabledOnJre
argument_list|(
name|value
operator|=
name|JRE
operator|.
name|JAVA_8
argument_list|)
specifier|public
name|void
name|testJdkModules
parameter_list|(
specifier|final
name|Path
name|jmodPath
parameter_list|)
throws|throws
name|Exception
block|{
name|testJar
argument_list|(
name|jmodPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"org.apache.bcel.generic.JavaHome#streamJavaHome"
argument_list|)
specifier|public
name|void
name|testJreModules
parameter_list|(
specifier|final
name|JavaHome
name|javaHome
parameter_list|)
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|SystemUtils
operator|.
name|isJavaVersionAtLeast
argument_list|(
name|JavaVersion
operator|.
name|JAVA_9
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|ModularRuntimeImage
name|mri
init|=
name|javaHome
operator|.
name|getModularRuntimeImage
argument_list|()
init|)
block|{
for|for
control|(
specifier|final
name|Path
name|path
range|:
name|mri
operator|.
name|modules
argument_list|()
control|)
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|path
argument_list|,
operator|new
name|ClassParserFilesVisitor
argument_list|(
literal|"*.class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

