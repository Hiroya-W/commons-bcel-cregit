begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|InstructionHandleTestCase
block|{
comment|// Test that setInstruction only allows Instructions that are not BranchInstructions
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ClassGenException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testsetInstructionNull
parameter_list|()
block|{
name|InstructionHandle
name|ih
init|=
name|InstructionHandle
operator|.
name|getInstructionHandle
argument_list|(
operator|new
name|NOP
argument_list|()
argument_list|)
decl_stmt|;
comment|// have to start with a valid non BI
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ih
argument_list|)
expr_stmt|;
name|ih
operator|.
name|setInstruction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ih
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testsetInstructionI
parameter_list|()
block|{
name|InstructionHandle
name|ih
init|=
name|InstructionHandle
operator|.
name|getInstructionHandle
argument_list|(
operator|new
name|NOP
argument_list|()
argument_list|)
decl_stmt|;
comment|// have to start with a valid non BI
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ih
argument_list|)
expr_stmt|;
name|ih
operator|.
name|setInstruction
argument_list|(
operator|new
name|NOP
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ih
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ClassGenException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testsetInstructionnotI
parameter_list|()
block|{
name|InstructionHandle
name|ih
init|=
name|InstructionHandle
operator|.
name|getInstructionHandle
argument_list|(
operator|new
name|NOP
argument_list|()
argument_list|)
decl_stmt|;
comment|// have to start with a valid non BI
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ih
argument_list|)
expr_stmt|;
name|ih
operator|.
name|setInstruction
argument_list|(
operator|new
name|GOTO
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ih
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ClassGenException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetIHnull
parameter_list|()
block|{
name|InstructionHandle
operator|.
name|getInstructionHandle
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBCEL195
parameter_list|()
block|{
name|InstructionList
name|il
init|=
operator|new
name|InstructionList
argument_list|()
decl_stmt|;
name|InstructionHandle
name|ih
init|=
name|il
operator|.
name|append
argument_list|(
name|InstructionConstants
operator|.
name|NOP
argument_list|)
decl_stmt|;
operator|new
name|TABLESWITCH
argument_list|(
operator|new
name|int
index|[
literal|0
index|]
argument_list|,
operator|new
name|InstructionHandle
index|[
literal|0
index|]
argument_list|,
name|ih
argument_list|)
expr_stmt|;
operator|new
name|TABLESWITCH
argument_list|(
operator|new
name|int
index|[
literal|0
index|]
argument_list|,
operator|new
name|InstructionHandle
index|[
literal|0
index|]
argument_list|,
name|ih
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

