begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|bcel6
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
specifier|public
class|class
name|BCELifierTestCase
block|{
comment|// A bit of a hack - we use the same property as for the perf test for now
specifier|private
specifier|static
specifier|final
name|boolean
name|REPORT
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"PerformanceTest.report"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
empty_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|REPORT
argument_list|)
expr_stmt|;
comment|// set to false by pom so this will only run on demand
name|JavaClass
name|java_class
init|=
name|BCELifier
operator|.
name|getJavaClass
argument_list|(
literal|"Java8Example"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|java_class
argument_list|)
expr_stmt|;
name|BCELifier
name|bcelifier
init|=
operator|new
name|BCELifier
argument_list|(
name|java_class
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|bcelifier
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

