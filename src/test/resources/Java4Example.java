begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|Java4Example
block|{
comment|/*      * Example for RET instruction      */
specifier|public
specifier|static
name|void
name|serialize
parameter_list|(
name|Serializable
name|obj
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|outputStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The OutputStream must not be null"
argument_list|)
throw|;
block|}
name|ObjectOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// stream closed in the finally
name|out
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
name|void
name|tableSwitch
parameter_list|(
name|int
name|inputValue
parameter_list|)
block|{
switch|switch
condition|(
name|inputValue
condition|)
block|{
case|case
literal|1
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"One"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Two"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Three"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
name|void
name|lookupSwitch
parameter_list|(
name|int
name|inputValue
parameter_list|)
block|{
switch|switch
condition|(
name|inputValue
condition|)
block|{
case|case
literal|1
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"One"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1000
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"One thousand"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1000000
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"One million"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

