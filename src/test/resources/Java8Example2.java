begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|Java8Example2
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1234567891234567891L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|E
init|=
literal|2.7182818284590452354f
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|PI
init|=
literal|3.14159265358979323846
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|DOT
init|=
literal|'.'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|PORT
init|=
literal|22
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ICONST_M1
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ICONST_0
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ICONST_1
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ICONST_2
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ICONST_3
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ICONST_4
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ICONST_5
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|LCONST_0
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|LCONST_1
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|FCONST_0
init|=
literal|0f
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|FCONST_1
init|=
literal|1f
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|FCONST_2
init|=
literal|2f
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|DCONST_0
init|=
literal|0d
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|DCONST_1
init|=
literal|1d
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Float
name|FNULL
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Double
name|DNULL
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Long
name|LNULL
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|INVOKESTATIC
init|=
operator|(
name|byte
operator|)
literal|184
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
index|[]
index|[]
name|MULTI_ARRAY
init|=
block|{
block|{
literal|0
block|}
block|,
block|{
literal|1
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
index|[]
index|[]
name|MULTI_ARRAY2
init|=
operator|new
name|int
index|[
literal|2
index|]
index|[
literal|2
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|transient
specifier|volatile
name|StringBuffer
name|STRING_BUFFER
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|public
specifier|synchronized
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|hello
argument_list|(
literal|"Hello"
argument_list|,
literal|"World"
argument_list|,
literal|"hi"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|check
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
operator|(
name|args
operator|instanceof
name|String
index|[]
operator|)
operator|||
name|args
operator|.
name|getClass
argument_list|()
operator|!=
name|String
index|[]
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|()
throw|;
block|}
block|}
name|void
name|hello
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|check
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|stream
argument_list|(
name|args
argument_list|)
operator|.
name|forEach
argument_list|(
name|System
operator|.
name|out
operator|::
name|println
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|ICONST_M1
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|ICONST_0
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|ICONST_1
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|ICONST_2
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|ICONST_3
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|ICONST_4
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|ICONST_5
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|LCONST_0
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|LCONST_1
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|FCONST_0
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|FCONST_1
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|FCONST_2
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|DCONST_0
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|DCONST_1
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|FNULL
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|DNULL
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|LNULL
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|INVOKESTATIC
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|frem
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|frem
argument_list|(
name|Float
operator|.
name|NaN
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|frem
argument_list|(
name|E
argument_list|,
name|E
argument_list|)
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|drem
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|drem
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|drem
argument_list|(
name|PI
argument_list|,
name|PI
argument_list|)
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|serialVersionUID
argument_list|)
expr_stmt|;
name|STRING_BUFFER
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|deepToString
argument_list|(
name|MULTI_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|drem
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
block|{
return|return
name|a
operator|%
name|b
return|;
block|}
name|float
name|frem
parameter_list|(
name|float
name|a
parameter_list|,
name|float
name|b
parameter_list|)
block|{
return|return
name|a
operator|%
name|b
return|;
block|}
block|}
end_class

end_unit

