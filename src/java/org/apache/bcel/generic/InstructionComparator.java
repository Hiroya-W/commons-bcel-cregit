begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_comment
comment|/**  * Equality of instructions isn't clearly to be defined. You might  * wish, for example, to compare whether instructions have the same  * meaning. E.g., whether two INVOKEVIRTUALs describe the same  * call.<br>The DEFAULT comparator however, considers two instructions  * to be equal if they have same opcode and point to the same indexes  * (if any) in the constant pool or the same local variable index. Branch  * instructions must have the same target.  *  * @see Instruction  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  */
end_comment

begin_interface
specifier|public
interface|interface
name|InstructionComparator
block|{
specifier|public
specifier|static
specifier|final
name|InstructionComparator
name|DEFAULT
init|=
operator|new
name|InstructionComparator
argument_list|()
block|{
specifier|public
name|boolean
name|equals
parameter_list|(
name|Instruction
name|i1
parameter_list|,
name|Instruction
name|i2
parameter_list|)
block|{
if|if
condition|(
name|i1
operator|.
name|opcode
operator|==
name|i2
operator|.
name|opcode
condition|)
block|{
if|if
condition|(
name|i1
operator|instanceof
name|Select
condition|)
block|{
name|InstructionHandle
index|[]
name|t1
init|=
operator|(
operator|(
name|Select
operator|)
name|i1
operator|)
operator|.
name|getTargets
argument_list|()
decl_stmt|;
name|InstructionHandle
index|[]
name|t2
init|=
operator|(
operator|(
name|Select
operator|)
name|i2
operator|)
operator|.
name|getTargets
argument_list|()
decl_stmt|;
if|if
condition|(
name|t1
operator|.
name|length
operator|==
name|t2
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t1
index|[
name|i
index|]
operator|!=
name|t2
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
if|else if
condition|(
name|i1
operator|instanceof
name|BranchInstruction
condition|)
block|{
return|return
operator|(
operator|(
name|BranchInstruction
operator|)
name|i1
operator|)
operator|.
name|target
operator|==
operator|(
operator|(
name|BranchInstruction
operator|)
name|i2
operator|)
operator|.
name|target
return|;
block|}
if|else if
condition|(
name|i1
operator|instanceof
name|ConstantPushInstruction
condition|)
block|{
return|return
operator|(
operator|(
name|ConstantPushInstruction
operator|)
name|i1
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ConstantPushInstruction
operator|)
name|i2
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|i1
operator|instanceof
name|IndexedInstruction
condition|)
block|{
return|return
operator|(
operator|(
name|IndexedInstruction
operator|)
name|i1
operator|)
operator|.
name|getIndex
argument_list|()
operator|==
operator|(
operator|(
name|IndexedInstruction
operator|)
name|i2
operator|)
operator|.
name|getIndex
argument_list|()
return|;
block|}
if|else if
condition|(
name|i1
operator|instanceof
name|NEWARRAY
condition|)
block|{
return|return
operator|(
operator|(
name|NEWARRAY
operator|)
name|i1
operator|)
operator|.
name|getTypecode
argument_list|()
operator|==
operator|(
operator|(
name|NEWARRAY
operator|)
name|i2
operator|)
operator|.
name|getTypecode
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|boolean
name|equals
parameter_list|(
name|Instruction
name|i1
parameter_list|,
name|Instruction
name|i2
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

