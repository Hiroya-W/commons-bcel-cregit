begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_comment
comment|/**   * Denotes reference such as java.lang.String.  *  * @version $Id$  * @author<A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
class|class
name|ObjectType
extends|extends
name|ReferenceType
block|{
specifier|private
name|String
name|class_name
decl_stmt|;
comment|// Class name of type
comment|/**    * @param class_name fully qualified class name, e.g. java.lang.String    */
specifier|public
name|ObjectType
parameter_list|(
name|String
name|class_name
parameter_list|)
block|{
name|super
argument_list|(
name|Constants
operator|.
name|T_REFERENCE
argument_list|,
literal|"L"
operator|+
name|class_name
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|this
operator|.
name|class_name
operator|=
name|class_name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
block|}
comment|/** @return name of referenced class    */
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|class_name
return|;
block|}
comment|/** @return a hash code value for the object.    */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|class_name
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/** @return true if both type objects refer to the same class.    */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|instanceof
name|ObjectType
operator|)
condition|?
operator|(
operator|(
name|ObjectType
operator|)
name|type
operator|)
operator|.
name|class_name
operator|.
name|equals
argument_list|(
name|class_name
argument_list|)
else|:
literal|false
return|;
block|}
comment|/**    * If "this" doesn't reference a class, it references an interface    * or a non-existant entity.    * @deprecated this method returns an inaccurate result    *   if the class or interface referenced cannot    *   be found: use referencesClassExact() instead    */
specifier|public
name|boolean
name|referencesClass
parameter_list|()
block|{
try|try
block|{
name|JavaClass
name|jc
init|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|class_name
argument_list|)
decl_stmt|;
return|return
name|jc
operator|.
name|isClass
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * If "this" doesn't reference an interface, it references a class    * or a non-existant entity.    * @deprecated this method returns an inaccurate result    *   if the class or interface referenced cannot    *   be found: use referencesInterfaceExact() instead    */
specifier|public
name|boolean
name|referencesInterface
parameter_list|()
block|{
try|try
block|{
name|JavaClass
name|jc
init|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|class_name
argument_list|)
decl_stmt|;
return|return
operator|!
name|jc
operator|.
name|isClass
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Return true if this type references a class,    * false if it references an interface.    * @return true if the type references a class, false if    *   it references an interface    * @throws ClassNotFoundException if the class or interface    *   referenced by this type can't be found    */
specifier|public
name|boolean
name|referencesClassExact
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|JavaClass
name|jc
init|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|class_name
argument_list|)
decl_stmt|;
return|return
name|jc
operator|.
name|isClass
argument_list|()
return|;
block|}
comment|/**    * Return true if this type references an interface,    * false if it references a class.    * @return true if the type references an interface, false if    *   it references a class    * @throws ClassNotFoundException if the class or interface    *   referenced by this type can't be found    */
specifier|public
name|boolean
name|referencesInterfaceExact
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|JavaClass
name|jc
init|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|class_name
argument_list|)
decl_stmt|;
return|return
operator|!
name|jc
operator|.
name|isClass
argument_list|()
return|;
block|}
comment|/**    * Return true if this type is a subclass of given ObjectType.    * @throws ClassNotFoundException if any of this class's superclasses    *  can't be found    */
specifier|public
name|boolean
name|subclassOf
parameter_list|(
name|ObjectType
name|superclass
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|this
operator|.
name|referencesInterface
argument_list|()
operator|||
name|superclass
operator|.
name|referencesInterface
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|Repository
operator|.
name|instanceOf
argument_list|(
name|this
operator|.
name|class_name
argument_list|,
name|superclass
operator|.
name|class_name
argument_list|)
return|;
block|}
comment|/**    * Java Virtual Machine Specification edition 2, ยง 5.4.4 Access Control    * @throws ClassNotFoundException if the class referenced by this type    *   can't be found    */
specifier|public
name|boolean
name|accessibleTo
parameter_list|(
name|ObjectType
name|accessor
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|JavaClass
name|jc
init|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|class_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|jc
operator|.
name|isPublic
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|JavaClass
name|acc
init|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|accessor
operator|.
name|class_name
argument_list|)
decl_stmt|;
return|return
name|acc
operator|.
name|getPackageName
argument_list|()
operator|.
name|equals
argument_list|(
name|jc
operator|.
name|getPackageName
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

