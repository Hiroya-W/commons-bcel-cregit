begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_comment
comment|/**   * Abstract super class for all Java byte codes.  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Instruction
implements|implements
name|Cloneable
implements|,
name|Serializable
block|{
specifier|protected
name|short
name|length
init|=
literal|1
decl_stmt|;
comment|// Length of instruction in bytes
specifier|protected
name|short
name|opcode
init|=
operator|-
literal|1
decl_stmt|;
comment|// Opcode number
specifier|private
specifier|static
name|InstructionComparator
name|cmp
init|=
name|InstructionComparator
operator|.
name|DEFAULT
decl_stmt|;
comment|/**    * Empty constructor needed for the Class.newInstance() statement in    * Instruction.readInstruction(). Not to be used otherwise.    */
name|Instruction
parameter_list|()
block|{
block|}
specifier|public
name|Instruction
parameter_list|(
name|short
name|opcode
parameter_list|,
name|short
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|opcode
operator|=
name|opcode
expr_stmt|;
block|}
comment|/**    * Dump instruction as byte code to stream out.    * @param out Output stream    */
specifier|public
name|void
name|dump
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|opcode
argument_list|)
expr_stmt|;
comment|// Common for all instructions
block|}
comment|/** @return name of instruction, i.e., opcode name    */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|OPCODE_NAMES
index|[
name|opcode
index|]
return|;
block|}
comment|/**    * Long output format:    *    *&lt;name of opcode&gt; "["&lt;opcode number&gt;"]"     * "("&lt;length of instruction&gt;")"    *    * @param verbose long/short format switch    * @return mnemonic for instruction    */
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
if|if
condition|(
name|verbose
condition|)
return|return
name|getName
argument_list|()
operator|+
literal|"["
operator|+
name|opcode
operator|+
literal|"]("
operator|+
name|length
operator|+
literal|")"
return|;
else|else
return|return
name|getName
argument_list|()
return|;
block|}
comment|/**    * @return mnemonic for instruction in verbose format    */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**    * @return mnemonic for instruction with sumbolic references resolved    */
specifier|public
name|String
name|toString
parameter_list|(
name|ConstantPool
name|cp
parameter_list|)
block|{
return|return
name|toString
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * Use with caution, since `BranchInstruction's have a `target' reference which    * is not copied correctly (only basic types are). This also applies for     * `Select' instructions with their multiple branch targets.    *    * @see BranchInstruction    * @return (shallow) copy of an instruction    */
specifier|public
name|Instruction
name|copy
parameter_list|()
block|{
name|Instruction
name|i
init|=
literal|null
decl_stmt|;
comment|// "Constant" instruction, no need to duplicate
if|if
condition|(
name|InstructionConstants
operator|.
name|INSTRUCTIONS
index|[
name|this
operator|.
name|getOpcode
argument_list|()
index|]
operator|!=
literal|null
condition|)
name|i
operator|=
name|this
expr_stmt|;
else|else
block|{
try|try
block|{
name|i
operator|=
operator|(
name|Instruction
operator|)
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|i
return|;
block|}
comment|/**    * Read needed data (e.g. index) from file.    *    * @param bytes byte sequence to read from    * @param wide "wide" instruction flag    */
specifier|protected
name|void
name|initFromFile
parameter_list|(
name|ByteSequence
name|bytes
parameter_list|,
name|boolean
name|wide
parameter_list|)
throws|throws
name|IOException
block|{
block|}
comment|/**    * Read an instruction from (byte code) input stream and return the    * appropiate object.    *    * @param file file to read from    * @return instruction object being read    */
specifier|public
specifier|static
specifier|final
name|Instruction
name|readInstruction
parameter_list|(
name|ByteSequence
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|wide
init|=
literal|false
decl_stmt|;
name|short
name|opcode
init|=
operator|(
name|short
operator|)
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|Instruction
name|obj
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|opcode
operator|==
name|Constants
operator|.
name|WIDE
condition|)
block|{
comment|// Read next opcode after wide byte
name|wide
operator|=
literal|true
expr_stmt|;
name|opcode
operator|=
operator|(
name|short
operator|)
name|bytes
operator|.
name|readUnsignedByte
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|InstructionConstants
operator|.
name|INSTRUCTIONS
index|[
name|opcode
index|]
operator|!=
literal|null
condition|)
return|return
name|InstructionConstants
operator|.
name|INSTRUCTIONS
index|[
name|opcode
index|]
return|;
comment|// Used predefined immutable object, if available
comment|/* Find appropiate class, instantiate an (empty) instruction object      * and initialize it by hand.      */
name|Class
name|clazz
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|(
name|opcode
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
comment|// If a class by that name does not exist, the opcode is illegal.
comment|// Note that IMPDEP1, IMPDEP2, BREAKPOINT are also illegal in a sense.
throw|throw
operator|new
name|ClassGenException
argument_list|(
literal|"Illegal opcode detected."
argument_list|)
throw|;
block|}
try|try
block|{
name|obj
operator|=
operator|(
name|Instruction
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|wide
operator|&&
operator|!
operator|(
operator|(
name|obj
operator|instanceof
name|LocalVariableInstruction
operator|)
operator|||
operator|(
name|obj
operator|instanceof
name|IINC
operator|)
operator|||
operator|(
name|obj
operator|instanceof
name|RET
operator|)
operator|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Illegal opcode after wide: "
operator|+
name|opcode
argument_list|)
throw|;
name|obj
operator|.
name|setOpcode
argument_list|(
name|opcode
argument_list|)
expr_stmt|;
name|obj
operator|.
name|initFromFile
argument_list|(
name|bytes
argument_list|,
name|wide
argument_list|)
expr_stmt|;
comment|// Do further initializations, if any
comment|// Byte code offset set in InstructionList
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ClassGenException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|obj
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|className
parameter_list|(
name|short
name|opcode
parameter_list|)
block|{
name|String
name|name
init|=
name|Constants
operator|.
name|OPCODE_NAMES
index|[
name|opcode
index|]
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
comment|/* ICONST_0, etc. will be shortened to ICONST, etc., since ICONST_0 and the like      * are not implemented (directly).      */
try|try
block|{
name|int
name|len
init|=
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
name|char
name|ch1
init|=
name|name
operator|.
name|charAt
argument_list|(
name|len
operator|-
literal|2
argument_list|)
decl_stmt|,
name|ch2
init|=
name|name
operator|.
name|charAt
argument_list|(
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ch1
operator|==
literal|'_'
operator|)
operator|&&
operator|(
name|ch2
operator|>=
literal|'0'
operator|)
operator|&&
operator|(
name|ch2
operator|<=
literal|'5'
operator|)
condition|)
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
operator|-
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"ICONST_M1"
argument_list|)
condition|)
comment|// Special case
name|name
operator|=
literal|"ICONST"
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StringIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|"org.apache.bcel.generic."
operator|+
name|name
return|;
block|}
comment|/**    * This method also gives right results for instructions whose    * effect on the stack depends on the constant pool entry they    * reference.    *  @return Number of words consumed from stack by this instruction,    * or Constants.UNPREDICTABLE, if this can not be computed statically    */
specifier|public
name|int
name|consumeStack
parameter_list|(
name|ConstantPoolGen
name|cpg
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|CONSUME_STACK
index|[
name|opcode
index|]
return|;
block|}
comment|/**    * This method also gives right results for instructions whose    * effect on the stack depends on the constant pool entry they    * reference.    * @return Number of words produced onto stack by this instruction,    * or Constants.UNPREDICTABLE, if this can not be computed statically    */
specifier|public
name|int
name|produceStack
parameter_list|(
name|ConstantPoolGen
name|cpg
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|PRODUCE_STACK
index|[
name|opcode
index|]
return|;
block|}
comment|/**    * @return this instructions opcode    */
specifier|public
name|short
name|getOpcode
parameter_list|()
block|{
return|return
name|opcode
return|;
block|}
comment|/**    * @return length (in bytes) of instruction    */
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**    * Needed in readInstruction.    */
specifier|private
name|void
name|setOpcode
parameter_list|(
name|short
name|opcode
parameter_list|)
block|{
name|this
operator|.
name|opcode
operator|=
name|opcode
expr_stmt|;
block|}
comment|/** Some instructions may be reused, so don't do anything by default.    */
name|void
name|dispose
parameter_list|()
block|{
block|}
comment|/**    * Call corresponding visitor method(s). The order is:    * Call visitor methods of implemented interfaces first, then    * call methods according to the class hierarchy in descending order,    * i.e., the most specific visitXXX() call comes last.    *    * @param v Visitor object    */
specifier|public
specifier|abstract
name|void
name|accept
parameter_list|(
name|Visitor
name|v
parameter_list|)
function_decl|;
comment|/** Get Comparator object used in the equals() method to determine    * equality of instructions.    *    * @return currently used comparator for equals()    */
specifier|public
specifier|static
name|InstructionComparator
name|getComparator
parameter_list|()
block|{
return|return
name|cmp
return|;
block|}
comment|/** Set comparator to be used for equals().    */
specifier|public
specifier|static
name|void
name|setComparator
parameter_list|(
name|InstructionComparator
name|c
parameter_list|)
block|{
name|cmp
operator|=
name|c
expr_stmt|;
block|}
comment|/** Check for equality, delegated to comparator    * @return true if that is an Instruction and has the same opcode    */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
return|return
operator|(
name|that
operator|instanceof
name|Instruction
operator|)
condition|?
name|cmp
operator|.
name|equals
argument_list|(
name|this
argument_list|,
operator|(
name|Instruction
operator|)
name|that
argument_list|)
else|:
literal|false
return|;
block|}
block|}
end_class

end_unit

