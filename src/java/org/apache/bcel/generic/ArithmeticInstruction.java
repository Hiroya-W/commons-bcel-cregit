begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Super class for the family of arithmetic instructions.  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ArithmeticInstruction
extends|extends
name|Instruction
implements|implements
name|TypedInstruction
implements|,
name|StackProducer
implements|,
name|StackConsumer
block|{
comment|/**    * Empty constructor needed for the Class.newInstance() statement in    * Instruction.readInstruction(). Not to be used otherwise.    */
name|ArithmeticInstruction
parameter_list|()
block|{
block|}
comment|/**    * @param opcode of instruction    */
specifier|protected
name|ArithmeticInstruction
parameter_list|(
name|short
name|opcode
parameter_list|)
block|{
name|super
argument_list|(
name|opcode
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/** @return type associated with the instruction    */
specifier|public
name|Type
name|getType
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|)
block|{
switch|switch
condition|(
name|opcode
condition|)
block|{
case|case
name|Constants
operator|.
name|DADD
case|:
case|case
name|Constants
operator|.
name|DDIV
case|:
case|case
name|Constants
operator|.
name|DMUL
case|:
case|case
name|Constants
operator|.
name|DNEG
case|:
case|case
name|Constants
operator|.
name|DREM
case|:
case|case
name|Constants
operator|.
name|DSUB
case|:
return|return
name|Type
operator|.
name|DOUBLE
return|;
case|case
name|Constants
operator|.
name|FADD
case|:
case|case
name|Constants
operator|.
name|FDIV
case|:
case|case
name|Constants
operator|.
name|FMUL
case|:
case|case
name|Constants
operator|.
name|FNEG
case|:
case|case
name|Constants
operator|.
name|FREM
case|:
case|case
name|Constants
operator|.
name|FSUB
case|:
return|return
name|Type
operator|.
name|FLOAT
return|;
case|case
name|Constants
operator|.
name|IADD
case|:
case|case
name|Constants
operator|.
name|IAND
case|:
case|case
name|Constants
operator|.
name|IDIV
case|:
case|case
name|Constants
operator|.
name|IMUL
case|:
case|case
name|Constants
operator|.
name|INEG
case|:
case|case
name|Constants
operator|.
name|IOR
case|:
case|case
name|Constants
operator|.
name|IREM
case|:
case|case
name|Constants
operator|.
name|ISHL
case|:
case|case
name|Constants
operator|.
name|ISHR
case|:
case|case
name|Constants
operator|.
name|ISUB
case|:
case|case
name|Constants
operator|.
name|IUSHR
case|:
case|case
name|Constants
operator|.
name|IXOR
case|:
return|return
name|Type
operator|.
name|INT
return|;
case|case
name|Constants
operator|.
name|LADD
case|:
case|case
name|Constants
operator|.
name|LAND
case|:
case|case
name|Constants
operator|.
name|LDIV
case|:
case|case
name|Constants
operator|.
name|LMUL
case|:
case|case
name|Constants
operator|.
name|LNEG
case|:
case|case
name|Constants
operator|.
name|LOR
case|:
case|case
name|Constants
operator|.
name|LREM
case|:
case|case
name|Constants
operator|.
name|LSHL
case|:
case|case
name|Constants
operator|.
name|LSHR
case|:
case|case
name|Constants
operator|.
name|LSUB
case|:
case|case
name|Constants
operator|.
name|LUSHR
case|:
case|case
name|Constants
operator|.
name|LXOR
case|:
return|return
name|Type
operator|.
name|LONG
return|;
default|default:
comment|// Never reached
throw|throw
operator|new
name|ClassGenException
argument_list|(
literal|"Unknown type "
operator|+
name|opcode
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

