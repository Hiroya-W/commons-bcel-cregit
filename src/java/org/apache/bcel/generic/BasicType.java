begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**   * Denotes basic type such as int.  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BasicType
extends|extends
name|Type
block|{
comment|/**    * Constructor for basic types such as int, long, `void'    *    * @param type one of T_INT, T_BOOLEAN, ..., T_VOID    * @see org.apache.bcel.Constants    */
name|BasicType
parameter_list|(
name|byte
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|Constants
operator|.
name|SHORT_TYPE_NAMES
index|[
name|type
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|type
operator|<
name|Constants
operator|.
name|T_BOOLEAN
operator|)
operator|||
operator|(
name|type
operator|>
name|Constants
operator|.
name|T_VOID
operator|)
condition|)
throw|throw
operator|new
name|ClassGenException
argument_list|(
literal|"Invalid type: "
operator|+
name|type
argument_list|)
throw|;
block|}
specifier|public
specifier|static
specifier|final
name|BasicType
name|getType
parameter_list|(
name|byte
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Constants
operator|.
name|T_VOID
case|:
return|return
name|VOID
return|;
case|case
name|Constants
operator|.
name|T_BOOLEAN
case|:
return|return
name|BOOLEAN
return|;
case|case
name|Constants
operator|.
name|T_BYTE
case|:
return|return
name|BYTE
return|;
case|case
name|Constants
operator|.
name|T_SHORT
case|:
return|return
name|SHORT
return|;
case|case
name|Constants
operator|.
name|T_CHAR
case|:
return|return
name|CHAR
return|;
case|case
name|Constants
operator|.
name|T_INT
case|:
return|return
name|INT
return|;
case|case
name|Constants
operator|.
name|T_LONG
case|:
return|return
name|LONG
return|;
case|case
name|Constants
operator|.
name|T_DOUBLE
case|:
return|return
name|DOUBLE
return|;
case|case
name|Constants
operator|.
name|T_FLOAT
case|:
return|return
name|FLOAT
return|;
default|default:
throw|throw
operator|new
name|ClassGenException
argument_list|(
literal|"Invalid type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/** @return true if both type objects refer to the same type    */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|instanceof
name|BasicType
operator|)
condition|?
operator|(
operator|(
name|BasicType
operator|)
name|type
operator|)
operator|.
name|type
operator|==
name|this
operator|.
name|type
else|:
literal|false
return|;
block|}
block|}
end_class

end_unit

