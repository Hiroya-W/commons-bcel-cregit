begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|*
import|;
end_import

begin_comment
comment|/**   * This class represents an exception handler, i.e., specifies the  region where  * a handler is active and an instruction where the actual handling is done.  * pool as parameters. Opposed to the JVM specification the end of the handled  * region is set to be inclusive, i.e. all instructions between start and end  * are protected including the start and end instructions (handles) themselves.  * The end of the region is automatically mapped to be exclusive when calling  * getCodeException(), i.e., there is no difference semantically.  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  * @see     MethodGen  * @see     CodeException  * @see     InstructionHandle  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CodeExceptionGen
implements|implements
name|InstructionTargeter
implements|,
name|Cloneable
block|{
specifier|private
name|InstructionHandle
name|start_pc
decl_stmt|;
specifier|private
name|InstructionHandle
name|end_pc
decl_stmt|;
specifier|private
name|InstructionHandle
name|handler_pc
decl_stmt|;
specifier|private
name|ObjectType
name|catch_type
decl_stmt|;
comment|/**    * Add an exception handler, i.e., specify region where a handler is active and an    * instruction where the actual handling is done.    *    * @param start_pc Start of handled region (inclusive)    * @param end_pc End of handled region (inclusive)    * @param handler_pc Where handling is done    * @param catch_type which exception is handled, null for ANY    */
specifier|public
name|CodeExceptionGen
parameter_list|(
name|InstructionHandle
name|start_pc
parameter_list|,
name|InstructionHandle
name|end_pc
parameter_list|,
name|InstructionHandle
name|handler_pc
parameter_list|,
name|ObjectType
name|catch_type
parameter_list|)
block|{
name|setStartPC
argument_list|(
name|start_pc
argument_list|)
expr_stmt|;
name|setEndPC
argument_list|(
name|end_pc
argument_list|)
expr_stmt|;
name|setHandlerPC
argument_list|(
name|handler_pc
argument_list|)
expr_stmt|;
name|this
operator|.
name|catch_type
operator|=
name|catch_type
expr_stmt|;
block|}
comment|/**    * Get CodeException object.<BR>    *    * This relies on that the instruction list has already been dumped    * to byte code or or that the `setPositions' methods has been    * called for the instruction list.    *    * @param cp constant pool    */
specifier|public
name|CodeException
name|getCodeException
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|)
block|{
return|return
operator|new
name|CodeException
argument_list|(
name|start_pc
operator|.
name|getPosition
argument_list|()
argument_list|,
name|end_pc
operator|.
name|getPosition
argument_list|()
operator|+
name|end_pc
operator|.
name|getInstruction
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
name|handler_pc
operator|.
name|getPosition
argument_list|()
argument_list|,
operator|(
name|catch_type
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|cp
operator|.
name|addClass
argument_list|(
name|catch_type
argument_list|)
argument_list|)
return|;
block|}
comment|/* Set start of handler     * @param start_pc Start of handled region (inclusive)    */
specifier|public
name|void
name|setStartPC
parameter_list|(
name|InstructionHandle
name|start_pc
parameter_list|)
block|{
name|BranchInstruction
operator|.
name|notifyTarget
argument_list|(
name|this
operator|.
name|start_pc
argument_list|,
name|start_pc
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|start_pc
operator|=
name|start_pc
expr_stmt|;
block|}
comment|/* Set end of handler     * @param end_pc End of handled region (inclusive)    */
specifier|public
name|void
name|setEndPC
parameter_list|(
name|InstructionHandle
name|end_pc
parameter_list|)
block|{
name|BranchInstruction
operator|.
name|notifyTarget
argument_list|(
name|this
operator|.
name|end_pc
argument_list|,
name|end_pc
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|end_pc
operator|=
name|end_pc
expr_stmt|;
block|}
comment|/* Set handler code    * @param handler_pc Start of handler    */
specifier|public
name|void
name|setHandlerPC
parameter_list|(
name|InstructionHandle
name|handler_pc
parameter_list|)
block|{
name|BranchInstruction
operator|.
name|notifyTarget
argument_list|(
name|this
operator|.
name|handler_pc
argument_list|,
name|handler_pc
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|handler_pc
operator|=
name|handler_pc
expr_stmt|;
block|}
comment|/**    * @param old_ih old target, either start or end    * @param new_ih new target    */
specifier|public
name|void
name|updateTarget
parameter_list|(
name|InstructionHandle
name|old_ih
parameter_list|,
name|InstructionHandle
name|new_ih
parameter_list|)
block|{
name|boolean
name|targeted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|start_pc
operator|==
name|old_ih
condition|)
block|{
name|targeted
operator|=
literal|true
expr_stmt|;
name|setStartPC
argument_list|(
name|new_ih
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|end_pc
operator|==
name|old_ih
condition|)
block|{
name|targeted
operator|=
literal|true
expr_stmt|;
name|setEndPC
argument_list|(
name|new_ih
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler_pc
operator|==
name|old_ih
condition|)
block|{
name|targeted
operator|=
literal|true
expr_stmt|;
name|setHandlerPC
argument_list|(
name|new_ih
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|targeted
condition|)
throw|throw
operator|new
name|ClassGenException
argument_list|(
literal|"Not targeting "
operator|+
name|old_ih
operator|+
literal|", but {"
operator|+
name|start_pc
operator|+
literal|", "
operator|+
name|end_pc
operator|+
literal|", "
operator|+
name|handler_pc
operator|+
literal|"}"
argument_list|)
throw|;
block|}
comment|/**    * @return true, if ih is target of this handler    */
specifier|public
name|boolean
name|containsTarget
parameter_list|(
name|InstructionHandle
name|ih
parameter_list|)
block|{
return|return
operator|(
name|start_pc
operator|==
name|ih
operator|)
operator|||
operator|(
name|end_pc
operator|==
name|ih
operator|)
operator|||
operator|(
name|handler_pc
operator|==
name|ih
operator|)
return|;
block|}
comment|/** Sets the type of the Exception to catch. Set 'null' for ANY. */
specifier|public
name|void
name|setCatchType
parameter_list|(
name|ObjectType
name|catch_type
parameter_list|)
block|{
name|this
operator|.
name|catch_type
operator|=
name|catch_type
expr_stmt|;
block|}
comment|/** Gets the type of the Exception to catch, 'null' for ANY. */
specifier|public
name|ObjectType
name|getCatchType
parameter_list|()
block|{
return|return
name|catch_type
return|;
block|}
comment|/** @return start of handled region (inclusive)    */
specifier|public
name|InstructionHandle
name|getStartPC
parameter_list|()
block|{
return|return
name|start_pc
return|;
block|}
comment|/** @return end of handled region (inclusive)    */
specifier|public
name|InstructionHandle
name|getEndPC
parameter_list|()
block|{
return|return
name|end_pc
return|;
block|}
comment|/** @return start of handler    */
specifier|public
name|InstructionHandle
name|getHandlerPC
parameter_list|()
block|{
return|return
name|handler_pc
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CodeExceptionGen("
operator|+
name|start_pc
operator|+
literal|", "
operator|+
name|end_pc
operator|+
literal|", "
operator|+
name|handler_pc
operator|+
literal|")"
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
try|try
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

