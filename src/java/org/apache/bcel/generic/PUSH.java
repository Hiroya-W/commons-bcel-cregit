begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**   * Wrapper class for push operations, which are implemented either as BIPUSH,  * LDC or xCONST_n instructions.  *  * @version $Id$  * @author<A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PUSH
implements|implements
name|CompoundInstruction
implements|,
name|VariableLengthInstruction
implements|,
name|InstructionConstants
block|{
specifier|private
name|Instruction
name|instruction
decl_stmt|;
comment|/**    * This constructor also applies for values of type short, char, byte     *    * @param cp Constant pool    * @param value to be pushed     */
specifier|public
name|PUSH
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
operator|-
literal|1
operator|)
operator|&&
operator|(
name|value
operator|<=
literal|5
operator|)
condition|)
comment|// Use ICONST_n
name|instruction
operator|=
name|INSTRUCTIONS
index|[
name|Constants
operator|.
name|ICONST_0
operator|+
name|value
index|]
expr_stmt|;
if|else if
condition|(
operator|(
name|value
operator|>=
operator|-
literal|128
operator|)
operator|&&
operator|(
name|value
operator|<=
literal|127
operator|)
condition|)
comment|// Use BIPUSH
name|instruction
operator|=
operator|new
name|BIPUSH
argument_list|(
operator|(
name|byte
operator|)
name|value
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|(
name|value
operator|>=
operator|-
literal|32768
operator|)
operator|&&
operator|(
name|value
operator|<=
literal|32767
operator|)
condition|)
comment|// Use SIPUSH
name|instruction
operator|=
operator|new
name|SIPUSH
argument_list|(
operator|(
name|short
operator|)
name|value
argument_list|)
expr_stmt|;
else|else
comment|// If everything fails create a Constant pool entry
name|instruction
operator|=
operator|new
name|LDC
argument_list|(
name|cp
operator|.
name|addInteger
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param cp Constant pool    * @param value to be pushed     */
specifier|public
name|PUSH
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|instruction
operator|=
name|INSTRUCTIONS
index|[
name|Constants
operator|.
name|ICONST_0
operator|+
operator|(
name|value
condition|?
literal|1
else|:
literal|0
operator|)
index|]
expr_stmt|;
block|}
comment|/**    * @param cp Constant pool    * @param value to be pushed     */
specifier|public
name|PUSH
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|,
name|float
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|0.0
condition|)
name|instruction
operator|=
name|FCONST_0
expr_stmt|;
if|else if
condition|(
name|value
operator|==
literal|1.0
condition|)
name|instruction
operator|=
name|FCONST_1
expr_stmt|;
if|else if
condition|(
name|value
operator|==
literal|2.0
condition|)
name|instruction
operator|=
name|FCONST_2
expr_stmt|;
else|else
comment|// Create a Constant pool entry
name|instruction
operator|=
operator|new
name|LDC
argument_list|(
name|cp
operator|.
name|addFloat
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param cp Constant pool    * @param value to be pushed     */
specifier|public
name|PUSH
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|,
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|0
condition|)
name|instruction
operator|=
name|LCONST_0
expr_stmt|;
if|else if
condition|(
name|value
operator|==
literal|1
condition|)
name|instruction
operator|=
name|LCONST_1
expr_stmt|;
else|else
comment|// Create a Constant pool entry
name|instruction
operator|=
operator|new
name|LDC2_W
argument_list|(
name|cp
operator|.
name|addLong
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param cp Constant pool    * @param value to be pushed     */
specifier|public
name|PUSH
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|,
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|0.0
condition|)
name|instruction
operator|=
name|DCONST_0
expr_stmt|;
if|else if
condition|(
name|value
operator|==
literal|1.0
condition|)
name|instruction
operator|=
name|DCONST_1
expr_stmt|;
else|else
comment|// Create a Constant pool entry
name|instruction
operator|=
operator|new
name|LDC2_W
argument_list|(
name|cp
operator|.
name|addDouble
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param cp Constant pool    * @param value to be pushed     */
specifier|public
name|PUSH
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|instruction
operator|=
name|ACONST_NULL
expr_stmt|;
else|else
comment|// Create a Constant pool entry
name|instruction
operator|=
operator|new
name|LDC
argument_list|(
name|cp
operator|.
name|addString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param cp Constant pool    * @param value to be pushed     */
specifier|public
name|PUSH
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|,
name|Number
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|instanceof
name|Integer
operator|)
operator|||
operator|(
name|value
operator|instanceof
name|Short
operator|)
operator|||
operator|(
name|value
operator|instanceof
name|Byte
operator|)
condition|)
name|instruction
operator|=
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|instruction
expr_stmt|;
if|else if
condition|(
name|value
operator|instanceof
name|Double
condition|)
name|instruction
operator|=
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|.
name|instruction
expr_stmt|;
if|else if
condition|(
name|value
operator|instanceof
name|Float
condition|)
name|instruction
operator|=
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
operator|.
name|instruction
expr_stmt|;
if|else if
condition|(
name|value
operator|instanceof
name|Long
condition|)
name|instruction
operator|=
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|instruction
expr_stmt|;
else|else
throw|throw
operator|new
name|ClassGenException
argument_list|(
literal|"What's this: "
operator|+
name|value
argument_list|)
throw|;
block|}
comment|/**    * @param cp Constant pool    * @param value to be pushed     */
specifier|public
name|PUSH
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|,
name|Character
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|cp
argument_list|,
operator|(
name|int
operator|)
name|value
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param cp Constant pool    * @param value to be pushed     */
specifier|public
name|PUSH
parameter_list|(
name|ConstantPoolGen
name|cp
parameter_list|,
name|Boolean
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|cp
argument_list|,
name|value
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|InstructionList
name|getInstructionList
parameter_list|()
block|{
return|return
operator|new
name|InstructionList
argument_list|(
name|instruction
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|Instruction
name|getInstruction
parameter_list|()
block|{
return|return
name|instruction
return|;
block|}
comment|/**    * @return mnemonic for instruction    */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|instruction
operator|.
name|toString
argument_list|()
operator|+
literal|" (PUSH)"
return|;
block|}
block|}
end_class

end_unit

