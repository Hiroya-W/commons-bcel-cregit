begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|*
import|;
end_import

begin_comment
comment|/**   * This class represents a line number within a method, i.e., give an instruction  * a line number corresponding to the source code line.  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  * @see     LineNumber  * @see     MethodGen  */
end_comment

begin_class
specifier|public
class|class
name|LineNumberGen
implements|implements
name|InstructionTargeter
implements|,
name|Cloneable
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|InstructionHandle
name|ih
decl_stmt|;
specifier|private
name|int
name|src_line
decl_stmt|;
comment|/**    * Create a line number.    *    * @param ih instruction handle to reference    */
specifier|public
name|LineNumberGen
parameter_list|(
name|InstructionHandle
name|ih
parameter_list|,
name|int
name|src_line
parameter_list|)
block|{
name|setInstruction
argument_list|(
name|ih
argument_list|)
expr_stmt|;
name|setSourceLine
argument_list|(
name|src_line
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return true, if ih is target of this line number    */
specifier|public
name|boolean
name|containsTarget
parameter_list|(
name|InstructionHandle
name|ih
parameter_list|)
block|{
return|return
name|this
operator|.
name|ih
operator|==
name|ih
return|;
block|}
comment|/**    * @param old_ih old target    * @param new_ih new target    */
specifier|public
name|void
name|updateTarget
parameter_list|(
name|InstructionHandle
name|old_ih
parameter_list|,
name|InstructionHandle
name|new_ih
parameter_list|)
block|{
if|if
condition|(
name|old_ih
operator|!=
name|ih
condition|)
throw|throw
operator|new
name|ClassGenException
argument_list|(
literal|"Not targeting "
operator|+
name|old_ih
operator|+
literal|", but "
operator|+
name|ih
operator|+
literal|"}"
argument_list|)
throw|;
else|else
name|setInstruction
argument_list|(
name|new_ih
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get LineNumber attribute .    *    * This relies on that the instruction list has already been dumped to byte code or    * or that the `setPositions' methods has been called for the instruction list.    */
specifier|public
name|LineNumber
name|getLineNumber
parameter_list|()
block|{
return|return
operator|new
name|LineNumber
argument_list|(
name|ih
operator|.
name|getPosition
argument_list|()
argument_list|,
name|src_line
argument_list|)
return|;
block|}
specifier|public
name|void
name|setInstruction
parameter_list|(
name|InstructionHandle
name|ih
parameter_list|)
block|{
name|BranchInstruction
operator|.
name|notifyTarget
argument_list|(
name|this
operator|.
name|ih
argument_list|,
name|ih
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|ih
operator|=
name|ih
expr_stmt|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
try|try
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|InstructionHandle
name|getInstruction
parameter_list|()
block|{
return|return
name|ih
return|;
block|}
specifier|public
name|void
name|setSourceLine
parameter_list|(
name|int
name|src_line
parameter_list|)
block|{
name|this
operator|.
name|src_line
operator|=
name|src_line
expr_stmt|;
block|}
specifier|public
name|int
name|getSourceLine
parameter_list|()
block|{
return|return
name|src_line
return|;
block|}
block|}
end_class

end_unit

