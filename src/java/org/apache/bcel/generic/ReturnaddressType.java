begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionHandle
import|;
end_import

begin_comment
comment|/**   * Returnaddress, the type JSR or JSR_W instructions push upon the stack.  *  * see vmspec2 ยง3.3.3  * @version $Id$  * @author<A HREF="http://www.inf.fu-berlin.de/~ehaase">Enver Haase</A>  */
end_comment

begin_class
specifier|public
class|class
name|ReturnaddressType
extends|extends
name|Type
block|{
specifier|public
specifier|static
specifier|final
name|ReturnaddressType
name|NO_TARGET
init|=
operator|new
name|ReturnaddressType
argument_list|()
decl_stmt|;
specifier|private
name|InstructionHandle
name|returnTarget
decl_stmt|;
comment|/**    * A Returnaddress [that doesn't know where to return to].    */
specifier|private
name|ReturnaddressType
parameter_list|()
block|{
name|super
argument_list|(
name|Constants
operator|.
name|T_ADDRESS
argument_list|,
literal|"<return address>"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a ReturnaddressType object with a target.    */
specifier|public
name|ReturnaddressType
parameter_list|(
name|InstructionHandle
name|returnTarget
parameter_list|)
block|{
name|super
argument_list|(
name|Constants
operator|.
name|T_ADDRESS
argument_list|,
literal|"<return address targeting "
operator|+
name|returnTarget
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|this
operator|.
name|returnTarget
operator|=
name|returnTarget
expr_stmt|;
block|}
comment|/**    * Returns if the two Returnaddresses refer to the same target.    */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|rat
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|rat
operator|instanceof
name|ReturnaddressType
operator|)
condition|)
return|return
literal|false
return|;
return|return
operator|(
operator|(
name|ReturnaddressType
operator|)
name|rat
operator|)
operator|.
name|returnTarget
operator|.
name|equals
argument_list|(
name|this
operator|.
name|returnTarget
argument_list|)
return|;
block|}
comment|/**    * @return the target of this ReturnaddressType    */
specifier|public
name|InstructionHandle
name|getTarget
parameter_list|()
block|{
return|return
name|returnTarget
return|;
block|}
block|}
end_class

end_unit

