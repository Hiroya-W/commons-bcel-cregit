begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_comment
comment|/**  * BranchHandle is returned by specialized InstructionList.append() whenever a  * BranchInstruction is appended. This is useful when the target of this  * instruction is not known at time of creation and must be set later  * via setTarget().  *  * @see InstructionHandle  * @see Instruction  * @see InstructionList  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BranchHandle
extends|extends
name|InstructionHandle
block|{
specifier|private
name|BranchInstruction
name|bi
decl_stmt|;
comment|// An alias in fact, but saves lots of casts
specifier|private
name|BranchHandle
parameter_list|(
name|BranchInstruction
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|bi
operator|=
name|i
expr_stmt|;
block|}
comment|/** Factory methods.    */
specifier|private
specifier|static
name|BranchHandle
name|bh_list
init|=
literal|null
decl_stmt|;
comment|// List of reusable handles
specifier|static
specifier|final
name|BranchHandle
name|getBranchHandle
parameter_list|(
name|BranchInstruction
name|i
parameter_list|)
block|{
if|if
condition|(
name|bh_list
operator|==
literal|null
condition|)
return|return
operator|new
name|BranchHandle
argument_list|(
name|i
argument_list|)
return|;
else|else
block|{
name|BranchHandle
name|bh
init|=
name|bh_list
decl_stmt|;
name|bh_list
operator|=
operator|(
name|BranchHandle
operator|)
name|bh
operator|.
name|next
expr_stmt|;
name|bh
operator|.
name|setInstruction
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|bh
return|;
block|}
block|}
comment|/** Handle adds itself to the list of resuable handles.    */
specifier|protected
name|void
name|addHandle
parameter_list|()
block|{
name|next
operator|=
name|bh_list
expr_stmt|;
name|bh_list
operator|=
name|this
expr_stmt|;
block|}
comment|/* Override InstructionHandle methods: delegate to branch instruction.    * Through this overriding all access to the private i_position field should    * be prevented.    */
specifier|public
name|int
name|getPosition
parameter_list|()
block|{
return|return
name|bi
operator|.
name|position
return|;
block|}
name|void
name|setPosition
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|i_position
operator|=
name|bi
operator|.
name|position
operator|=
name|pos
expr_stmt|;
block|}
specifier|protected
name|int
name|updatePosition
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|max_offset
parameter_list|)
block|{
name|int
name|x
init|=
name|bi
operator|.
name|updatePosition
argument_list|(
name|offset
argument_list|,
name|max_offset
argument_list|)
decl_stmt|;
name|i_position
operator|=
name|bi
operator|.
name|position
expr_stmt|;
return|return
name|x
return|;
block|}
comment|/**    * Pass new target to instruction.    */
specifier|public
name|void
name|setTarget
parameter_list|(
name|InstructionHandle
name|ih
parameter_list|)
block|{
name|bi
operator|.
name|setTarget
argument_list|(
name|ih
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update target of instruction.    */
specifier|public
name|void
name|updateTarget
parameter_list|(
name|InstructionHandle
name|old_ih
parameter_list|,
name|InstructionHandle
name|new_ih
parameter_list|)
block|{
name|bi
operator|.
name|updateTarget
argument_list|(
name|old_ih
argument_list|,
name|new_ih
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return target of instruction.    */
specifier|public
name|InstructionHandle
name|getTarget
parameter_list|()
block|{
return|return
name|bi
operator|.
name|getTarget
argument_list|()
return|;
block|}
comment|/**     * Set new contents. Old instruction is disposed and may not be used anymore.    */
specifier|public
name|void
name|setInstruction
parameter_list|(
name|Instruction
name|i
parameter_list|)
block|{
name|super
operator|.
name|setInstruction
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|i
operator|instanceof
name|BranchInstruction
operator|)
condition|)
throw|throw
operator|new
name|ClassGenException
argument_list|(
literal|"Assigning "
operator|+
name|i
operator|+
literal|" to branch handle which is not a branch instruction"
argument_list|)
throw|;
name|bi
operator|=
operator|(
name|BranchInstruction
operator|)
name|i
expr_stmt|;
block|}
block|}
end_class

end_unit

