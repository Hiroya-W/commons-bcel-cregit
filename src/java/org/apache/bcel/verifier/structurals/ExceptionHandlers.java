begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|structurals
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_comment
comment|/**  * This class allows easy access to ExceptionHandler objects.  *  * @version $Id$  * @author<A HREF="http://www.inf.fu-berlin.de/~ehaase"/>Enver Haase</A>  */
end_comment

begin_class
specifier|public
class|class
name|ExceptionHandlers
block|{
comment|/** 	 * The ExceptionHandler instances. 	 * Key: InstructionHandle objects, Values: HashSet<ExceptionHandler> instances. 	 */
specifier|private
name|Hashtable
name|exceptionhandlers
decl_stmt|;
comment|/** 	 * Constructor. Creates a new ExceptionHandlers instance. 	 */
specifier|public
name|ExceptionHandlers
parameter_list|(
name|MethodGen
name|mg
parameter_list|)
block|{
name|exceptionhandlers
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|CodeExceptionGen
index|[]
name|cegs
init|=
name|mg
operator|.
name|getExceptionHandlers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cegs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ExceptionHandler
name|eh
init|=
operator|new
name|ExceptionHandler
argument_list|(
name|cegs
index|[
name|i
index|]
operator|.
name|getCatchType
argument_list|()
argument_list|,
name|cegs
index|[
name|i
index|]
operator|.
name|getHandlerPC
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|InstructionHandle
name|ih
init|=
name|cegs
index|[
name|i
index|]
operator|.
name|getStartPC
argument_list|()
init|;
name|ih
operator|!=
name|cegs
index|[
name|i
index|]
operator|.
name|getEndPC
argument_list|()
operator|.
name|getNext
argument_list|()
condition|;
name|ih
operator|=
name|ih
operator|.
name|getNext
argument_list|()
control|)
block|{
name|HashSet
name|hs
decl_stmt|;
name|hs
operator|=
operator|(
name|HashSet
operator|)
name|exceptionhandlers
operator|.
name|get
argument_list|(
name|ih
argument_list|)
expr_stmt|;
if|if
condition|(
name|hs
operator|==
literal|null
condition|)
block|{
name|hs
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|exceptionhandlers
operator|.
name|put
argument_list|(
name|ih
argument_list|,
name|hs
argument_list|)
expr_stmt|;
block|}
name|hs
operator|.
name|add
argument_list|(
name|eh
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Returns all the ExceptionHandler instances representing exception 	 * handlers that protect the instruction ih. 	 */
specifier|public
name|ExceptionHandler
index|[]
name|getExceptionHandlers
parameter_list|(
name|InstructionHandle
name|ih
parameter_list|)
block|{
name|HashSet
name|hs
init|=
operator|(
name|HashSet
operator|)
name|exceptionhandlers
operator|.
name|get
argument_list|(
name|ih
argument_list|)
decl_stmt|;
if|if
condition|(
name|hs
operator|==
literal|null
condition|)
return|return
operator|new
name|ExceptionHandler
index|[
literal|0
index|]
return|;
else|else
block|{
name|ExceptionHandler
index|[]
name|ret
init|=
operator|new
name|ExceptionHandler
index|[
name|hs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
operator|(
name|ExceptionHandler
index|[]
operator|)
operator|(
name|hs
operator|.
name|toArray
argument_list|(
name|ret
argument_list|)
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

