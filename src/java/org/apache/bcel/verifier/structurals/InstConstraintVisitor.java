begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|structurals
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Constant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantFieldref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|ConstantString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|VerificationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|Verifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|VerifierFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|exc
operator|.
name|AssertionViolatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|exc
operator|.
name|StructuralCodeConstraintException
import|;
end_import

begin_comment
comment|/**  * A Visitor class testing for valid preconditions of JVM instructions.  * The instance of this class will throw a StructuralCodeConstraintException  * instance if an instruction is visitXXX()ed which has preconditions that are  * not satisfied.  * TODO: Currently, the JVM's behaviour concerning monitors (MONITORENTER,  * MONITOREXIT) is not modeled in JustIce.  *  * @version $Id$  * @author<A HREF="http://www.inf.fu-berlin.de/~ehaase"/>Enver Haase</A>  * @see org.apache.bcel.verifier.exc.StructuralCodeConstraintException  * @see org.apache.bcel.verifier.exc.LinkingConstraintException  */
end_comment

begin_class
specifier|public
class|class
name|InstConstraintVisitor
extends|extends
name|EmptyVisitor
implements|implements
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|Visitor
block|{
specifier|private
specifier|static
name|ObjectType
name|GENERIC_ARRAY
init|=
operator|new
name|ObjectType
argument_list|(
literal|"org.apache.bcel.verifier.structurals.GenericArray"
argument_list|)
decl_stmt|;
comment|/** 	 * The constructor. Constructs a new instance of this class. 	 */
specifier|public
name|InstConstraintVisitor
parameter_list|()
block|{
block|}
comment|/** 	 * The Execution Frame we're working on. 	 * 	 * @see #setFrame(Frame f) 	 * @see #locals() 	 * @see #stack() 	 */
specifier|private
name|Frame
name|frame
init|=
literal|null
decl_stmt|;
comment|/** 	 * The ConstantPoolGen we're working on. 	 *  	 * @see #setConstantPoolGen(ConstantPoolGen cpg) 	 */
specifier|private
name|ConstantPoolGen
name|cpg
init|=
literal|null
decl_stmt|;
comment|/** 	 * The MethodGen we're working on. 	 *  	 * @see #setMethodGen(MethodGen mg) 	 */
specifier|private
name|MethodGen
name|mg
init|=
literal|null
decl_stmt|;
comment|/** 	 * The OperandStack we're working on. 	 * 	 * @see #setFrame(Frame f) 	 */
specifier|private
name|OperandStack
name|stack
parameter_list|()
block|{
return|return
name|frame
operator|.
name|getStack
argument_list|()
return|;
block|}
comment|/** 	 * The LocalVariables we're working on. 	 * 	 * @see #setFrame(Frame f) 	 */
specifier|private
name|LocalVariables
name|locals
parameter_list|()
block|{
return|return
name|frame
operator|.
name|getLocals
argument_list|()
return|;
block|}
comment|/**    * This method is called by the visitXXX() to notify the acceptor of this InstConstraintVisitor    * that a constraint violation has occured. This is done by throwing an instance of a    * StructuralCodeConstraintException.    * @throws org.apache.bcel.verifier.exc.StructuralCodeConstraintException always.    */
specifier|private
name|void
name|constraintViolated
parameter_list|(
name|Instruction
name|violator
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|String
name|fq_classname
init|=
name|violator
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|StructuralCodeConstraintException
argument_list|(
literal|"Instruction "
operator|+
name|fq_classname
operator|.
name|substring
argument_list|(
name|fq_classname
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|" constraint violated: "
operator|+
name|description
argument_list|)
throw|;
block|}
comment|/** 	 * This returns the single instance of the InstConstraintVisitor class. 	 * To operate correctly, other values must have been set before actually 	 * using the instance. 	 * Use this method for performance reasons. 	 * 	 * @see #setConstantPoolGen(ConstantPoolGen cpg) 	 * @see #setMethodGen(MethodGen mg) 	 */
specifier|public
name|void
name|setFrame
parameter_list|(
name|Frame
name|f
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|f
expr_stmt|;
comment|//if (singleInstance.mg == null || singleInstance.cpg == null) throw new AssertionViolatedException("Forgot to set important values first.");
block|}
comment|/** 	 * Sets the ConstantPoolGen instance needed for constraint 	 * checking prior to execution. 	 */
specifier|public
name|void
name|setConstantPoolGen
parameter_list|(
name|ConstantPoolGen
name|cpg
parameter_list|)
block|{
name|this
operator|.
name|cpg
operator|=
name|cpg
expr_stmt|;
block|}
comment|/** 	 * Sets the MethodGen instance needed for constraint 	 * checking prior to execution. 	 */
specifier|public
name|void
name|setMethodGen
parameter_list|(
name|MethodGen
name|mg
parameter_list|)
block|{
name|this
operator|.
name|mg
operator|=
name|mg
expr_stmt|;
block|}
comment|/** 	 * Assures index is of type INT. 	 * @throws org.apache.bcel.verifier.exc.StructuralCodeConstraintException if the above constraint is not satisfied. 	 */
specifier|private
name|void
name|indexOfInt
parameter_list|(
name|Instruction
name|o
parameter_list|,
name|Type
name|index
parameter_list|)
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
condition|)
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'index' is not of type int but of type "
operator|+
name|index
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Assures the ReferenceType r is initialized (or Type.NULL). 	 * Formally, this means (!(r instanceof UninitializedObjectType)), because 	 * there are no uninitialized array types. 	 * @throws org.apache.bcel.verifier.exc.StructuralCodeConstraintException if the above constraint is not satisfied. 	 */
specifier|private
name|void
name|referenceTypeIsInitialized
parameter_list|(
name|Instruction
name|o
parameter_list|,
name|ReferenceType
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|UninitializedObjectType
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Working on an uninitialized object '"
operator|+
name|r
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Assures value is of type INT. */
specifier|private
name|void
name|valueOfInt
parameter_list|(
name|Instruction
name|o
parameter_list|,
name|Type
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
condition|)
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'value' is not of type int but of type "
operator|+
name|value
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Assures arrayref is of ArrayType or NULL; 	 * returns true if and only if arrayref is non-NULL. 	 * @throws org.apache.bcel.verifier.exc.StructuralCodeConstraintException if the above constraint is violated.  	 */
specifier|private
name|boolean
name|arrayrefOfArrayType
parameter_list|(
name|Instruction
name|o
parameter_list|,
name|Type
name|arrayref
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|arrayref
operator|instanceof
name|ArrayType
operator|)
operator|||
name|arrayref
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|NULL
argument_list|)
operator|)
condition|)
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'arrayref' does not refer to an array but is of type "
operator|+
name|arrayref
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
operator|(
name|arrayref
operator|instanceof
name|ArrayType
operator|)
return|;
block|}
comment|/***************************************************************/
comment|/* MISC                                                        */
comment|/***************************************************************/
comment|/** 	 * Ensures the general preconditions of an instruction that accesses the stack. 	 * This method is here because BCEL has no such superinterface for the stack 	 * accessing instructions; and there are funny unexpected exceptions in the 	 * semantices of the superinterfaces and superclasses provided. 	 * E.g. SWAP is a StackConsumer, but DUP_X1 is not a StackProducer. 	 * Therefore, this method is called by all StackProducer, StackConsumer, 	 * and StackInstruction instances via their visitXXX() method. 	 * Unfortunately, as the superclasses and superinterfaces overlap, some instructions 	 * cause this method to be called two or three times. [TODO: Fix this.] 	 * 	 * @see #visitStackConsumer(StackConsumer o) 	 * @see #visitStackProducer(StackProducer o) 	 * @see #visitStackInstruction(StackInstruction o) 	 */
specifier|private
name|void
name|_visitStackAccessor
parameter_list|(
name|Instruction
name|o
parameter_list|)
block|{
name|int
name|consume
init|=
name|o
operator|.
name|consumeStack
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
comment|// Stack values are always consumed first; then produced.
if|if
condition|(
name|consume
operator|>
name|stack
argument_list|()
operator|.
name|slotsUsed
argument_list|()
condition|)
block|{
name|constraintViolated
argument_list|(
operator|(
name|Instruction
operator|)
name|o
argument_list|,
literal|"Cannot consume "
operator|+
name|consume
operator|+
literal|" stack slots: only "
operator|+
name|stack
argument_list|()
operator|.
name|slotsUsed
argument_list|()
operator|+
literal|" slot(s) left on stack!\nStack:\n"
operator|+
name|stack
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|produce
init|=
name|o
operator|.
name|produceStack
argument_list|(
name|cpg
argument_list|)
operator|-
operator|(
operator|(
name|Instruction
operator|)
name|o
operator|)
operator|.
name|consumeStack
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
comment|// Stack values are always consumed first; then produced.
if|if
condition|(
name|produce
operator|+
name|stack
argument_list|()
operator|.
name|slotsUsed
argument_list|()
operator|>
name|stack
argument_list|()
operator|.
name|maxStack
argument_list|()
condition|)
block|{
name|constraintViolated
argument_list|(
operator|(
name|Instruction
operator|)
name|o
argument_list|,
literal|"Cannot produce "
operator|+
name|produce
operator|+
literal|" stack slots: only "
operator|+
operator|(
name|stack
argument_list|()
operator|.
name|maxStack
argument_list|()
operator|-
name|stack
argument_list|()
operator|.
name|slotsUsed
argument_list|()
operator|)
operator|+
literal|" free stack slot(s) left.\nStack:\n"
operator|+
name|stack
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/***************************************************************/
comment|/* "generic"visitXXXX methods where XXXX is an interface       */
comment|/* therefore, we don't know the order of visiting; but we know */
comment|/* these methods are called before the visitYYYY methods below */
comment|/***************************************************************/
comment|/** 	 * Assures the generic preconditions of a LoadClass instance. 	 * The referenced class is loaded and pass2-verified. 	 */
specifier|public
name|void
name|visitLoadClass
parameter_list|(
name|LoadClass
name|o
parameter_list|)
block|{
name|ObjectType
name|t
init|=
name|o
operator|.
name|getLoadClassType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
comment|// null means "no class is loaded"
name|Verifier
name|v
init|=
name|VerifierFactory
operator|.
name|getVerifier
argument_list|(
name|t
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
name|VerificationResult
name|vr
init|=
name|v
operator|.
name|doPass2
argument_list|()
decl_stmt|;
if|if
condition|(
name|vr
operator|.
name|getStatus
argument_list|()
operator|!=
name|VerificationResult
operator|.
name|VERIFIED_OK
condition|)
block|{
name|constraintViolated
argument_list|(
operator|(
name|Instruction
operator|)
name|o
argument_list|,
literal|"Class '"
operator|+
name|o
operator|.
name|getLoadClassType
argument_list|(
name|cpg
argument_list|)
operator|.
name|getClassName
argument_list|()
operator|+
literal|"' is referenced, but cannot be loaded and resolved: '"
operator|+
name|vr
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Ensures the general preconditions of a StackConsumer instance. 	 */
specifier|public
name|void
name|visitStackConsumer
parameter_list|(
name|StackConsumer
name|o
parameter_list|)
block|{
name|_visitStackAccessor
argument_list|(
operator|(
name|Instruction
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Ensures the general preconditions of a StackProducer instance. 	 */
specifier|public
name|void
name|visitStackProducer
parameter_list|(
name|StackProducer
name|o
parameter_list|)
block|{
name|_visitStackAccessor
argument_list|(
operator|(
name|Instruction
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
comment|/***************************************************************/
comment|/* "generic" visitYYYY methods where YYYY is a superclass.     */
comment|/* therefore, we know the order of visiting; we know           */
comment|/* these methods are called after the visitXXXX methods above. */
comment|/***************************************************************/
comment|/** 	 * Ensures the general preconditions of a CPInstruction instance. 	 */
specifier|public
name|void
name|visitCPInstruction
parameter_list|(
name|CPInstruction
name|o
parameter_list|)
block|{
name|int
name|idx
init|=
name|o
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|<
literal|0
operator|)
operator|||
operator|(
name|idx
operator|>=
name|cpg
operator|.
name|getSize
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Huh?! Constant pool index of instruction '"
operator|+
name|o
operator|+
literal|"' illegal? Pass 3a should have checked this!"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Ensures the general preconditions of a FieldInstruction instance. 	 */
specifier|public
name|void
name|visitFieldInstruction
parameter_list|(
name|FieldInstruction
name|o
parameter_list|)
block|{
comment|// visitLoadClass(o) has been called before: Every FieldOrMethod
comment|// implements LoadClass.
comment|// visitCPInstruction(o) has been called before.
comment|// A FieldInstruction may be: GETFIELD, GETSTATIC, PUTFIELD, PUTSTATIC
name|Constant
name|c
init|=
name|cpg
operator|.
name|getConstant
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|c
operator|instanceof
name|ConstantFieldref
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Index '"
operator|+
name|o
operator|.
name|getIndex
argument_list|()
operator|+
literal|"' should refer to a CONSTANT_Fieldref_info structure, but refers to '"
operator|+
name|c
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
comment|// the o.getClassType(cpg) type has passed pass 2; see visitLoadClass(o).
name|Type
name|t
init|=
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|ObjectType
condition|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|ObjectType
operator|)
name|t
operator|)
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|Verifier
name|v
init|=
name|VerifierFactory
operator|.
name|getVerifier
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|VerificationResult
name|vr
init|=
name|v
operator|.
name|doPass2
argument_list|()
decl_stmt|;
if|if
condition|(
name|vr
operator|.
name|getStatus
argument_list|()
operator|!=
name|VerificationResult
operator|.
name|VERIFIED_OK
condition|)
block|{
name|constraintViolated
argument_list|(
operator|(
name|Instruction
operator|)
name|o
argument_list|,
literal|"Class '"
operator|+
name|name
operator|+
literal|"' is referenced, but cannot be loaded and resolved: '"
operator|+
name|vr
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Ensures the general preconditions of an InvokeInstruction instance. 	 */
specifier|public
name|void
name|visitInvokeInstruction
parameter_list|(
name|InvokeInstruction
name|o
parameter_list|)
block|{
comment|// visitLoadClass(o) has been called before: Every FieldOrMethod
comment|// implements LoadClass.
comment|// visitCPInstruction(o) has been called before.
comment|//TODO
block|}
comment|/** 	 * Ensures the general preconditions of a StackInstruction instance. 	 */
specifier|public
name|void
name|visitStackInstruction
parameter_list|(
name|StackInstruction
name|o
parameter_list|)
block|{
name|_visitStackAccessor
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Assures the generic preconditions of a LocalVariableInstruction instance. 	 * That is, the index of the local variable must be valid. 	 */
specifier|public
name|void
name|visitLocalVariableInstruction
parameter_list|(
name|LocalVariableInstruction
name|o
parameter_list|)
block|{
if|if
condition|(
name|locals
argument_list|()
operator|.
name|maxLocals
argument_list|()
operator|<=
operator|(
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
operator|.
name|getSize
argument_list|()
operator|==
literal|1
condition|?
name|o
operator|.
name|getIndex
argument_list|()
else|:
name|o
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'index' is not a valid index into the local variable array."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Assures the generic preconditions of a LoadInstruction instance. 	 */
specifier|public
name|void
name|visitLoadInstruction
parameter_list|(
name|LoadInstruction
name|o
parameter_list|)
block|{
comment|//visitLocalVariableInstruction(o) is called before, because it is more generic.
comment|// LOAD instructions must not read Type.UNKNOWN
if|if
condition|(
name|locals
argument_list|()
operator|.
name|get
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|==
name|Type
operator|.
name|UNKNOWN
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Read-Access on local variable "
operator|+
name|o
operator|.
name|getIndex
argument_list|()
operator|+
literal|" with unknown content."
argument_list|)
expr_stmt|;
block|}
comment|// LOAD instructions, two-slot-values at index N must have Type.UNKNOWN
comment|// as a symbol for the higher halve at index N+1
comment|// [suppose some instruction put an int at N+1--- our double at N is defective]
if|if
condition|(
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|locals
argument_list|()
operator|.
name|get
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|UNKNOWN
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Reading a two-locals value from local variables "
operator|+
name|o
operator|.
name|getIndex
argument_list|()
operator|+
literal|" and "
operator|+
operator|(
name|o
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
operator|)
operator|+
literal|" where the latter one is destroyed."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// LOAD instructions must read the correct type.
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ALOAD
operator|)
condition|)
block|{
if|if
condition|(
name|locals
argument_list|()
operator|.
name|get
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|!=
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Local Variable type and LOADing Instruction type mismatch: Local Variable: '"
operator|+
name|locals
argument_list|()
operator|.
name|get
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|+
literal|"'; Instruction type: '"
operator|+
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we deal with an ALOAD
if|if
condition|(
operator|!
operator|(
name|locals
argument_list|()
operator|.
name|get
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Local Variable type and LOADing Instruction type mismatch: Local Variable: '"
operator|+
name|locals
argument_list|()
operator|.
name|get
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|+
literal|"'; Instruction expects a ReferenceType."
argument_list|)
expr_stmt|;
block|}
comment|// ALOAD __IS ALLOWED__ to put uninitialized objects onto the stack!
comment|//referenceTypeIsInitialized(o, (ReferenceType) (locals().get(o.getIndex())));
block|}
comment|// LOAD instructions must have enough free stack slots.
if|if
condition|(
operator|(
name|stack
argument_list|()
operator|.
name|maxStack
argument_list|()
operator|-
name|stack
argument_list|()
operator|.
name|slotsUsed
argument_list|()
operator|)
operator|<
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
operator|.
name|getSize
argument_list|()
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Not enough free stack slots to load a '"
operator|+
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
operator|+
literal|"' onto the OperandStack."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Assures the generic preconditions of a StoreInstruction instance. 	 */
specifier|public
name|void
name|visitStoreInstruction
parameter_list|(
name|StoreInstruction
name|o
parameter_list|)
block|{
comment|//visitLocalVariableInstruction(o) is called before, because it is more generic.
if|if
condition|(
name|stack
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Don't bother about 1 or 2 stack slots used. This check is implicitely done below while type checking.
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Cannot STORE: Stack to read from is empty."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|ASTORE
operator|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|==
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
operator|)
condition|)
block|{
comment|// the other xSTORE types are singletons in BCEL.
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack top type and STOREing Instruction type mismatch: Stack top: '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'; Instruction type: '"
operator|+
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we deal with ASTORE
name|Type
name|stacktop
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|!
operator|(
name|stacktop
operator|instanceof
name|ReferenceType
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|stacktop
operator|instanceof
name|ReturnaddressType
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack top type and STOREing Instruction type mismatch: Stack top: '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'; Instruction expects a ReferenceType or a ReturnadressType."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stacktop
operator|instanceof
name|ReferenceType
condition|)
block|{
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
name|stacktop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Assures the generic preconditions of a ReturnInstruction instance. 	 */
specifier|public
name|void
name|visitReturnInstruction
parameter_list|(
name|ReturnInstruction
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|RETURN
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|o
operator|instanceof
name|ARETURN
condition|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Reference type expected on top of stack, but is: '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
argument_list|)
expr_stmt|;
comment|//ReferenceType objectref = (ReferenceType) (stack().peek());
comment|// TODO: This can only be checked if using Staerk-et-al's "set of object types" instead of a
comment|// "wider cast object type" created during verification.
comment|//if (! (objectref.isAssignmentCompatibleWith(mg.getType())) ){
comment|//	constraintViolated(o, "Type on stack top which should be returned is a '"+stack().peek()+"' which is not assignment compatible with the return type of this method, '"+mg.getType()+"'.");
comment|//}
block|}
block|}
else|else
block|{
name|Type
name|method_type
init|=
name|mg
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|method_type
operator|==
name|Type
operator|.
name|BOOLEAN
operator|||
name|method_type
operator|==
name|Type
operator|.
name|BYTE
operator|||
name|method_type
operator|==
name|Type
operator|.
name|SHORT
operator|||
name|method_type
operator|==
name|Type
operator|.
name|CHAR
condition|)
block|{
name|method_type
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|method_type
operator|.
name|equals
argument_list|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Current method has return type of '"
operator|+
name|mg
operator|.
name|getType
argument_list|()
operator|+
literal|"' expecting a '"
operator|+
name|method_type
operator|+
literal|"' on top of the stack. But stack top is a '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/***************************************************************/
comment|/* "special"visitXXXX methods for one type of instruction each */
comment|/***************************************************************/
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitAALOAD
parameter_list|(
name|AALOAD
name|o
parameter_list|)
block|{
name|Type
name|arrayref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Type
name|index
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|arrayrefOfArrayType
argument_list|(
name|o
argument_list|,
name|arrayref
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'arrayref' does not refer to an array with elements of a ReferenceType but to an array of "
operator|+
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
operator|(
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitAASTORE
parameter_list|(
name|AASTORE
name|o
parameter_list|)
block|{
try|try
block|{
name|Type
name|arrayref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Type
name|index
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Type
name|value
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'value' is not of a ReferenceType but of type "
operator|+
name|value
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Don't bother further with "referenceTypeIsInitialized()", there are no arrays
comment|// of an uninitialized object type.
if|if
condition|(
name|arrayrefOfArrayType
argument_list|(
name|o
argument_list|,
name|arrayref
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'arrayref' does not refer to an array with elements of a ReferenceType but to an array of "
operator|+
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
operator|(
name|ReferenceType
operator|)
name|value
operator|)
operator|.
name|isAssignmentCompatibleWith
argument_list|(
operator|(
name|ReferenceType
operator|)
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
argument_list|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The type of 'value' ('"
operator|+
name|value
operator|+
literal|"') is not assignment compatible to the components of the array 'arrayref' refers to. ('"
operator|+
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// FIXME: maybe not the best way to handle this
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Missing class: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitACONST_NULL
parameter_list|(
name|ACONST_NULL
name|o
parameter_list|)
block|{
comment|// Nothing needs to be done here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitALOAD
parameter_list|(
name|ALOAD
name|o
parameter_list|)
block|{
comment|//visitLoadInstruction(LoadInstruction) is called before.
comment|// Nothing else needs to be done here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitANEWARRAY
parameter_list|(
name|ANEWARRAY
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
condition|)
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'count' at the stack top is not of type '"
operator|+
name|Type
operator|.
name|INT
operator|+
literal|"' but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
comment|// The runtime constant pool item at that index must be a symbolic reference to a class,
comment|// array, or interface type. See Pass 3a.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitARETURN
parameter_list|(
name|ARETURN
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'objectref' at the stack top is not of a ReferenceType but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|ReferenceType
name|objectref
init|=
operator|(
name|ReferenceType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
decl_stmt|;
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
name|objectref
argument_list|)
expr_stmt|;
comment|// The check below should already done via visitReturnInstruction(ReturnInstruction), see there.
comment|// It cannot be done using Staerk-et-al's "set of object types" instead of a
comment|// "wider cast object type", anyway.
comment|//if (! objectref.isAssignmentCompatibleWith(mg.getReturnType() )){
comment|//	constraintViolated(o, "The 'objectref' type "+objectref+" at the stack top is not assignment compatible with the return type '"+mg.getReturnType()+"' of the method.");
comment|//}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitARRAYLENGTH
parameter_list|(
name|ARRAYLENGTH
name|o
parameter_list|)
block|{
name|Type
name|arrayref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|arrayrefOfArrayType
argument_list|(
name|o
argument_list|,
name|arrayref
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitASTORE
parameter_list|(
name|ASTORE
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|instanceof
name|ReferenceType
operator|)
operator|||
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|instanceof
name|ReturnaddressType
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'objectref' is not of a ReferenceType or of ReturnaddressType but of "
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|instanceof
name|ReferenceType
condition|)
block|{
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitATHROW
parameter_list|(
name|ATHROW
name|o
parameter_list|)
block|{
try|try
block|{
comment|// It's stated that 'objectref' must be of a ReferenceType --- but since Throwable is
comment|// not derived from an ArrayType, it follows that 'objectref' must be of an ObjectType or Type.NULL.
if|if
condition|(
operator|!
operator|(
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|instanceof
name|ObjectType
operator|)
operator|||
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|NULL
argument_list|)
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'objectref' is not of an (initialized) ObjectType but of type "
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|// NULL is a subclass of every class, so to speak.
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|NULL
argument_list|)
condition|)
return|return;
name|ObjectType
name|exc
init|=
operator|(
name|ObjectType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
decl_stmt|;
name|ObjectType
name|throwable
init|=
operator|(
name|ObjectType
operator|)
operator|(
name|Type
operator|.
name|getType
argument_list|(
literal|"Ljava/lang/Throwable;"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
operator|(
name|exc
operator|.
name|subclassOf
argument_list|(
name|throwable
argument_list|)
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|exc
operator|.
name|equals
argument_list|(
name|throwable
argument_list|)
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'objectref' is not of class Throwable or of a subclass of Throwable, but of '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// FIXME: maybe not the best way to handle this
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Missing class: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitBALOAD
parameter_list|(
name|BALOAD
name|o
parameter_list|)
block|{
name|Type
name|arrayref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Type
name|index
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|arrayrefOfArrayType
argument_list|(
name|o
argument_list|,
name|arrayref
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|)
operator|||
operator|(
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'arrayref' does not refer to an array with elements of a Type.BYTE or Type.BOOLEAN but to an array of '"
operator|+
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitBASTORE
parameter_list|(
name|BASTORE
name|o
parameter_list|)
block|{
name|Type
name|arrayref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Type
name|index
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Type
name|value
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|valueOfInt
argument_list|(
name|o
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|arrayrefOfArrayType
argument_list|(
name|o
argument_list|,
name|arrayref
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
operator|)
operator|||
operator|(
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
operator|)
operator|)
condition|)
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'arrayref' does not refer to an array with elements of a Type.BYTE or Type.BOOLEAN but to an array of '"
operator|+
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitBIPUSH
parameter_list|(
name|BIPUSH
name|o
parameter_list|)
block|{
comment|// Nothing to do...
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitBREAKPOINT
parameter_list|(
name|BREAKPOINT
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT."
argument_list|)
throw|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitCALOAD
parameter_list|(
name|CALOAD
name|o
parameter_list|)
block|{
name|Type
name|arrayref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Type
name|index
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|arrayrefOfArrayType
argument_list|(
name|o
argument_list|,
name|arrayref
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitCASTORE
parameter_list|(
name|CASTORE
name|o
parameter_list|)
block|{
name|Type
name|arrayref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Type
name|index
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Type
name|value
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|valueOfInt
argument_list|(
name|o
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|arrayrefOfArrayType
argument_list|(
name|o
argument_list|,
name|arrayref
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|CHAR
argument_list|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'arrayref' does not refer to an array with elements of type char but to an array of type "
operator|+
operator|(
operator|(
name|ArrayType
operator|)
name|arrayref
operator|)
operator|.
name|getElementType
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitCHECKCAST
parameter_list|(
name|CHECKCAST
name|o
parameter_list|)
block|{
comment|// The objectref must be of type reference.
name|Type
name|objectref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|objectref
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'objectref' is not of a ReferenceType but of type "
operator|+
name|objectref
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
name|objectref
argument_list|)
expr_stmt|;
block|}
comment|// The unsigned indexbyte1 and indexbyte2 are used to construct an index into the runtime constant pool of the
comment|// current class (§3.6), where the value of the index is (indexbyte1<< 8) | indexbyte2. The runtime constant
comment|// pool item at the index must be a symbolic reference to a class, array, or interface type.
name|Constant
name|c
init|=
name|cpg
operator|.
name|getConstant
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|c
operator|instanceof
name|ConstantClass
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The Constant at 'index' is not a ConstantClass, but '"
operator|+
name|c
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitD2F
parameter_list|(
name|D2F
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitD2I
parameter_list|(
name|D2I
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitD2L
parameter_list|(
name|D2L
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDADD
parameter_list|(
name|DADD
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDALOAD
parameter_list|(
name|DALOAD
name|o
parameter_list|)
block|{
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-top must be of type double[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|Type
name|t
init|=
operator|(
operator|(
name|ArrayType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|)
operator|)
operator|.
name|getBasicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-top must be of type double[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDASTORE
parameter_list|(
name|DASTORE
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-next-to-top must be of type double[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|Type
name|t
init|=
operator|(
operator|(
name|ArrayType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|)
operator|)
operator|.
name|getBasicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-next-to-top must be of type double[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDCMPG
parameter_list|(
name|DCMPG
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDCMPL
parameter_list|(
name|DCMPL
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDCONST
parameter_list|(
name|DCONST
name|o
parameter_list|)
block|{
comment|// There's nothing to be done here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDDIV
parameter_list|(
name|DDIV
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDLOAD
parameter_list|(
name|DLOAD
name|o
parameter_list|)
block|{
comment|//visitLoadInstruction(LoadInstruction) is called before.
comment|// Nothing else needs to be done here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDMUL
parameter_list|(
name|DMUL
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDNEG
parameter_list|(
name|DNEG
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDREM
parameter_list|(
name|DREM
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDRETURN
parameter_list|(
name|DRETURN
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDSTORE
parameter_list|(
name|DSTORE
name|o
parameter_list|)
block|{
comment|//visitStoreInstruction(StoreInstruction) is called before.
comment|// Nothing else needs to be done here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDSUB
parameter_list|(
name|DSUB
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|DOUBLE
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'double', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDUP
parameter_list|(
name|DUP
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Won't DUP type on stack top '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"' because it must occupy exactly one slot, not '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDUP_X1
parameter_list|(
name|DUP_X1
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Type on stack top '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"' should occupy exactly one slot, not '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Type on stack next-to-top '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"' should occupy exactly one slot, not '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDUP_X2
parameter_list|(
name|DUP_X2
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack top type must be of size 1, but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"' of size '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return;
comment|// Form 2, okay.
block|}
else|else
block|{
comment|//stack().peek(1).getSize == 1.
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"If stack top's size is 1 and stack next-to-top's size is 1, stack next-to-next-to-top's size must also be 1, but is: '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"' of size '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDUP2
parameter_list|(
name|DUP2
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return;
comment|// Form 2, okay.
block|}
else|else
block|{
comment|//stack().peek().getSize() == 1.
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"If stack top's size is 1, then stack next-to-top's size must also be 1. But it is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"' of size '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDUP2_X1
parameter_list|(
name|DUP2_X1
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"If stack top's size is 2, then stack next-to-top's size must be 1. But it is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"' of size '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return;
comment|// Form 2
block|}
block|}
else|else
block|{
comment|// stack top is of size 1
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"If stack top's size is 1, then stack next-to-top's size must also be 1. But it is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"' of size '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"If stack top's size is 1, then stack next-to-next-to-top's size must also be 1. But it is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"' of size '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitDUP2_X2
parameter_list|(
name|DUP2_X2
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|0
argument_list|)
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return;
comment|// Form 4
block|}
else|else
block|{
comment|// stack top size is 2, next-to-top's size is 1
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"If stack top's size is 2 and stack-next-to-top's size is 1, then stack next-to-next-to-top's size must also be 1. But it is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"' of size '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return;
comment|// Form 2
block|}
block|}
block|}
else|else
block|{
comment|// stack top is of size 1
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|.
name|getSize
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return;
comment|// Form 3
block|}
else|else
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|3
argument_list|)
operator|.
name|getSize
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return;
comment|// Form 1
block|}
block|}
block|}
block|}
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The operand sizes on the stack do not match any of the four forms of usage of this instruction."
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitF2D
parameter_list|(
name|F2D
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitF2I
parameter_list|(
name|F2I
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitF2L
parameter_list|(
name|F2L
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFADD
parameter_list|(
name|FADD
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFALOAD
parameter_list|(
name|FALOAD
name|o
parameter_list|)
block|{
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-top must be of type float[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|Type
name|t
init|=
operator|(
operator|(
name|ArrayType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|)
operator|)
operator|.
name|getBasicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-top must be of type float[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFASTORE
parameter_list|(
name|FASTORE
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-next-to-top must be of type float[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|Type
name|t
init|=
operator|(
operator|(
name|ArrayType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|)
operator|)
operator|.
name|getBasicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-next-to-top must be of type float[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFCMPG
parameter_list|(
name|FCMPG
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFCMPL
parameter_list|(
name|FCMPL
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFCONST
parameter_list|(
name|FCONST
name|o
parameter_list|)
block|{
comment|// nothing to do here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFDIV
parameter_list|(
name|FDIV
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFLOAD
parameter_list|(
name|FLOAD
name|o
parameter_list|)
block|{
comment|//visitLoadInstruction(LoadInstruction) is called before.
comment|// Nothing else needs to be done here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFMUL
parameter_list|(
name|FMUL
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFNEG
parameter_list|(
name|FNEG
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFREM
parameter_list|(
name|FREM
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFRETURN
parameter_list|(
name|FRETURN
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFSTORE
parameter_list|(
name|FSTORE
name|o
parameter_list|)
block|{
comment|//visitStoreInstruction(StoreInstruction) is called before.
comment|// Nothing else needs to be done here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitFSUB
parameter_list|(
name|FSUB
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'float', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitGETFIELD
parameter_list|(
name|GETFIELD
name|o
parameter_list|)
block|{
try|try
block|{
name|Type
name|objectref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|objectref
operator|instanceof
name|ObjectType
operator|)
operator|||
operator|(
name|objectref
operator|==
name|Type
operator|.
name|NULL
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack top should be an object reference that's not an array reference, but is '"
operator|+
name|objectref
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|String
name|field_name
init|=
name|o
operator|.
name|getFieldName
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
name|JavaClass
name|jc
init|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|o
operator|.
name|getClassType
argument_list|(
name|cpg
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
name|Field
index|[]
name|fields
init|=
name|jc
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|field_name
argument_list|)
condition|)
block|{
name|Type
name|f_type
init|=
name|Type
operator|.
name|getType
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
name|Type
name|o_type
init|=
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
comment|/* TODO: Check if assignment compatibility is sufficient. 				   * What does Sun do? 				   */
if|if
condition|(
name|f_type
operator|.
name|equals
argument_list|(
name|o_type
argument_list|)
condition|)
block|{
name|f
operator|=
name|fields
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Field not found?!?"
argument_list|)
throw|;
block|}
if|if
condition|(
name|f
operator|.
name|isProtected
argument_list|()
condition|)
block|{
name|ObjectType
name|classtype
init|=
name|o
operator|.
name|getClassType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
name|ObjectType
name|curr
init|=
operator|new
name|ObjectType
argument_list|(
name|mg
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classtype
operator|.
name|equals
argument_list|(
name|curr
argument_list|)
operator|||
name|curr
operator|.
name|subclassOf
argument_list|(
name|classtype
argument_list|)
condition|)
block|{
name|Type
name|t
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|ObjectType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'objectref' must refer to an object that's not an array. Found instead: '"
operator|+
name|t
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|ObjectType
name|objreftype
init|=
operator|(
name|ObjectType
operator|)
name|t
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|objreftype
operator|.
name|equals
argument_list|(
name|curr
argument_list|)
operator|||
name|objreftype
operator|.
name|subclassOf
argument_list|(
name|curr
argument_list|)
operator|)
condition|)
block|{
comment|//TODO: One day move to Staerk-et-al's "Set of object types" instead of "wider" object types
comment|//      created during the verification.
comment|//      "Wider" object types don't allow us to check for things like that below.
comment|//constraintViolated(o, "The referenced field has the ACC_PROTECTED modifier, and it's a member of the current class or a superclass of the current class. However, the referenced object type '"+stack().peek()+"' is not the current class or a subclass of the current class.");
block|}
block|}
block|}
comment|// TODO: Could go into Pass 3a.
if|if
condition|(
name|f
operator|.
name|isStatic
argument_list|()
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Referenced field '"
operator|+
name|f
operator|+
literal|"' is static which it shouldn't be."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// FIXME: maybe not the best way to handle this
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Missing class: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitGETSTATIC
parameter_list|(
name|GETSTATIC
name|o
parameter_list|)
block|{
comment|// Field must be static: see Pass 3a.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitGOTO
parameter_list|(
name|GOTO
name|o
parameter_list|)
block|{
comment|// nothing to do here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitGOTO_W
parameter_list|(
name|GOTO_W
name|o
parameter_list|)
block|{
comment|// nothing to do here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitI2B
parameter_list|(
name|I2B
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitI2C
parameter_list|(
name|I2C
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitI2D
parameter_list|(
name|I2D
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitI2F
parameter_list|(
name|I2F
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitI2L
parameter_list|(
name|I2L
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitI2S
parameter_list|(
name|I2S
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIADD
parameter_list|(
name|IADD
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIALOAD
parameter_list|(
name|IALOAD
name|o
parameter_list|)
block|{
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-top must be of type int[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|Type
name|t
init|=
operator|(
operator|(
name|ArrayType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|)
operator|)
operator|.
name|getBasicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-top must be of type int[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIAND
parameter_list|(
name|IAND
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIASTORE
parameter_list|(
name|IASTORE
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-next-to-top must be of type int[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|Type
name|t
init|=
operator|(
operator|(
name|ArrayType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|)
operator|)
operator|.
name|getBasicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-next-to-top must be of type int[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitICONST
parameter_list|(
name|ICONST
name|o
parameter_list|)
block|{
comment|//nothing to do here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIDIV
parameter_list|(
name|IDIV
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIF_ACMPEQ
parameter_list|(
name|IF_ACMPEQ
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of a ReferenceType, but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of a ReferenceType, but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIF_ACMPNE
parameter_list|(
name|IF_ACMPNE
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of a ReferenceType, but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of a ReferenceType, but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIF_ICMPEQ
parameter_list|(
name|IF_ICMPEQ
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIF_ICMPGE
parameter_list|(
name|IF_ICMPGE
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIF_ICMPGT
parameter_list|(
name|IF_ICMPGT
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIF_ICMPLE
parameter_list|(
name|IF_ICMPLE
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIF_ICMPLT
parameter_list|(
name|IF_ICMPLT
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIF_ICMPNE
parameter_list|(
name|IF_ICMPNE
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIFEQ
parameter_list|(
name|IFEQ
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIFGE
parameter_list|(
name|IFGE
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIFGT
parameter_list|(
name|IFGT
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIFLE
parameter_list|(
name|IFLE
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIFLT
parameter_list|(
name|IFLT
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIFNE
parameter_list|(
name|IFNE
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIFNONNULL
parameter_list|(
name|IFNONNULL
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of a ReferenceType, but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIFNULL
parameter_list|(
name|IFNULL
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of a ReferenceType, but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIINC
parameter_list|(
name|IINC
name|o
parameter_list|)
block|{
comment|// Mhhh. In BCEL, at this time "IINC" is not a LocalVariableInstruction.
if|if
condition|(
name|locals
argument_list|()
operator|.
name|maxLocals
argument_list|()
operator|<=
operator|(
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
operator|.
name|getSize
argument_list|()
operator|==
literal|1
condition|?
name|o
operator|.
name|getIndex
argument_list|()
else|:
name|o
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'index' is not a valid index into the local variable array."
argument_list|)
expr_stmt|;
block|}
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|locals
argument_list|()
operator|.
name|get
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitILOAD
parameter_list|(
name|ILOAD
name|o
parameter_list|)
block|{
comment|// All done by visitLocalVariableInstruction(), visitLoadInstruction()
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIMPDEP1
parameter_list|(
name|IMPDEP1
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1."
argument_list|)
throw|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIMPDEP2
parameter_list|(
name|IMPDEP2
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2."
argument_list|)
throw|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIMUL
parameter_list|(
name|IMUL
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitINEG
parameter_list|(
name|INEG
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitINSTANCEOF
parameter_list|(
name|INSTANCEOF
name|o
parameter_list|)
block|{
comment|// The objectref must be of type reference.
name|Type
name|objectref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|objectref
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'objectref' is not of a ReferenceType but of type "
operator|+
name|objectref
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
name|objectref
argument_list|)
expr_stmt|;
block|}
comment|// The unsigned indexbyte1 and indexbyte2 are used to construct an index into the runtime constant pool of the
comment|// current class (§3.6), where the value of the index is (indexbyte1<< 8) | indexbyte2. The runtime constant
comment|// pool item at the index must be a symbolic reference to a class, array, or interface type.
name|Constant
name|c
init|=
name|cpg
operator|.
name|getConstant
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|c
operator|instanceof
name|ConstantClass
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The Constant at 'index' is not a ConstantClass, but '"
operator|+
name|c
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitINVOKEINTERFACE
parameter_list|(
name|INVOKEINTERFACE
name|o
parameter_list|)
block|{
comment|// Method is not native, otherwise pass 3 would not happen.
name|int
name|count
init|=
name|o
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'count' argument must not be 0."
argument_list|)
expr_stmt|;
block|}
comment|// It is a ConstantInterfaceMethodref, Pass 3a made it sure.
comment|// TODO: Do we want to do anything with it?
comment|//ConstantInterfaceMethodref cimr = (ConstantInterfaceMethodref) (cpg.getConstant(o.getIndex()));
comment|// the o.getClassType(cpg) type has passed pass 2; see visitLoadClass(o).
name|Type
name|t
init|=
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|ObjectType
condition|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|ObjectType
operator|)
name|t
operator|)
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|Verifier
name|v
init|=
name|VerifierFactory
operator|.
name|getVerifier
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|VerificationResult
name|vr
init|=
name|v
operator|.
name|doPass2
argument_list|()
decl_stmt|;
if|if
condition|(
name|vr
operator|.
name|getStatus
argument_list|()
operator|!=
name|VerificationResult
operator|.
name|VERIFIED_OK
condition|)
block|{
name|constraintViolated
argument_list|(
operator|(
name|Instruction
operator|)
name|o
argument_list|,
literal|"Class '"
operator|+
name|name
operator|+
literal|"' is referenced, but cannot be loaded and resolved: '"
operator|+
name|vr
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
name|Type
index|[]
name|argtypes
init|=
name|o
operator|.
name|getArgumentTypes
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
name|int
name|nargs
init|=
name|argtypes
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|nargs
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Type
name|fromStack
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
operator|(
name|nargs
operator|-
literal|1
operator|)
operator|-
name|i
argument_list|)
decl_stmt|;
comment|// 0 to nargs-1
name|Type
name|fromDesc
init|=
name|argtypes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|fromDesc
operator|==
name|Type
operator|.
name|BOOLEAN
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|BYTE
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|CHAR
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|SHORT
condition|)
block|{
name|fromDesc
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fromStack
operator|.
name|equals
argument_list|(
name|fromDesc
argument_list|)
condition|)
block|{
if|if
condition|(
name|fromStack
operator|instanceof
name|ReferenceType
operator|&&
name|fromDesc
operator|instanceof
name|ReferenceType
condition|)
block|{
comment|//ReferenceType rFromStack = (ReferenceType) fromStack;
comment|//ReferenceType rFromDesc = (ReferenceType) fromDesc;
comment|// TODO: This can only be checked when using Staerk-et-al's "set of object types"
comment|// instead of a "wider cast object type" created during verification.
comment|//if ( ! rFromStack.isAssignmentCompatibleWith(rFromDesc) ){
comment|//	constraintViolated(o, "Expecting a '"+fromDesc+"' but found a '"+fromStack+"' on the stack (which is not assignment compatible).");
comment|//}
block|}
else|else
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a '"
operator|+
name|fromDesc
operator|+
literal|"' but found a '"
operator|+
name|fromStack
operator|+
literal|"' on the stack."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Type
name|objref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
name|nargs
argument_list|)
decl_stmt|;
if|if
condition|(
name|objref
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|objref
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a reference type as 'objectref' on the stack, not a '"
operator|+
name|objref
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
name|objref
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|objref
operator|instanceof
name|ObjectType
operator|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|objref
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting an ObjectType as 'objectref' on the stack, not a '"
operator|+
name|objref
operator|+
literal|"'."
argument_list|)
expr_stmt|;
comment|// could be a ReturnaddressType
block|}
else|else
block|{
name|objref
operator|=
name|GENERIC_ARRAY
expr_stmt|;
block|}
block|}
comment|// String objref_classname = ((ObjectType) objref).getClassName();
comment|// String theInterface = o.getClassName(cpg);
comment|// TODO: This can only be checked if we're using Staerk-et-al's "set of object types"
comment|//       instead of "wider cast object types" generated during verification.
comment|//if ( ! Repository.implementationOf(objref_classname, theInterface) ){
comment|//	constraintViolated(o, "The 'objref' item '"+objref+"' does not implement '"+theInterface+"' as expected.");
comment|//}
name|int
name|counted_count
init|=
literal|1
decl_stmt|;
comment|// 1 for the objectref
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nargs
condition|;
name|i
operator|++
control|)
block|{
name|counted_count
operator|+=
name|argtypes
index|[
name|i
index|]
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|!=
name|counted_count
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'count' argument should probably read '"
operator|+
name|counted_count
operator|+
literal|"' but is '"
operator|+
name|count
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitINVOKESPECIAL
parameter_list|(
name|INVOKESPECIAL
name|o
parameter_list|)
block|{
try|try
block|{
comment|// Don't init an object twice.
if|if
condition|(
operator|(
name|o
operator|.
name|getMethodName
argument_list|(
name|cpg
argument_list|)
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|CONSTRUCTOR_NAME
argument_list|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
name|o
operator|.
name|getArgumentTypes
argument_list|(
name|cpg
argument_list|)
operator|.
name|length
argument_list|)
operator|instanceof
name|UninitializedObjectType
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Possibly initializing object twice. A valid instruction sequence must not have an uninitialized object on the operand stack or in a local variable during a backwards branch, or in a local variable in code protected by an exception handler. Please see The Java Virtual Machine Specification, Second Edition, 4.9.4 (pages 147 and 148) for details."
argument_list|)
expr_stmt|;
block|}
comment|// the o.getClassType(cpg) type has passed pass 2; see visitLoadClass(o).
name|Type
name|t
init|=
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|ObjectType
condition|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|ObjectType
operator|)
name|t
operator|)
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|Verifier
name|v
init|=
name|VerifierFactory
operator|.
name|getVerifier
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|VerificationResult
name|vr
init|=
name|v
operator|.
name|doPass2
argument_list|()
decl_stmt|;
if|if
condition|(
name|vr
operator|.
name|getStatus
argument_list|()
operator|!=
name|VerificationResult
operator|.
name|VERIFIED_OK
condition|)
block|{
name|constraintViolated
argument_list|(
operator|(
name|Instruction
operator|)
name|o
argument_list|,
literal|"Class '"
operator|+
name|name
operator|+
literal|"' is referenced, but cannot be loaded and resolved: '"
operator|+
name|vr
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
name|Type
index|[]
name|argtypes
init|=
name|o
operator|.
name|getArgumentTypes
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
name|int
name|nargs
init|=
name|argtypes
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|nargs
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Type
name|fromStack
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
operator|(
name|nargs
operator|-
literal|1
operator|)
operator|-
name|i
argument_list|)
decl_stmt|;
comment|// 0 to nargs-1
name|Type
name|fromDesc
init|=
name|argtypes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|fromDesc
operator|==
name|Type
operator|.
name|BOOLEAN
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|BYTE
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|CHAR
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|SHORT
condition|)
block|{
name|fromDesc
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fromStack
operator|.
name|equals
argument_list|(
name|fromDesc
argument_list|)
condition|)
block|{
if|if
condition|(
name|fromStack
operator|instanceof
name|ReferenceType
operator|&&
name|fromDesc
operator|instanceof
name|ReferenceType
condition|)
block|{
name|ReferenceType
name|rFromStack
init|=
operator|(
name|ReferenceType
operator|)
name|fromStack
decl_stmt|;
name|ReferenceType
name|rFromDesc
init|=
operator|(
name|ReferenceType
operator|)
name|fromDesc
decl_stmt|;
comment|// TODO: This can only be checked using Staerk-et-al's "set of object types", not
comment|// using a "wider cast object type".
if|if
condition|(
operator|!
name|rFromStack
operator|.
name|isAssignmentCompatibleWith
argument_list|(
name|rFromDesc
argument_list|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a '"
operator|+
name|fromDesc
operator|+
literal|"' but found a '"
operator|+
name|fromStack
operator|+
literal|"' on the stack (which is not assignment compatible)."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a '"
operator|+
name|fromDesc
operator|+
literal|"' but found a '"
operator|+
name|fromStack
operator|+
literal|"' on the stack."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Type
name|objref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
name|nargs
argument_list|)
decl_stmt|;
if|if
condition|(
name|objref
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|objref
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a reference type as 'objectref' on the stack, not a '"
operator|+
name|objref
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|String
name|objref_classname
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|o
operator|.
name|getMethodName
argument_list|(
name|cpg
argument_list|)
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|CONSTRUCTOR_NAME
argument_list|)
operator|)
condition|)
block|{
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
name|objref
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|objref
operator|instanceof
name|ObjectType
operator|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|objref
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting an ObjectType as 'objectref' on the stack, not a '"
operator|+
name|objref
operator|+
literal|"'."
argument_list|)
expr_stmt|;
comment|// could be a ReturnaddressType
block|}
else|else
block|{
name|objref
operator|=
name|GENERIC_ARRAY
expr_stmt|;
block|}
block|}
name|objref_classname
operator|=
operator|(
operator|(
name|ObjectType
operator|)
name|objref
operator|)
operator|.
name|getClassName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|objref
operator|instanceof
name|UninitializedObjectType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting an UninitializedObjectType as 'objectref' on the stack, not a '"
operator|+
name|objref
operator|+
literal|"'. Otherwise, you couldn't invoke a method since an array has no methods (not to speak of a return address)."
argument_list|)
expr_stmt|;
block|}
name|objref_classname
operator|=
operator|(
operator|(
name|UninitializedObjectType
operator|)
name|objref
operator|)
operator|.
name|getInitialized
argument_list|()
operator|.
name|getClassName
argument_list|()
expr_stmt|;
block|}
name|String
name|theClass
init|=
name|o
operator|.
name|getClassName
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Repository
operator|.
name|instanceOf
argument_list|(
name|objref_classname
argument_list|,
name|theClass
argument_list|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'objref' item '"
operator|+
name|objref
operator|+
literal|"' does not implement '"
operator|+
name|theClass
operator|+
literal|"' as expected."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// FIXME: maybe not the best way to handle this
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Missing class: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitINVOKESTATIC
parameter_list|(
name|INVOKESTATIC
name|o
parameter_list|)
block|{
try|try
block|{
comment|// Method is not native, otherwise pass 3 would not happen.
name|Type
name|t
init|=
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|ObjectType
condition|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|ObjectType
operator|)
name|t
operator|)
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|Verifier
name|v
init|=
name|VerifierFactory
operator|.
name|getVerifier
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|VerificationResult
name|vr
init|=
name|v
operator|.
name|doPass2
argument_list|()
decl_stmt|;
if|if
condition|(
name|vr
operator|.
name|getStatus
argument_list|()
operator|!=
name|VerificationResult
operator|.
name|VERIFIED_OK
condition|)
block|{
name|constraintViolated
argument_list|(
operator|(
name|Instruction
operator|)
name|o
argument_list|,
literal|"Class '"
operator|+
name|name
operator|+
literal|"' is referenced, but cannot be loaded and resolved: '"
operator|+
name|vr
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
name|Type
index|[]
name|argtypes
init|=
name|o
operator|.
name|getArgumentTypes
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
name|int
name|nargs
init|=
name|argtypes
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|nargs
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Type
name|fromStack
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
operator|(
name|nargs
operator|-
literal|1
operator|)
operator|-
name|i
argument_list|)
decl_stmt|;
comment|// 0 to nargs-1
name|Type
name|fromDesc
init|=
name|argtypes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|fromDesc
operator|==
name|Type
operator|.
name|BOOLEAN
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|BYTE
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|CHAR
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|SHORT
condition|)
block|{
name|fromDesc
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fromStack
operator|.
name|equals
argument_list|(
name|fromDesc
argument_list|)
condition|)
block|{
if|if
condition|(
name|fromStack
operator|instanceof
name|ReferenceType
operator|&&
name|fromDesc
operator|instanceof
name|ReferenceType
condition|)
block|{
name|ReferenceType
name|rFromStack
init|=
operator|(
name|ReferenceType
operator|)
name|fromStack
decl_stmt|;
name|ReferenceType
name|rFromDesc
init|=
operator|(
name|ReferenceType
operator|)
name|fromDesc
decl_stmt|;
comment|// TODO: This check can possibly only be done using Staerk-et-al's "set of object types"
comment|// instead of a "wider cast object type" created during verification.
if|if
condition|(
operator|!
name|rFromStack
operator|.
name|isAssignmentCompatibleWith
argument_list|(
name|rFromDesc
argument_list|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a '"
operator|+
name|fromDesc
operator|+
literal|"' but found a '"
operator|+
name|fromStack
operator|+
literal|"' on the stack (which is not assignment compatible)."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a '"
operator|+
name|fromDesc
operator|+
literal|"' but found a '"
operator|+
name|fromStack
operator|+
literal|"' on the stack."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// FIXME: maybe not the best way to handle this
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Missing class: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitINVOKEVIRTUAL
parameter_list|(
name|INVOKEVIRTUAL
name|o
parameter_list|)
block|{
try|try
block|{
comment|// the o.getClassType(cpg) type has passed pass 2; see visitLoadClass(o).
name|Type
name|t
init|=
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|ObjectType
condition|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|ObjectType
operator|)
name|t
operator|)
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|Verifier
name|v
init|=
name|VerifierFactory
operator|.
name|getVerifier
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|VerificationResult
name|vr
init|=
name|v
operator|.
name|doPass2
argument_list|()
decl_stmt|;
if|if
condition|(
name|vr
operator|.
name|getStatus
argument_list|()
operator|!=
name|VerificationResult
operator|.
name|VERIFIED_OK
condition|)
block|{
name|constraintViolated
argument_list|(
operator|(
name|Instruction
operator|)
name|o
argument_list|,
literal|"Class '"
operator|+
name|name
operator|+
literal|"' is referenced, but cannot be loaded and resolved: '"
operator|+
name|vr
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
name|Type
index|[]
name|argtypes
init|=
name|o
operator|.
name|getArgumentTypes
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
name|int
name|nargs
init|=
name|argtypes
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|nargs
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Type
name|fromStack
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
operator|(
name|nargs
operator|-
literal|1
operator|)
operator|-
name|i
argument_list|)
decl_stmt|;
comment|// 0 to nargs-1
name|Type
name|fromDesc
init|=
name|argtypes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|fromDesc
operator|==
name|Type
operator|.
name|BOOLEAN
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|BYTE
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|CHAR
operator|||
name|fromDesc
operator|==
name|Type
operator|.
name|SHORT
condition|)
block|{
name|fromDesc
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fromStack
operator|.
name|equals
argument_list|(
name|fromDesc
argument_list|)
condition|)
block|{
if|if
condition|(
name|fromStack
operator|instanceof
name|ReferenceType
operator|&&
name|fromDesc
operator|instanceof
name|ReferenceType
condition|)
block|{
name|ReferenceType
name|rFromStack
init|=
operator|(
name|ReferenceType
operator|)
name|fromStack
decl_stmt|;
name|ReferenceType
name|rFromDesc
init|=
operator|(
name|ReferenceType
operator|)
name|fromDesc
decl_stmt|;
comment|// TODO: This can possibly only be checked when using Staerk-et-al's "set of object types" instead
comment|// of a single "wider cast object type" created during verification.
if|if
condition|(
operator|!
name|rFromStack
operator|.
name|isAssignmentCompatibleWith
argument_list|(
name|rFromDesc
argument_list|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a '"
operator|+
name|fromDesc
operator|+
literal|"' but found a '"
operator|+
name|fromStack
operator|+
literal|"' on the stack (which is not assignment compatible)."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a '"
operator|+
name|fromDesc
operator|+
literal|"' but found a '"
operator|+
name|fromStack
operator|+
literal|"' on the stack."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Type
name|objref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
name|nargs
argument_list|)
decl_stmt|;
if|if
condition|(
name|objref
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|objref
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a reference type as 'objectref' on the stack, not a '"
operator|+
name|objref
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
name|objref
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|objref
operator|instanceof
name|ObjectType
operator|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|objref
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting an ObjectType as 'objectref' on the stack, not a '"
operator|+
name|objref
operator|+
literal|"'."
argument_list|)
expr_stmt|;
comment|// could be a ReturnaddressType
block|}
else|else
block|{
name|objref
operator|=
name|GENERIC_ARRAY
expr_stmt|;
block|}
block|}
name|String
name|objref_classname
init|=
operator|(
operator|(
name|ObjectType
operator|)
name|objref
operator|)
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|String
name|theClass
init|=
name|o
operator|.
name|getClassName
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Repository
operator|.
name|instanceOf
argument_list|(
name|objref_classname
argument_list|,
name|theClass
argument_list|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'objref' item '"
operator|+
name|objref
operator|+
literal|"' does not implement '"
operator|+
name|theClass
operator|+
literal|"' as expected."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// FIXME: maybe not the best way to handle this
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Missing class: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIOR
parameter_list|(
name|IOR
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIREM
parameter_list|(
name|IREM
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIRETURN
parameter_list|(
name|IRETURN
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitISHL
parameter_list|(
name|ISHL
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitISHR
parameter_list|(
name|ISHR
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitISTORE
parameter_list|(
name|ISTORE
name|o
parameter_list|)
block|{
comment|//visitStoreInstruction(StoreInstruction) is called before.
comment|// Nothing else needs to be done here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitISUB
parameter_list|(
name|ISUB
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIUSHR
parameter_list|(
name|IUSHR
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitIXOR
parameter_list|(
name|IXOR
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitJSR
parameter_list|(
name|JSR
name|o
parameter_list|)
block|{
comment|// nothing to do here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitJSR_W
parameter_list|(
name|JSR_W
name|o
parameter_list|)
block|{
comment|// nothing to do here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitL2D
parameter_list|(
name|L2D
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitL2F
parameter_list|(
name|L2F
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitL2I
parameter_list|(
name|L2I
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLADD
parameter_list|(
name|LADD
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLALOAD
parameter_list|(
name|LALOAD
name|o
parameter_list|)
block|{
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-top must be of type long[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|Type
name|t
init|=
operator|(
operator|(
name|ArrayType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|)
operator|)
operator|.
name|getBasicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-top must be of type long[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLAND
parameter_list|(
name|LAND
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLASTORE
parameter_list|(
name|LASTORE
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-next-to-top must be of type long[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|Type
name|t
init|=
operator|(
operator|(
name|ArrayType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|)
operator|)
operator|.
name|getBasicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-next-to-top must be of type long[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLCMP
parameter_list|(
name|LCMP
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLCONST
parameter_list|(
name|LCONST
name|o
parameter_list|)
block|{
comment|// Nothing to do here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLDC
parameter_list|(
name|LDC
name|o
parameter_list|)
block|{
comment|// visitCPInstruction is called first.
name|Constant
name|c
init|=
name|cpg
operator|.
name|getConstant
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|c
operator|instanceof
name|ConstantInteger
operator|)
operator|||
operator|(
name|c
operator|instanceof
name|ConstantFloat
operator|)
operator|||
operator|(
name|c
operator|instanceof
name|ConstantString
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Referenced constant should be a CONSTANT_Integer, a CONSTANT_Float or a CONSTANT_String, but is '"
operator|+
name|c
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLDC_W
parameter_list|(
name|LDC_W
name|o
parameter_list|)
block|{
comment|// visitCPInstruction is called first.
name|Constant
name|c
init|=
name|cpg
operator|.
name|getConstant
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|c
operator|instanceof
name|ConstantInteger
operator|)
operator|||
operator|(
name|c
operator|instanceof
name|ConstantFloat
operator|)
operator|||
operator|(
name|c
operator|instanceof
name|ConstantString
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Referenced constant should be a CONSTANT_Integer, a CONSTANT_Float or a CONSTANT_String, but is '"
operator|+
name|c
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLDC2_W
parameter_list|(
name|LDC2_W
name|o
parameter_list|)
block|{
comment|// visitCPInstruction is called first.
name|Constant
name|c
init|=
name|cpg
operator|.
name|getConstant
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|c
operator|instanceof
name|ConstantLong
operator|)
operator|||
operator|(
name|c
operator|instanceof
name|ConstantDouble
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Referenced constant should be a CONSTANT_Integer, a CONSTANT_Float or a CONSTANT_String, but is '"
operator|+
name|c
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLDIV
parameter_list|(
name|LDIV
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLLOAD
parameter_list|(
name|LLOAD
name|o
parameter_list|)
block|{
comment|//visitLoadInstruction(LoadInstruction) is called before.
comment|// Nothing else needs to be done here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLMUL
parameter_list|(
name|LMUL
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLNEG
parameter_list|(
name|LNEG
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLOOKUPSWITCH
parameter_list|(
name|LOOKUPSWITCH
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
comment|// See also pass 3a.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLOR
parameter_list|(
name|LOR
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLREM
parameter_list|(
name|LREM
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLRETURN
parameter_list|(
name|LRETURN
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLSHL
parameter_list|(
name|LSHL
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLSHR
parameter_list|(
name|LSHR
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLSTORE
parameter_list|(
name|LSTORE
name|o
parameter_list|)
block|{
comment|//visitStoreInstruction(StoreInstruction) is called before.
comment|// Nothing else needs to be done here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLSUB
parameter_list|(
name|LSUB
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLUSHR
parameter_list|(
name|LUSHR
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitLXOR
parameter_list|(
name|LXOR
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|!=
name|Type
operator|.
name|LONG
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of type 'long', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitMONITORENTER
parameter_list|(
name|MONITORENTER
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The stack top should be of a ReferenceType, but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitMONITOREXIT
parameter_list|(
name|MONITOREXIT
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The stack top should be of a ReferenceType, but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
operator|(
name|ReferenceType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitMULTIANEWARRAY
parameter_list|(
name|MULTIANEWARRAY
name|o
parameter_list|)
block|{
name|int
name|dimensions
init|=
name|o
operator|.
name|getDimensions
argument_list|()
decl_stmt|;
comment|// Dimensions argument is okay: see Pass 3a.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dimensions
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
name|i
argument_list|)
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The '"
operator|+
name|dimensions
operator|+
literal|"' upper stack types should be 'int' but aren't."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The runtime constant pool item at that index must be a symbolic reference to a class,
comment|// array, or interface type. See Pass 3a.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitNEW
parameter_list|(
name|NEW
name|o
parameter_list|)
block|{
comment|//visitCPInstruction(CPInstruction) has been called before.
comment|//visitLoadClass(LoadClass) has been called before.
name|Type
name|t
init|=
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|ReferenceType
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"NEW.getType() returning a non-reference type?!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|ObjectType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a class type (ObjectType) to work on. Found: '"
operator|+
name|t
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|ObjectType
name|obj
init|=
operator|(
name|ObjectType
operator|)
name|t
decl_stmt|;
comment|//e.g.: Don't instantiate interfaces
if|if
condition|(
operator|!
name|obj
operator|.
name|referencesClass
argument_list|()
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a class type (ObjectType) to work on. Found: '"
operator|+
name|obj
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitNEWARRAY
parameter_list|(
name|NEWARRAY
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitNOP
parameter_list|(
name|NOP
name|o
parameter_list|)
block|{
comment|// nothing is to be done here.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitPOP
parameter_list|(
name|POP
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack top size should be 1 but stack top is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"' of size '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitPOP2
parameter_list|(
name|POP2
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack top size should be 2 but stack top is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"' of size '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitPUTFIELD
parameter_list|(
name|PUTFIELD
name|o
parameter_list|)
block|{
try|try
block|{
name|Type
name|objectref
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|objectref
operator|instanceof
name|ObjectType
operator|)
operator|||
operator|(
name|objectref
operator|==
name|Type
operator|.
name|NULL
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-top should be an object reference that's not an array reference, but is '"
operator|+
name|objectref
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|String
name|field_name
init|=
name|o
operator|.
name|getFieldName
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
name|JavaClass
name|jc
init|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|o
operator|.
name|getClassType
argument_list|(
name|cpg
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
name|Field
index|[]
name|fields
init|=
name|jc
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|field_name
argument_list|)
condition|)
block|{
name|Type
name|f_type
init|=
name|Type
operator|.
name|getType
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
name|Type
name|o_type
init|=
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
comment|/* TODO: Check if assignment compatibility is sufficient. 				   * What does Sun do? 				   */
if|if
condition|(
name|f_type
operator|.
name|equals
argument_list|(
name|o_type
argument_list|)
condition|)
block|{
name|f
operator|=
name|fields
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Field not found?!?"
argument_list|)
throw|;
block|}
name|Type
name|value
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
decl_stmt|;
name|Type
name|t
init|=
name|Type
operator|.
name|getType
argument_list|(
name|f
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
name|Type
name|shouldbe
init|=
name|t
decl_stmt|;
if|if
condition|(
name|shouldbe
operator|==
name|Type
operator|.
name|BOOLEAN
operator|||
name|shouldbe
operator|==
name|Type
operator|.
name|BYTE
operator|||
name|shouldbe
operator|==
name|Type
operator|.
name|CHAR
operator|||
name|shouldbe
operator|==
name|Type
operator|.
name|SHORT
condition|)
block|{
name|shouldbe
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|ReferenceType
condition|)
block|{
name|ReferenceType
name|rvalue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|ReferenceType
condition|)
block|{
name|rvalue
operator|=
operator|(
name|ReferenceType
operator|)
name|value
expr_stmt|;
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
name|rvalue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The stack top type '"
operator|+
name|value
operator|+
literal|"' is not of a reference type as expected."
argument_list|)
expr_stmt|;
block|}
comment|// TODO: This can possibly only be checked using Staerk-et-al's "set-of-object types", not
comment|// using "wider cast object types" created during verification.
comment|// Comment it out if you encounter problems. See also the analogon at visitPUTSTATIC.
if|if
condition|(
operator|!
operator|(
name|rvalue
operator|.
name|isAssignmentCompatibleWith
argument_list|(
name|shouldbe
argument_list|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The stack top type '"
operator|+
name|value
operator|+
literal|"' is not assignment compatible with '"
operator|+
name|shouldbe
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|shouldbe
operator|!=
name|value
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The stack top type '"
operator|+
name|value
operator|+
literal|"' is not of type '"
operator|+
name|shouldbe
operator|+
literal|"' as expected."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|f
operator|.
name|isProtected
argument_list|()
condition|)
block|{
name|ObjectType
name|classtype
init|=
name|o
operator|.
name|getClassType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
name|ObjectType
name|curr
init|=
operator|new
name|ObjectType
argument_list|(
name|mg
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classtype
operator|.
name|equals
argument_list|(
name|curr
argument_list|)
operator|||
name|curr
operator|.
name|subclassOf
argument_list|(
name|classtype
argument_list|)
condition|)
block|{
name|Type
name|tp
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|tp
operator|instanceof
name|ObjectType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The 'objectref' must refer to an object that's not an array. Found instead: '"
operator|+
name|tp
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|ObjectType
name|objreftype
init|=
operator|(
name|ObjectType
operator|)
name|tp
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|objreftype
operator|.
name|equals
argument_list|(
name|curr
argument_list|)
operator|||
name|objreftype
operator|.
name|subclassOf
argument_list|(
name|curr
argument_list|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The referenced field has the ACC_PROTECTED modifier, and it's a member of the current class or a superclass of the current class. However, the referenced object type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"' is not the current class or a subclass of the current class."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// TODO: Could go into Pass 3a.
if|if
condition|(
name|f
operator|.
name|isStatic
argument_list|()
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Referenced field '"
operator|+
name|f
operator|+
literal|"' is static which it shouldn't be."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// FIXME: maybe not the best way to handle this
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Missing class: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitPUTSTATIC
parameter_list|(
name|PUTSTATIC
name|o
parameter_list|)
block|{
try|try
block|{
name|String
name|field_name
init|=
name|o
operator|.
name|getFieldName
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
name|JavaClass
name|jc
init|=
name|Repository
operator|.
name|lookupClass
argument_list|(
name|o
operator|.
name|getClassType
argument_list|(
name|cpg
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
name|Field
index|[]
name|fields
init|=
name|jc
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|field_name
argument_list|)
condition|)
block|{
name|Type
name|f_type
init|=
name|Type
operator|.
name|getType
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
name|Type
name|o_type
init|=
name|o
operator|.
name|getType
argument_list|(
name|cpg
argument_list|)
decl_stmt|;
comment|/* TODO: Check if assignment compatibility is sufficient. 				   * What does Sun do? 				   */
if|if
condition|(
name|f_type
operator|.
name|equals
argument_list|(
name|o_type
argument_list|)
condition|)
block|{
name|f
operator|=
name|fields
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Field not found?!?"
argument_list|)
throw|;
block|}
name|Type
name|value
init|=
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
decl_stmt|;
name|Type
name|t
init|=
name|Type
operator|.
name|getType
argument_list|(
name|f
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
name|Type
name|shouldbe
init|=
name|t
decl_stmt|;
if|if
condition|(
name|shouldbe
operator|==
name|Type
operator|.
name|BOOLEAN
operator|||
name|shouldbe
operator|==
name|Type
operator|.
name|BYTE
operator|||
name|shouldbe
operator|==
name|Type
operator|.
name|CHAR
operator|||
name|shouldbe
operator|==
name|Type
operator|.
name|SHORT
condition|)
block|{
name|shouldbe
operator|=
name|Type
operator|.
name|INT
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|ReferenceType
condition|)
block|{
name|ReferenceType
name|rvalue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|ReferenceType
condition|)
block|{
name|rvalue
operator|=
operator|(
name|ReferenceType
operator|)
name|value
expr_stmt|;
name|referenceTypeIsInitialized
argument_list|(
name|o
argument_list|,
name|rvalue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The stack top type '"
operator|+
name|value
operator|+
literal|"' is not of a reference type as expected."
argument_list|)
expr_stmt|;
block|}
comment|// TODO: This can possibly only be checked using Staerk-et-al's "set-of-object types", not
comment|// using "wider cast object types" created during verification.
comment|// Comment it out if you encounter problems. See also the analogon at visitPUTFIELD.
if|if
condition|(
operator|!
operator|(
name|rvalue
operator|.
name|isAssignmentCompatibleWith
argument_list|(
name|shouldbe
argument_list|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The stack top type '"
operator|+
name|value
operator|+
literal|"' is not assignment compatible with '"
operator|+
name|shouldbe
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|shouldbe
operator|!=
name|value
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The stack top type '"
operator|+
name|value
operator|+
literal|"' is not of type '"
operator|+
name|shouldbe
operator|+
literal|"' as expected."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: Interface fields may be assigned to only once. (Hard to implement in
comment|//       JustIce's execution model). This may only happen in<clinit>, see Pass 3a.
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// FIXME: maybe not the best way to handle this
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Missing class: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitRET
parameter_list|(
name|RET
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|locals
argument_list|()
operator|.
name|get
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|instanceof
name|ReturnaddressType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Expecting a ReturnaddressType in local variable "
operator|+
name|o
operator|.
name|getIndex
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locals
argument_list|()
operator|.
name|get
argument_list|(
name|o
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|==
name|ReturnaddressType
operator|.
name|NO_TARGET
condition|)
block|{
throw|throw
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Oops: RET expecting a target!"
argument_list|)
throw|;
block|}
comment|// Other constraints such as non-allowed overlapping subroutines are enforced
comment|// while building the Subroutines data structure.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitRETURN
parameter_list|(
name|RETURN
name|o
parameter_list|)
block|{
if|if
condition|(
name|mg
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|CONSTRUCTOR_NAME
argument_list|)
condition|)
block|{
comment|// If we leave an<init> method
if|if
condition|(
operator|(
name|Frame
operator|.
name|_this
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
operator|(
name|mg
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|OBJECT
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Leaving a constructor that itself did not call a constructor."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitSALOAD
parameter_list|(
name|SALOAD
name|o
parameter_list|)
block|{
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-top must be of type short[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|Type
name|t
init|=
operator|(
operator|(
name|ArrayType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|)
operator|)
operator|.
name|getBasicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|Type
operator|.
name|SHORT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-top must be of type short[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitSASTORE
parameter_list|(
name|SASTORE
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|!=
name|Type
operator|.
name|INT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of type 'int', but of type '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|==
name|Type
operator|.
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|ArrayType
operator|)
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-next-to-top must be of type short[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
name|Type
name|t
init|=
operator|(
operator|(
name|ArrayType
operator|)
operator|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|)
operator|)
operator|.
name|getBasicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
name|Type
operator|.
name|SHORT
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"Stack next-to-next-to-top must be of type short[] but is '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitSIPUSH
parameter_list|(
name|SIPUSH
name|o
parameter_list|)
block|{
comment|// nothing to do here. Generic visitXXX() methods did the trick before.
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitSWAP
parameter_list|(
name|SWAP
name|o
parameter_list|)
block|{
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack top is not of size '1', but of size '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|constraintViolated
argument_list|(
name|o
argument_list|,
literal|"The value at the stack next-to-top is not of size '1', but of size '"
operator|+
name|stack
argument_list|()
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|getSize
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Ensures the specific preconditions of the said instruction. 	 */
specifier|public
name|void
name|visitTABLESWITCH
parameter_list|(
name|TABLESWITCH
name|o
parameter_list|)
block|{
name|indexOfInt
argument_list|(
name|o
argument_list|,
name|stack
argument_list|()
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
comment|// See Pass 3a.
block|}
block|}
end_class

end_unit

