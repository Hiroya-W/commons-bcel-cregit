begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Toolkit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * A graphical user interface application demonstrating JustIce.  *  * @version $Id$  * @author Enver Haase  */
end_comment

begin_class
specifier|public
class|class
name|GraphicalVerifier
block|{
name|boolean
name|packFrame
init|=
literal|false
decl_stmt|;
comment|/** Constructor. */
specifier|public
name|GraphicalVerifier
parameter_list|()
block|{
name|VerifierAppFrame
name|frame
init|=
operator|new
name|VerifierAppFrame
argument_list|()
decl_stmt|;
comment|//Frames überprüfen, die voreingestellte Größe haben
comment|//Frames packen, die nutzbare bevorzugte Größeninformationen enthalten, z.B. aus ihrem Layout
if|if
condition|(
name|packFrame
condition|)
block|{
name|frame
operator|.
name|pack
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
comment|//Das Fenster zentrieren
name|Dimension
name|screenSize
init|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getScreenSize
argument_list|()
decl_stmt|;
name|Dimension
name|frameSize
init|=
name|frame
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|frameSize
operator|.
name|height
operator|>
name|screenSize
operator|.
name|height
condition|)
block|{
name|frameSize
operator|.
name|height
operator|=
name|screenSize
operator|.
name|height
expr_stmt|;
block|}
if|if
condition|(
name|frameSize
operator|.
name|width
operator|>
name|screenSize
operator|.
name|width
condition|)
block|{
name|frameSize
operator|.
name|width
operator|=
name|screenSize
operator|.
name|width
expr_stmt|;
block|}
name|frame
operator|.
name|setLocation
argument_list|(
operator|(
name|screenSize
operator|.
name|width
operator|-
name|frameSize
operator|.
name|width
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|screenSize
operator|.
name|height
operator|-
name|frameSize
operator|.
name|height
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|frame
operator|.
name|classNamesJList
operator|.
name|setModel
argument_list|(
operator|new
name|VerifierFactoryListModel
argument_list|()
argument_list|)
expr_stmt|;
name|VerifierFactory
operator|.
name|getVerifier
argument_list|(
name|Type
operator|.
name|OBJECT
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fill list with java.lang.Object
name|frame
operator|.
name|classNamesJList
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// default, will verify java.lang.Object
block|}
comment|/** Main method. */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|UIManager
operator|.
name|getSystemLookAndFeelClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
operator|new
name|GraphicalVerifier
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

