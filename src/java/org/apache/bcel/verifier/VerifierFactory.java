begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_comment
comment|/**  * This class produces instances of the Verifier class. Its purpose is to make  * sure that they are singleton instances with respect to the class name they  * operate on. That means, for every class (represented by a unique fully qualified  * class name) there is exactly one Verifier.  *  * @version $Id$  * @author<A HREF="http://www.inf.fu-berlin.de/~ehaase"/>Enver Haase</A>  * @see org.apache.bcel.verifier.Verifier  */
end_comment

begin_class
specifier|public
class|class
name|VerifierFactory
block|{
comment|/** 	 * The HashMap that holds the data about the already-constructed Verifier instances. 	 */
specifier|private
specifier|static
name|HashMap
name|hashMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/** 	 * The VerifierFactoryObserver instances that observe the VerifierFactory. 	 */
specifier|private
specifier|static
name|Vector
name|observers
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
comment|/** 	 * The VerifierFactory is not instantiable. 	 */
specifier|private
name|VerifierFactory
parameter_list|()
block|{
block|}
comment|/** 	 * Returns the (only) verifier responsible for the class with the given name. 	 * Possibly a new Verifier object is transparently created. 	 * @return the (only) verifier responsible for the class with the given name. 	 */
specifier|public
specifier|static
name|Verifier
name|getVerifier
parameter_list|(
name|String
name|fully_qualified_classname
parameter_list|)
block|{
name|fully_qualified_classname
operator|=
name|fully_qualified_classname
expr_stmt|;
name|Verifier
name|v
init|=
operator|(
name|Verifier
operator|)
operator|(
name|hashMap
operator|.
name|get
argument_list|(
name|fully_qualified_classname
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|Verifier
argument_list|(
name|fully_qualified_classname
argument_list|)
expr_stmt|;
name|hashMap
operator|.
name|put
argument_list|(
name|fully_qualified_classname
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|notify
argument_list|(
name|fully_qualified_classname
argument_list|)
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
comment|/** 	 * Notifies the observers of a newly generated Verifier. 	 */
specifier|private
specifier|static
name|void
name|notify
parameter_list|(
name|String
name|fully_qualified_classname
parameter_list|)
block|{
comment|// notify the observers
name|Iterator
name|i
init|=
name|observers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|VerifierFactoryObserver
name|vfo
init|=
operator|(
name|VerifierFactoryObserver
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|vfo
operator|.
name|update
argument_list|(
name|fully_qualified_classname
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Returns all Verifier instances created so far. 	 * This is useful when a Verifier recursively lets 	 * the VerifierFactory create other Verifier instances 	 * and if you want to verify the transitive hull of 	 * referenced class files. 	 */
specifier|public
specifier|static
name|Verifier
index|[]
name|getVerifiers
parameter_list|()
block|{
name|Verifier
index|[]
name|vs
init|=
operator|new
name|Verifier
index|[
name|hashMap
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
operator|(
name|Verifier
index|[]
operator|)
operator|(
name|hashMap
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|vs
argument_list|)
operator|)
return|;
comment|// Because vs is big enough, vs is used to store the values into and returned!
block|}
comment|/** 	 * Adds the VerifierFactoryObserver o to the list of observers. 	 */
specifier|public
specifier|static
name|void
name|attach
parameter_list|(
name|VerifierFactoryObserver
name|o
parameter_list|)
block|{
name|observers
operator|.
name|addElement
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Removes the VerifierFactoryObserver o from the list of observers. 	 */
specifier|public
specifier|static
name|void
name|detach
parameter_list|(
name|VerifierFactoryObserver
name|o
parameter_list|)
block|{
name|observers
operator|.
name|removeElement
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

