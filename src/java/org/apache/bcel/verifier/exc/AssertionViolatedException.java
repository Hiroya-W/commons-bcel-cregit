begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|exc
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_comment
comment|/**  * Instances of this class should never be thrown. When such an instance is thrown,  * this is due to an INTERNAL ERROR of BCEL's class file verifier&quot;JustIce&quot;.  *  * @version $Id$  * @author<A HREF="http://www.inf.fu-berlin.de/~ehaase"/>Enver Haase</A>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|AssertionViolatedException
extends|extends
name|RuntimeException
block|{
comment|/** The error message. */
specifier|private
name|String
name|detailMessage
decl_stmt|;
comment|/** Constructs a new AssertionViolatedException with null as its error message string. */
specifier|public
name|AssertionViolatedException
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructs a new AssertionViolatedException with the specified error message preceded 	 * by&quot;INTERNAL ERROR:&quot;. 	 */
specifier|public
name|AssertionViolatedException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
operator|=
literal|"INTERNAL ERROR: "
operator|+
name|message
argument_list|)
expr_stmt|;
comment|// Thanks to Java, the constructor call here must be first.
name|detailMessage
operator|=
name|message
expr_stmt|;
block|}
comment|/** Extends the error message with a string before ("pre") and after ("post") the 	    'old' error message. All of these three strings are allowed to be null, and null 	    is always replaced by the empty string (""). In particular, after invoking this 	    method, the error message of this object can no longer be null. 	*/
specifier|public
name|void
name|extendMessage
parameter_list|(
name|String
name|pre
parameter_list|,
name|String
name|post
parameter_list|)
block|{
if|if
condition|(
name|pre
operator|==
literal|null
condition|)
name|pre
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|detailMessage
operator|==
literal|null
condition|)
name|detailMessage
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|post
operator|==
literal|null
condition|)
name|post
operator|=
literal|""
expr_stmt|;
name|detailMessage
operator|=
name|pre
operator|+
name|detailMessage
operator|+
name|post
expr_stmt|;
block|}
comment|/** 	 * Returns the error message string of this AssertionViolatedException object. 	 * @return the error message string of this AssertionViolatedException. 	 */
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|detailMessage
return|;
block|}
comment|/**  	 * DO NOT USE. It's for experimental testing during development only. 	 */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|AssertionViolatedException
name|ave
init|=
operator|new
name|AssertionViolatedException
argument_list|(
literal|"Oops!"
argument_list|)
decl_stmt|;
name|ave
operator|.
name|extendMessage
argument_list|(
literal|"\nFOUND:\n\t"
argument_list|,
literal|"\nExiting!!\n"
argument_list|)
expr_stmt|;
throw|throw
name|ave
throw|;
block|}
comment|/** 	 * Returns the backtrace of this AssertionViolatedException as a String. 	 * @return The backtrace of this AssertionViolatedException as a String. 	 */
specifier|public
name|String
name|getStackTrace
parameter_list|()
block|{
return|return
name|Utility
operator|.
name|getStackTrace
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

