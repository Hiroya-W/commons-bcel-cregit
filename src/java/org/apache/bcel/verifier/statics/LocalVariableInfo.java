begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|statics
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|exc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_comment
comment|/**  * A utility class holding the information about  * the name and the type of a local variable in  * a given slot (== index). This information  * often changes in course of byte code offsets.  *  * @version $Id$  * @author<A HREF="http://www.inf.fu-berlin.de/~ehaase"/>Enver Haase</A>  */
end_comment

begin_class
specifier|public
class|class
name|LocalVariableInfo
block|{
comment|/** The types database. KEY: String representing the offset integer. */
specifier|private
name|Hashtable
name|types
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
comment|/** The names database. KEY: String representing the offset integer. */
specifier|private
name|Hashtable
name|names
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
comment|/** 	 * Adds a name of a local variable and a certain slot to our 'names' 	 * (Hashtable) database. 	 */
specifier|private
name|void
name|setName
parameter_list|(
name|int
name|offset
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|names
operator|.
name|put
argument_list|(
operator|(
operator|(
name|Integer
operator|.
name|toString
argument_list|(
name|offset
argument_list|)
operator|)
operator|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Adds a type of a local variable and a certain slot to our 'types' 	 * (Hashtable) database. 	 */
specifier|private
name|void
name|setType
parameter_list|(
name|int
name|offset
parameter_list|,
name|Type
name|t
parameter_list|)
block|{
name|types
operator|.
name|put
argument_list|(
operator|(
operator|(
name|Integer
operator|.
name|toString
argument_list|(
name|offset
argument_list|)
operator|)
operator|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Returns the type of the local variable that uses this local 	 * variable slot at the given bytecode offset. 	 * Care for legal bytecode offsets yourself, otherwise the return value 	 * might be wrong. 	 * May return 'null' if nothing is known about the type of this local 	 * variable slot at the given bytecode offset. 	 */
specifier|public
name|Type
name|getType
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
operator|(
name|Type
operator|)
name|types
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|offset
argument_list|)
argument_list|)
return|;
block|}
comment|/** 	 * Returns the name of the local variable that uses this local 	 * variable slot at the given bytecode offset. 	 * Care for legal bytecode offsets yourself, otherwise the return value 	 * might be wrong. 	 * May return 'null' if nothing is known about the type of this local 	 * variable slot at the given bytecode offset. 	 */
specifier|public
name|String
name|getName
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
operator|(
name|names
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|offset
argument_list|)
argument_list|)
operator|)
return|;
block|}
comment|/** 	 * Adds some information about this local variable (slot). 	 * @throws LocalVariableInfoInconsistentException if the new information conflicts 	 *         with already gathered information. 	 */
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|startpc
parameter_list|,
name|int
name|length
parameter_list|,
name|Type
name|t
parameter_list|)
throws|throws
name|LocalVariableInfoInconsistentException
block|{
for|for
control|(
name|int
name|i
init|=
name|startpc
init|;
name|i
operator|<=
name|startpc
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// incl/incl-notation!
name|add
argument_list|(
name|i
argument_list|,
name|name
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Adds information about name and type for a given offset. 	 * @throws LocalVariableInfoInconsistentException if the new information conflicts 	 *         with already gathered information. 	 */
specifier|private
name|void
name|add
parameter_list|(
name|int
name|offset
parameter_list|,
name|String
name|name
parameter_list|,
name|Type
name|t
parameter_list|)
throws|throws
name|LocalVariableInfoInconsistentException
block|{
if|if
condition|(
name|getName
argument_list|(
name|offset
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|getName
argument_list|(
name|offset
argument_list|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LocalVariableInfoInconsistentException
argument_list|(
literal|"At bytecode offset '"
operator|+
name|offset
operator|+
literal|"' a local variable has two different names: '"
operator|+
name|getName
argument_list|(
name|offset
argument_list|)
operator|+
literal|"' and '"
operator|+
name|name
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|getType
argument_list|(
name|offset
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|getType
argument_list|(
name|offset
argument_list|)
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LocalVariableInfoInconsistentException
argument_list|(
literal|"At bytecode offset '"
operator|+
name|offset
operator|+
literal|"' a local variable has two different types: '"
operator|+
name|getType
argument_list|(
name|offset
argument_list|)
operator|+
literal|"' and '"
operator|+
name|t
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
name|setName
argument_list|(
name|offset
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|setType
argument_list|(
name|offset
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

