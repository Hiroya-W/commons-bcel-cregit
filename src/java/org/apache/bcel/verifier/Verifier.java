begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|statics
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|verifier
operator|.
name|structurals
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * A Verifier instance is there to verify a class file according to The Java Virtual  * Machine Specification, 2nd Edition.  *  * Pass-3b-verification includes pass-3a-verification;  * pass-3a-verification includes pass-2-verification;  * pass-2-verification includes pass-1-verification.  *  * A Verifier creates PassVerifier instances to perform the actual verification.  * Verifier instances are usually generated by the VerifierFactory.  *  * @version $Id$  * @author<A HREF="http://www.inf.fu-berlin.de/~ehaase"/>Enver Haase</A>  * @see org.apache.bcel.verifier.VerifierFactory  * @see org.apache.bcel.verifier.PassVerifier  */
end_comment

begin_class
specifier|public
class|class
name|Verifier
block|{
comment|/** 	 * The name of the class this verifier operates on. 	 */
specifier|private
specifier|final
name|String
name|classname
decl_stmt|;
comment|/** A Pass1Verifier for this Verifier instance. */
specifier|private
name|Pass1Verifier
name|p1v
decl_stmt|;
comment|/** A Pass2Verifier for this Verifier instance. */
specifier|private
name|Pass2Verifier
name|p2v
decl_stmt|;
comment|/** The Pass3aVerifiers for this Verifier instance. Key: Interned string specifying the method number. */
specifier|private
name|HashMap
name|p3avs
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/** The Pass3bVerifiers for this Verifier instance. Key: Interned string specifying the method number. */
specifier|private
name|HashMap
name|p3bvs
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/** Returns the VerificationResult for the given pass. */
specifier|public
name|VerificationResult
name|doPass1
parameter_list|()
block|{
if|if
condition|(
name|p1v
operator|==
literal|null
condition|)
block|{
name|p1v
operator|=
operator|new
name|Pass1Verifier
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|p1v
operator|.
name|verify
argument_list|()
return|;
block|}
comment|/** Returns the VerificationResult for the given pass. */
specifier|public
name|VerificationResult
name|doPass2
parameter_list|()
block|{
if|if
condition|(
name|p2v
operator|==
literal|null
condition|)
block|{
name|p2v
operator|=
operator|new
name|Pass2Verifier
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|p2v
operator|.
name|verify
argument_list|()
return|;
block|}
comment|/** Returns the VerificationResult for the given pass. */
specifier|public
name|VerificationResult
name|doPass3a
parameter_list|(
name|int
name|method_no
parameter_list|)
block|{
name|String
name|key
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|method_no
argument_list|)
decl_stmt|;
name|Pass3aVerifier
name|p3av
decl_stmt|;
name|p3av
operator|=
operator|(
name|Pass3aVerifier
operator|)
operator|(
name|p3avs
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|p3avs
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
name|p3av
operator|=
operator|new
name|Pass3aVerifier
argument_list|(
name|this
argument_list|,
name|method_no
argument_list|)
expr_stmt|;
name|p3avs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|p3av
argument_list|)
expr_stmt|;
block|}
return|return
name|p3av
operator|.
name|verify
argument_list|()
return|;
block|}
comment|/** Returns the VerificationResult for the given pass. */
specifier|public
name|VerificationResult
name|doPass3b
parameter_list|(
name|int
name|method_no
parameter_list|)
block|{
name|String
name|key
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|method_no
argument_list|)
decl_stmt|;
name|Pass3bVerifier
name|p3bv
decl_stmt|;
name|p3bv
operator|=
operator|(
name|Pass3bVerifier
operator|)
operator|(
name|p3bvs
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|p3bvs
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
name|p3bv
operator|=
operator|new
name|Pass3bVerifier
argument_list|(
name|this
argument_list|,
name|method_no
argument_list|)
expr_stmt|;
name|p3bvs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|p3bv
argument_list|)
expr_stmt|;
block|}
return|return
name|p3bv
operator|.
name|verify
argument_list|()
return|;
block|}
comment|/** 	 * Instantiation is done by the VerifierFactory. 	 * 	 * @see VerifierFactory 	 */
name|Verifier
parameter_list|(
name|String
name|fully_qualified_classname
parameter_list|)
block|{
name|classname
operator|=
name|fully_qualified_classname
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Returns the name of the class this verifier operates on. 	 * This is particularly interesting when this verifier was created 	 * recursively by another Verifier and you got a reference to this 	 * Verifier by the getVerifiers() method of the VerifierFactory. 	 * @see VerifierFactory 	 */
specifier|public
specifier|final
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|classname
return|;
block|}
comment|/** 	 * Forget everything known about the class file; that means, really 	 * start a new verification of a possibly different class file from 	 * BCEL's repository. 	 * 	 */
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|p1v
operator|=
literal|null
expr_stmt|;
name|p2v
operator|=
literal|null
expr_stmt|;
name|p3avs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p3bvs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * This returns all the (warning) messages collected during verification. 	 * A prefix shows from which verifying pass a message originates. 	 */
specifier|public
name|String
index|[]
name|getMessages
parameter_list|()
block|{
name|ArrayList
name|messages
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1v
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|p1m
init|=
name|p1v
operator|.
name|getMessages
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p1m
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|messages
operator|.
name|add
argument_list|(
literal|"Pass 1: "
operator|+
name|p1m
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|p2v
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|p2m
init|=
name|p2v
operator|.
name|getMessages
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p2m
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|messages
operator|.
name|add
argument_list|(
literal|"Pass 2: "
operator|+
name|p2m
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
name|p3as
init|=
name|p3avs
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|p3as
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Pass3aVerifier
name|pv
init|=
operator|(
name|Pass3aVerifier
operator|)
name|p3as
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|p3am
init|=
name|pv
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|int
name|meth
init|=
name|pv
operator|.
name|getMethodNo
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p3am
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|messages
operator|.
name|add
argument_list|(
literal|"Pass 3a, method "
operator|+
name|meth
operator|+
literal|" ('"
operator|+
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Repository
operator|.
name|lookupClass
argument_list|(
name|classname
argument_list|)
operator|.
name|getMethods
argument_list|()
index|[
name|meth
index|]
operator|+
literal|"'): "
operator|+
name|p3am
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
name|p3bs
init|=
name|p3bvs
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|p3bs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Pass3bVerifier
name|pv
init|=
operator|(
name|Pass3bVerifier
operator|)
name|p3bs
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|p3bm
init|=
name|pv
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|int
name|meth
init|=
name|pv
operator|.
name|getMethodNo
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p3bm
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|messages
operator|.
name|add
argument_list|(
literal|"Pass 3b, method "
operator|+
name|meth
operator|+
literal|" ('"
operator|+
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Repository
operator|.
name|lookupClass
argument_list|(
name|classname
argument_list|)
operator|.
name|getMethods
argument_list|()
index|[
name|meth
index|]
operator|+
literal|"'): "
operator|+
name|p3bm
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|ret
init|=
operator|new
name|String
index|[
name|messages
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
operator|(
name|String
operator|)
name|messages
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/** 	 * Verifies class files. 	 * This is a simple demonstration of how the API of BCEL's 	 * class file verifier "JustIce" may be used. 	 * You should supply command-line arguments which are 	 * fully qualified namea of the classes to verify. These class files 	 * must be somewhere in your CLASSPATH (refer to Sun's 	 * documentation for questions about this) or you must have put the classes 	 * into the BCEL Repository yourself (via 'addClass(JavaClass)'). 	 */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"JustIce by Enver Haase, (C) 2001-2002.\n<http://bcel.sourceforge.net>\n<http://jakarta.apache.org/bcel>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|args
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|k
index|]
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|int
name|dotclasspos
init|=
name|args
index|[
name|k
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|".class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotclasspos
operator|!=
operator|-
literal|1
condition|)
name|args
index|[
name|k
index|]
operator|=
name|args
index|[
name|k
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotclasspos
argument_list|)
expr_stmt|;
block|}
name|args
index|[
name|k
index|]
operator|=
name|args
index|[
name|k
index|]
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Now verifying: "
operator|+
name|args
index|[
name|k
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|Verifier
name|v
init|=
name|VerifierFactory
operator|.
name|getVerifier
argument_list|(
name|args
index|[
name|k
index|]
argument_list|)
decl_stmt|;
name|VerificationResult
name|vr
decl_stmt|;
name|vr
operator|=
name|v
operator|.
name|doPass1
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Pass 1:\n"
operator|+
name|vr
argument_list|)
expr_stmt|;
name|vr
operator|=
name|v
operator|.
name|doPass2
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Pass 2:\n"
operator|+
name|vr
argument_list|)
expr_stmt|;
if|if
condition|(
name|vr
operator|==
name|VerificationResult
operator|.
name|VR_OK
condition|)
block|{
name|JavaClass
name|jc
init|=
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Repository
operator|.
name|lookupClass
argument_list|(
name|args
index|[
name|k
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jc
operator|.
name|getMethods
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vr
operator|=
name|v
operator|.
name|doPass3a
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Pass 3a, method number "
operator|+
name|i
operator|+
literal|" ['"
operator|+
name|jc
operator|.
name|getMethods
argument_list|()
index|[
name|i
index|]
operator|+
literal|"']:\n"
operator|+
name|vr
argument_list|)
expr_stmt|;
name|vr
operator|=
name|v
operator|.
name|doPass3b
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Pass 3b, method number "
operator|+
name|i
operator|+
literal|" ['"
operator|+
name|jc
operator|.
name|getMethods
argument_list|()
index|[
name|i
index|]
operator|+
literal|"']:\n"
operator|+
name|vr
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Warnings:"
argument_list|)
expr_stmt|;
name|String
index|[]
name|warnings
init|=
name|v
operator|.
name|getMessages
argument_list|()
decl_stmt|;
if|if
condition|(
name|warnings
operator|.
name|length
operator|==
literal|0
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<none>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|warnings
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|warnings
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
comment|// avoid swapping.
name|v
operator|.
name|flush
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Repository
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

