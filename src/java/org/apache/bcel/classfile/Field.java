begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class represents the field info structure, i.e., the representation   * for a variable in the class. See JVM specification for details.  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Field
extends|extends
name|FieldOrMethod
block|{
comment|/**    * Initialize from another object. Note that both objects use the same    * references (shallow copy). Use clone() for a physical copy.    */
specifier|public
name|Field
parameter_list|(
name|Field
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct object from file stream.    * @param file Input stream    */
name|Field
parameter_list|(
name|DataInputStream
name|file
parameter_list|,
name|ConstantPool
name|constant_pool
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassFormatException
block|{
name|super
argument_list|(
name|file
argument_list|,
name|constant_pool
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param access_flags Access rights of field    * @param name_index Points to field name in constant pool    * @param signature_index Points to encoded signature    * @param attributes Collection of attributes    * @param constant_pool Array of constants    */
specifier|public
name|Field
parameter_list|(
name|int
name|access_flags
parameter_list|,
name|int
name|name_index
parameter_list|,
name|int
name|signature_index
parameter_list|,
name|Attribute
index|[]
name|attributes
parameter_list|,
name|ConstantPool
name|constant_pool
parameter_list|)
block|{
name|super
argument_list|(
name|access_flags
argument_list|,
name|name_index
argument_list|,
name|signature_index
argument_list|,
name|attributes
argument_list|,
name|constant_pool
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called by objects that are traversing the nodes of the tree implicitely    * defined by the contents of a Java class. I.e., the hierarchy of methods,    * fields, attributes, etc. spawns a tree of objects.    *    * @param v Visitor object    */
specifier|public
name|void
name|accept
parameter_list|(
name|Visitor
name|v
parameter_list|)
block|{
name|v
operator|.
name|visitField
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return constant value associated with this field (may be null)    */
specifier|public
specifier|final
name|ConstantValue
name|getConstantValue
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes_count
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|attributes
index|[
name|i
index|]
operator|.
name|getTag
argument_list|()
operator|==
name|Constants
operator|.
name|ATTR_CONSTANT_VALUE
condition|)
return|return
operator|(
name|ConstantValue
operator|)
name|attributes
index|[
name|i
index|]
return|;
return|return
literal|null
return|;
block|}
comment|/**    * Return string representation close to declaration format,    * `public static final short MAX = 100', e.g..    *    * @return String representation of field, including the signature.    */
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
name|String
name|name
decl_stmt|,
name|signature
decl_stmt|,
name|access
decl_stmt|;
comment|// Short cuts to constant pool
comment|// Get names from constant pool
name|access
operator|=
name|Utility
operator|.
name|accessToString
argument_list|(
name|access_flags
argument_list|)
expr_stmt|;
name|access
operator|=
name|access
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|?
literal|""
else|:
operator|(
name|access
operator|+
literal|" "
operator|)
expr_stmt|;
name|signature
operator|=
name|Utility
operator|.
name|signatureToString
argument_list|(
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
name|getName
argument_list|()
expr_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
name|access
operator|+
name|signature
operator|+
literal|" "
operator|+
name|name
argument_list|)
decl_stmt|;
name|ConstantValue
name|cv
init|=
name|getConstantValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|cv
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|" = "
operator|+
name|cv
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes_count
condition|;
name|i
operator|++
control|)
block|{
name|Attribute
name|a
init|=
name|attributes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|a
operator|instanceof
name|ConstantValue
operator|)
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|" ["
operator|+
name|a
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return deep copy of this field    */
specifier|public
specifier|final
name|Field
name|copy
parameter_list|(
name|ConstantPool
name|constant_pool
parameter_list|)
block|{
return|return
operator|(
name|Field
operator|)
name|copy_
argument_list|(
name|constant_pool
argument_list|)
return|;
block|}
comment|/**    * @return type of field    */
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|getReturnType
argument_list|(
name|getSignature
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

