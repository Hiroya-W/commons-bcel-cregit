begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_comment
comment|/**  * Visitor with empty method bodies, can be extended and used in conjunction with the  * DescendingVisitor class, e.g.  *  * By courtesy of David Spencer.  *  * @see DescendingVisitor  * @version $Id$  *   */
end_comment

begin_class
specifier|public
class|class
name|EmptyVisitor
implements|implements
name|Visitor
block|{
specifier|protected
name|EmptyVisitor
parameter_list|()
block|{
block|}
specifier|public
name|void
name|visitCode
parameter_list|(
name|Code
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitCodeException
parameter_list|(
name|CodeException
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantClass
parameter_list|(
name|ConstantClass
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantDouble
parameter_list|(
name|ConstantDouble
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantFieldref
parameter_list|(
name|ConstantFieldref
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantFloat
parameter_list|(
name|ConstantFloat
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantInteger
parameter_list|(
name|ConstantInteger
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantInterfaceMethodref
parameter_list|(
name|ConstantInterfaceMethodref
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantLong
parameter_list|(
name|ConstantLong
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantMethodref
parameter_list|(
name|ConstantMethodref
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantNameAndType
parameter_list|(
name|ConstantNameAndType
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantPool
parameter_list|(
name|ConstantPool
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantString
parameter_list|(
name|ConstantString
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantUtf8
parameter_list|(
name|ConstantUtf8
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitConstantValue
parameter_list|(
name|ConstantValue
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitDeprecated
parameter_list|(
name|Deprecated
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitExceptionTable
parameter_list|(
name|ExceptionTable
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitField
parameter_list|(
name|Field
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitInnerClass
parameter_list|(
name|InnerClass
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitInnerClasses
parameter_list|(
name|InnerClasses
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitJavaClass
parameter_list|(
name|JavaClass
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitLineNumber
parameter_list|(
name|LineNumber
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitLineNumberTable
parameter_list|(
name|LineNumberTable
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitLocalVariable
parameter_list|(
name|LocalVariable
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitLocalVariableTable
parameter_list|(
name|LocalVariableTable
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitMethod
parameter_list|(
name|Method
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitSignature
parameter_list|(
name|Signature
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitSourceFile
parameter_list|(
name|SourceFile
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitSynthetic
parameter_list|(
name|Synthetic
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitUnknown
parameter_list|(
name|Unknown
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitStackMap
parameter_list|(
name|StackMap
name|obj
parameter_list|)
block|{
block|}
specifier|public
name|void
name|visitStackMapEntry
parameter_list|(
name|StackMapEntry
name|obj
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

