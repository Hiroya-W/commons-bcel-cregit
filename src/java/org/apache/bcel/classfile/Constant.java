begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Abstract superclass for classes to represent the different constant types  * in the constant pool of a class file. The classes keep closely to  * the JVM specification.  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Constant
implements|implements
name|Cloneable
implements|,
name|Node
implements|,
name|Serializable
block|{
comment|/* In fact this tag is redundant since we can distinguish different    * `Constant' objects by their type, i.e., via `instanceof'. In some    * places we will use the tag for switch()es anyway.    *    * First, we want match the specification as closely as possible. Second we    * need the tag as an index to select the corresponding class name from the     * `CONSTANT_NAMES' array.    */
specifier|protected
name|byte
name|tag
decl_stmt|;
name|Constant
parameter_list|(
name|byte
name|tag
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
block|}
comment|/**    * Called by objects that are traversing the nodes of the tree implicitely    * defined by the contents of a Java class. I.e., the hierarchy of methods,    * fields, attributes, etc. spawns a tree of objects.    *    * @param v Visitor object    */
specifier|public
specifier|abstract
name|void
name|accept
parameter_list|(
name|Visitor
name|v
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|dump
parameter_list|(
name|DataOutputStream
name|file
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @return Tag of constant, i.e., its type. No setTag() method to avoid    * confusion.    */
specifier|public
specifier|final
name|byte
name|getTag
parameter_list|()
block|{
return|return
name|tag
return|;
block|}
comment|/**    * @return String representation.    */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|CONSTANT_NAMES
index|[
name|tag
index|]
operator|+
literal|"["
operator|+
name|tag
operator|+
literal|"]"
return|;
block|}
comment|/**    * @return deep copy of this constant    */
specifier|public
name|Constant
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|Constant
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/**    * Read one constant from the given file, the type depends on a tag byte.    *    * @param file Input stream    * @return Constant object    */
specifier|static
specifier|final
name|Constant
name|readConstant
parameter_list|(
name|DataInputStream
name|file
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassFormatException
block|{
name|byte
name|b
init|=
name|file
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|// Read tag byte
switch|switch
condition|(
name|b
condition|)
block|{
case|case
name|Constants
operator|.
name|CONSTANT_Class
case|:
return|return
operator|new
name|ConstantClass
argument_list|(
name|file
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Fieldref
case|:
return|return
operator|new
name|ConstantFieldref
argument_list|(
name|file
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Methodref
case|:
return|return
operator|new
name|ConstantMethodref
argument_list|(
name|file
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_InterfaceMethodref
case|:
return|return
operator|new
name|ConstantInterfaceMethodref
argument_list|(
name|file
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_String
case|:
return|return
operator|new
name|ConstantString
argument_list|(
name|file
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Integer
case|:
return|return
operator|new
name|ConstantInteger
argument_list|(
name|file
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Float
case|:
return|return
operator|new
name|ConstantFloat
argument_list|(
name|file
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Long
case|:
return|return
operator|new
name|ConstantLong
argument_list|(
name|file
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Double
case|:
return|return
operator|new
name|ConstantDouble
argument_list|(
name|file
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_NameAndType
case|:
return|return
operator|new
name|ConstantNameAndType
argument_list|(
name|file
argument_list|)
return|;
case|case
name|Constants
operator|.
name|CONSTANT_Utf8
case|:
return|return
operator|new
name|ConstantUtf8
argument_list|(
name|file
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|ClassFormatException
argument_list|(
literal|"Invalid byte tag in constant pool: "
operator|+
name|b
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

