begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * Represents a Java class, i.e., the data structures, constant pool,  * fields, methods and commands contained in a Java .class file.  * See<a href="ftp://java.sun.com/docs/specs/">JVM   * specification</a> for details.  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
class|class
name|JavaClass
extends|extends
name|AccessFlags
implements|implements
name|Cloneable
implements|,
name|Node
block|{
specifier|private
name|String
name|file_name
decl_stmt|;
specifier|private
name|String
name|package_name
decl_stmt|;
specifier|private
name|String
name|source_file_name
init|=
literal|"<Unknown>"
decl_stmt|;
specifier|private
name|int
name|class_name_index
decl_stmt|;
specifier|private
name|int
name|superclass_name_index
decl_stmt|;
specifier|private
name|String
name|class_name
decl_stmt|;
specifier|private
name|String
name|superclass_name
decl_stmt|;
specifier|private
name|int
name|major
decl_stmt|,
name|minor
decl_stmt|;
comment|// Compiler version
specifier|private
name|ConstantPool
name|constant_pool
decl_stmt|;
comment|// Constant pool
specifier|private
name|int
index|[]
name|interfaces
decl_stmt|;
comment|// implemented interfaces
specifier|private
name|String
index|[]
name|interface_names
decl_stmt|;
specifier|private
name|Field
index|[]
name|fields
decl_stmt|;
comment|// Fields, i.e., variables of class
specifier|private
name|Method
index|[]
name|methods
decl_stmt|;
comment|// methods defined in the class
specifier|private
name|Attribute
index|[]
name|attributes
decl_stmt|;
comment|// attributes defined in the class
specifier|private
name|byte
name|source
init|=
name|HEAP
decl_stmt|;
comment|// Generated in memory
specifier|public
specifier|static
specifier|final
name|byte
name|HEAP
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|FILE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|ZIP
init|=
literal|3
decl_stmt|;
specifier|static
name|boolean
name|debug
init|=
literal|false
decl_stmt|;
comment|// Debugging on/off
specifier|static
name|char
name|sep
init|=
literal|'/'
decl_stmt|;
comment|// directory separator
comment|/**    * Constructor gets all contents as arguments.    *    * @param class_name Class name    * @param superclass_name Superclass name    * @param file_name File name    * @param major Major compiler version    * @param minor Minor compiler version    * @param access_flags Access rights defined by bit flags    * @param constant_pool Array of constants    * @param interfaces Implemented interfaces    * @param fields Class fields    * @param methods Class methods    * @param attributes Class attributes    * @param source Read from file or generated in memory?    */
specifier|public
name|JavaClass
parameter_list|(
name|int
name|class_name_index
parameter_list|,
name|int
name|superclass_name_index
parameter_list|,
name|String
name|file_name
parameter_list|,
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|,
name|int
name|access_flags
parameter_list|,
name|ConstantPool
name|constant_pool
parameter_list|,
name|int
index|[]
name|interfaces
parameter_list|,
name|Field
index|[]
name|fields
parameter_list|,
name|Method
index|[]
name|methods
parameter_list|,
name|Attribute
index|[]
name|attributes
parameter_list|,
name|byte
name|source
parameter_list|)
block|{
if|if
condition|(
name|interfaces
operator|==
literal|null
condition|)
comment|// Allowed for backward compatibility
name|interfaces
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
name|this
operator|.
name|attributes
operator|=
operator|new
name|Attribute
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
name|fields
operator|=
operator|new
name|Field
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|methods
operator|==
literal|null
condition|)
name|methods
operator|=
operator|new
name|Method
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|class_name_index
operator|=
name|class_name_index
expr_stmt|;
name|this
operator|.
name|superclass_name_index
operator|=
name|superclass_name_index
expr_stmt|;
name|this
operator|.
name|file_name
operator|=
name|file_name
expr_stmt|;
name|this
operator|.
name|major
operator|=
name|major
expr_stmt|;
name|this
operator|.
name|minor
operator|=
name|minor
expr_stmt|;
name|this
operator|.
name|access_flags
operator|=
name|access_flags
expr_stmt|;
name|this
operator|.
name|constant_pool
operator|=
name|constant_pool
expr_stmt|;
name|this
operator|.
name|interfaces
operator|=
name|interfaces
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|methods
operator|=
name|methods
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
comment|// Get source file name if available
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|attributes
index|[
name|i
index|]
operator|instanceof
name|SourceFile
condition|)
block|{
name|source_file_name
operator|=
operator|(
operator|(
name|SourceFile
operator|)
name|attributes
index|[
name|i
index|]
operator|)
operator|.
name|getSourceFileName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|// Get class name and superclass name
name|ConstantUtf8
name|name
decl_stmt|;
comment|/* According to the specification the following entries must be of type      * `ConstantClass' but we check that anyway via the       * `ConstPool.getConstant' method.      */
name|class_name
operator|=
name|constant_pool
operator|.
name|getConstantString
argument_list|(
name|class_name_index
argument_list|,
name|Constants
operator|.
name|CONSTANT_Class
argument_list|)
expr_stmt|;
name|class_name
operator|=
name|Utility
operator|.
name|compactClassName
argument_list|(
name|class_name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|class_name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
name|package_name
operator|=
literal|""
expr_stmt|;
else|else
name|package_name
operator|=
name|class_name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|superclass_name_index
operator|>
literal|0
condition|)
block|{
comment|// May be zero -> class is java.lang.Object
name|superclass_name
operator|=
name|constant_pool
operator|.
name|getConstantString
argument_list|(
name|superclass_name_index
argument_list|,
name|Constants
operator|.
name|CONSTANT_Class
argument_list|)
expr_stmt|;
name|superclass_name
operator|=
name|Utility
operator|.
name|compactClassName
argument_list|(
name|superclass_name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|superclass_name
operator|=
literal|"java.lang.Object"
expr_stmt|;
name|interface_names
operator|=
operator|new
name|String
index|[
name|interfaces
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|str
init|=
name|constant_pool
operator|.
name|getConstantString
argument_list|(
name|interfaces
index|[
name|i
index|]
argument_list|,
name|Constants
operator|.
name|CONSTANT_Class
argument_list|)
decl_stmt|;
name|interface_names
index|[
name|i
index|]
operator|=
name|Utility
operator|.
name|compactClassName
argument_list|(
name|str
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Constructor gets all contents as arguments.    *    * @param class_name Class name    * @param superclass_name Superclass name    * @param file_name File name    * @param major Major compiler version    * @param minor Minor compiler version    * @param access_flags Access rights defined by bit flags    * @param constant_pool Array of constants    * @param interfaces Implemented interfaces    * @param fields Class fields    * @param methods Class methods    * @param attributes Class attributes    */
specifier|public
name|JavaClass
parameter_list|(
name|int
name|class_name_index
parameter_list|,
name|int
name|superclass_name_index
parameter_list|,
name|String
name|file_name
parameter_list|,
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|,
name|int
name|access_flags
parameter_list|,
name|ConstantPool
name|constant_pool
parameter_list|,
name|int
index|[]
name|interfaces
parameter_list|,
name|Field
index|[]
name|fields
parameter_list|,
name|Method
index|[]
name|methods
parameter_list|,
name|Attribute
index|[]
name|attributes
parameter_list|)
block|{
name|this
argument_list|(
name|class_name_index
argument_list|,
name|superclass_name_index
argument_list|,
name|file_name
argument_list|,
name|major
argument_list|,
name|minor
argument_list|,
name|access_flags
argument_list|,
name|constant_pool
argument_list|,
name|interfaces
argument_list|,
name|fields
argument_list|,
name|methods
argument_list|,
name|attributes
argument_list|,
name|HEAP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called by objects that are traversing the nodes of the tree implicitely    * defined by the contents of a Java class. I.e., the hierarchy of methods,    * fields, attributes, etc. spawns a tree of objects.    *    * @param v Visitor object    */
specifier|public
name|void
name|accept
parameter_list|(
name|Visitor
name|v
parameter_list|)
block|{
name|v
operator|.
name|visitJavaClass
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/* Print debug information depending on `JavaClass.debug'    */
specifier|static
specifier|final
name|void
name|Debug
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|debug
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**     * Dump class to a file.    *    * @param file Output file    * @throw IOException    */
specifier|public
name|void
name|dump
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|parent
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|dump
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * Dump class to a file named file_name.    *    * @param file_name Output file name    * @exception IOException    */
specifier|public
name|void
name|dump
parameter_list|(
name|String
name|file_name
parameter_list|)
throws|throws
name|IOException
block|{
name|dump
argument_list|(
operator|new
name|File
argument_list|(
name|file_name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return class in binary format    */
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
name|ByteArrayOutputStream
name|s
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|ds
init|=
operator|new
name|DataOutputStream
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
name|dump
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * Dump Java class to output stream in binary format.    *    * @param file Output stream    * @exception IOException    */
specifier|public
name|void
name|dump
parameter_list|(
name|OutputStream
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|dump
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Dump Java class to output stream in binary format.    *    * @param file Output stream    * @exception IOException    */
specifier|public
name|void
name|dump
parameter_list|(
name|DataOutputStream
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|file
operator|.
name|writeInt
argument_list|(
literal|0xcafebabe
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|minor
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|constant_pool
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|access_flags
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|class_name_index
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|superclass_name_index
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|interfaces
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|file
operator|.
name|writeShort
argument_list|(
name|interfaces
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|fields
index|[
name|i
index|]
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|file
operator|.
name|writeShort
argument_list|(
name|methods
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|methods
index|[
name|i
index|]
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
name|file
operator|.
name|writeShort
argument_list|(
name|attributes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|attributes
index|[
name|i
index|]
operator|.
name|dump
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
name|file
operator|.
name|writeShort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return Attributes of the class.    */
specifier|public
name|Attribute
index|[]
name|getAttributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
comment|/**    * @return Class name.    */
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|class_name
return|;
block|}
comment|/**    * @return Package name.    */
specifier|public
name|String
name|getPackageName
parameter_list|()
block|{
return|return
name|package_name
return|;
block|}
comment|/**    * @return Class name index.    */
specifier|public
name|int
name|getClassNameIndex
parameter_list|()
block|{
return|return
name|class_name_index
return|;
block|}
comment|/**    * @return Constant pool.    */
specifier|public
name|ConstantPool
name|getConstantPool
parameter_list|()
block|{
return|return
name|constant_pool
return|;
block|}
comment|/**    * @return Fields, i.e., variables of the class.    */
specifier|public
name|Field
index|[]
name|getFields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
comment|/**    * @return File name of class, aka SourceFile attribute value    */
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|file_name
return|;
block|}
comment|/**    * @return Names of implemented interfaces.    */
specifier|public
name|String
index|[]
name|getInterfaceNames
parameter_list|()
block|{
return|return
name|interface_names
return|;
block|}
comment|/**    * @return Implemented interfaces.    */
specifier|public
name|int
index|[]
name|getInterfaces
parameter_list|()
block|{
return|return
name|interfaces
return|;
block|}
comment|/**    * @return Major number of compiler version.    */
specifier|public
name|int
name|getMajor
parameter_list|()
block|{
return|return
name|major
return|;
block|}
comment|/**    * @return Methods of the class.    */
specifier|public
name|Method
index|[]
name|getMethods
parameter_list|()
block|{
return|return
name|methods
return|;
block|}
comment|/**    * @return Minor number of compiler version.    */
specifier|public
name|int
name|getMinor
parameter_list|()
block|{
return|return
name|minor
return|;
block|}
comment|/**    * @return sbsolute path to file where this class was read from    */
specifier|public
name|String
name|getSourceFileName
parameter_list|()
block|{
return|return
name|source_file_name
return|;
block|}
comment|/**    * @return Superclass name.    */
specifier|public
name|String
name|getSuperclassName
parameter_list|()
block|{
return|return
name|superclass_name
return|;
block|}
comment|/**    * @return Class name index.    */
specifier|public
name|int
name|getSuperclassNameIndex
parameter_list|()
block|{
return|return
name|superclass_name_index
return|;
block|}
static|static
block|{
comment|// Debugging ... on/off
name|String
name|debug
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"JavaClass.debug"
argument_list|)
decl_stmt|;
if|if
condition|(
name|debug
operator|!=
literal|null
condition|)
name|JavaClass
operator|.
name|debug
operator|=
operator|new
name|Boolean
argument_list|(
name|debug
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
comment|// Get path separator either / or \ usually
name|String
name|sep
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sep
operator|!=
literal|null
condition|)
try|try
block|{
name|JavaClass
operator|.
name|sep
operator|=
name|sep
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StringIndexOutOfBoundsException
name|e
parameter_list|)
block|{
block|}
comment|// Never reached
block|}
comment|/**    * @param attributes.    */
specifier|public
name|void
name|setAttributes
parameter_list|(
name|Attribute
index|[]
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**    * @param class_name.    */
specifier|public
name|void
name|setClassName
parameter_list|(
name|String
name|class_name
parameter_list|)
block|{
name|this
operator|.
name|class_name
operator|=
name|class_name
expr_stmt|;
block|}
comment|/**    * @param class_name_index.    */
specifier|public
name|void
name|setClassNameIndex
parameter_list|(
name|int
name|class_name_index
parameter_list|)
block|{
name|this
operator|.
name|class_name_index
operator|=
name|class_name_index
expr_stmt|;
block|}
comment|/**    * @param constant_pool.    */
specifier|public
name|void
name|setConstantPool
parameter_list|(
name|ConstantPool
name|constant_pool
parameter_list|)
block|{
name|this
operator|.
name|constant_pool
operator|=
name|constant_pool
expr_stmt|;
block|}
comment|/**    * @param fields.    */
specifier|public
name|void
name|setFields
parameter_list|(
name|Field
index|[]
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
comment|/**    * Set File name of class, aka SourceFile attribute value    */
specifier|public
name|void
name|setFileName
parameter_list|(
name|String
name|file_name
parameter_list|)
block|{
name|this
operator|.
name|file_name
operator|=
name|file_name
expr_stmt|;
block|}
comment|/**    * @param interface_names.    */
specifier|public
name|void
name|setInterfaceNames
parameter_list|(
name|String
index|[]
name|interface_names
parameter_list|)
block|{
name|this
operator|.
name|interface_names
operator|=
name|interface_names
expr_stmt|;
block|}
comment|/**    * @param interfaces.    */
specifier|public
name|void
name|setInterfaces
parameter_list|(
name|int
index|[]
name|interfaces
parameter_list|)
block|{
name|this
operator|.
name|interfaces
operator|=
name|interfaces
expr_stmt|;
block|}
comment|/**    * @param major.    */
specifier|public
name|void
name|setMajor
parameter_list|(
name|int
name|major
parameter_list|)
block|{
name|this
operator|.
name|major
operator|=
name|major
expr_stmt|;
block|}
comment|/**    * @param methods.    */
specifier|public
name|void
name|setMethods
parameter_list|(
name|Method
index|[]
name|methods
parameter_list|)
block|{
name|this
operator|.
name|methods
operator|=
name|methods
expr_stmt|;
block|}
comment|/**    * @param minor.    */
specifier|public
name|void
name|setMinor
parameter_list|(
name|int
name|minor
parameter_list|)
block|{
name|this
operator|.
name|minor
operator|=
name|minor
expr_stmt|;
block|}
comment|/**    * Set absolute path to file this class was read from.    */
specifier|public
name|void
name|setSourceFileName
parameter_list|(
name|String
name|source_file_name
parameter_list|)
block|{
name|this
operator|.
name|source_file_name
operator|=
name|source_file_name
expr_stmt|;
block|}
comment|/**    * @param superclass_name.    */
specifier|public
name|void
name|setSuperclassName
parameter_list|(
name|String
name|superclass_name
parameter_list|)
block|{
name|this
operator|.
name|superclass_name
operator|=
name|superclass_name
expr_stmt|;
block|}
comment|/**    * @param superclass_name_index.    */
specifier|public
name|void
name|setSuperclassNameIndex
parameter_list|(
name|int
name|superclass_name_index
parameter_list|)
block|{
name|this
operator|.
name|superclass_name_index
operator|=
name|superclass_name_index
expr_stmt|;
block|}
comment|/**    * @return String representing class contents.    */
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|access
init|=
name|Utility
operator|.
name|accessToString
argument_list|(
name|access_flags
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|access
operator|=
name|access
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|?
literal|""
else|:
operator|(
name|access
operator|+
literal|" "
operator|)
expr_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
name|access
operator|+
name|Utility
operator|.
name|classOrInterface
argument_list|(
name|access_flags
argument_list|)
operator|+
literal|" "
operator|+
name|class_name
operator|+
literal|" extends "
operator|+
name|Utility
operator|.
name|compactClassName
argument_list|(
name|superclass_name
argument_list|,
literal|false
argument_list|)
operator|+
literal|'\n'
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|interfaces
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"implements\t\t"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|interface_names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|size
operator|-
literal|1
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"filename\t\t"
operator|+
name|file_name
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"compiled from\t\t"
operator|+
name|source_file_name
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"compiler version\t"
operator|+
name|major
operator|+
literal|"."
operator|+
name|minor
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"access flags\t\t"
operator|+
name|access_flags
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"constant pool\t\t"
operator|+
name|constant_pool
operator|.
name|getLength
argument_list|()
operator|+
literal|" entries\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"ACC_SUPER flag\t\t"
operator|+
name|isSuper
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\nAttribute(s):\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|buf
operator|.
name|append
argument_list|(
name|indent
argument_list|(
name|attributes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
operator|+
name|fields
operator|.
name|length
operator|+
literal|" fields:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|buf
operator|.
name|append
argument_list|(
literal|"\t"
operator|+
name|fields
index|[
name|i
index|]
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|methods
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
operator|+
name|methods
operator|.
name|length
operator|+
literal|" methods:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|buf
operator|.
name|append
argument_list|(
literal|"\t"
operator|+
name|methods
index|[
name|i
index|]
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|indent
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|"\t"
operator|+
name|tok
operator|.
name|nextToken
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return deep copy of this class    */
specifier|public
name|JavaClass
name|copy
parameter_list|()
block|{
name|JavaClass
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
operator|(
name|JavaClass
operator|)
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
block|}
name|c
operator|.
name|constant_pool
operator|=
name|constant_pool
operator|.
name|copy
argument_list|()
expr_stmt|;
name|c
operator|.
name|interfaces
operator|=
operator|(
name|int
index|[]
operator|)
name|interfaces
operator|.
name|clone
argument_list|()
expr_stmt|;
name|c
operator|.
name|interface_names
operator|=
operator|(
name|String
index|[]
operator|)
name|interface_names
operator|.
name|clone
argument_list|()
expr_stmt|;
name|c
operator|.
name|fields
operator|=
operator|new
name|Field
index|[
name|fields
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|c
operator|.
name|fields
index|[
name|i
index|]
operator|=
name|fields
index|[
name|i
index|]
operator|.
name|copy
argument_list|(
name|c
operator|.
name|constant_pool
argument_list|)
expr_stmt|;
name|c
operator|.
name|methods
operator|=
operator|new
name|Method
index|[
name|methods
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|c
operator|.
name|methods
index|[
name|i
index|]
operator|=
name|methods
index|[
name|i
index|]
operator|.
name|copy
argument_list|(
name|c
operator|.
name|constant_pool
argument_list|)
expr_stmt|;
name|c
operator|.
name|attributes
operator|=
operator|new
name|Attribute
index|[
name|attributes
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|c
operator|.
name|attributes
index|[
name|i
index|]
operator|=
name|attributes
index|[
name|i
index|]
operator|.
name|copy
argument_list|(
name|c
operator|.
name|constant_pool
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|public
specifier|final
name|boolean
name|instanceOf
parameter_list|(
name|JavaClass
name|super_class
parameter_list|)
block|{
return|return
name|Repository
operator|.
name|instanceOf
argument_list|(
name|this
argument_list|,
name|super_class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isSuper
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_SUPER
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isClass
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_INTERFACE
operator|)
operator|==
literal|0
return|;
block|}
comment|/** @return returns either HEAP (generated), FILE, or ZIP    */
specifier|public
specifier|final
name|byte
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
block|}
end_class

end_unit

