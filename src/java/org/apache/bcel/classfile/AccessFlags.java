begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Super class for all objects that have modifiers like private, final, ...  * I.e. classes, fields, and methods.  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AccessFlags
block|{
specifier|protected
name|int
name|access_flags
decl_stmt|;
specifier|public
name|AccessFlags
parameter_list|()
block|{
block|}
comment|/**    * @param a inital access flags    */
specifier|public
name|AccessFlags
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|access_flags
operator|=
name|a
expr_stmt|;
block|}
comment|/**     * @return Access flags of the object aka. "modifiers".    */
specifier|public
specifier|final
name|int
name|getAccessFlags
parameter_list|()
block|{
return|return
name|access_flags
return|;
block|}
comment|/**     * @return Access flags of the object aka. "modifiers".    */
specifier|public
specifier|final
name|int
name|getModifiers
parameter_list|()
block|{
return|return
name|access_flags
return|;
block|}
comment|/** Set access flags aka "modifiers".    * @param access_flags Access flags of the object.     */
specifier|public
specifier|final
name|void
name|setAccessFlags
parameter_list|(
name|int
name|access_flags
parameter_list|)
block|{
name|this
operator|.
name|access_flags
operator|=
name|access_flags
expr_stmt|;
block|}
comment|/** Set access flags aka "modifiers".    * @param access_flags Access flags of the object.     */
specifier|public
specifier|final
name|void
name|setModifiers
parameter_list|(
name|int
name|access_flags
parameter_list|)
block|{
name|setAccessFlags
argument_list|(
name|access_flags
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|setFlag
parameter_list|(
name|int
name|flag
parameter_list|,
name|boolean
name|set
parameter_list|)
block|{
if|if
condition|(
operator|(
name|access_flags
operator|&
name|flag
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// Flag is set already
if|if
condition|(
operator|!
name|set
condition|)
comment|// Delete flag ?
name|access_flags
operator|^=
name|flag
expr_stmt|;
block|}
else|else
block|{
comment|// Flag not set
if|if
condition|(
name|set
condition|)
comment|// Set flag ?
name|access_flags
operator||=
name|flag
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|isPublic
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_PUBLIC
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isPublic
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_PUBLIC
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|void
name|isPrivate
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_PRIVATE
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isPrivate
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_PRIVATE
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|void
name|isProtected
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_PROTECTED
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isProtected
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_PROTECTED
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|void
name|isStatic
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_STATIC
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isStatic
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_STATIC
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|void
name|isFinal
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_FINAL
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isFinal
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_FINAL
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|void
name|isSynchronized
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_SYNCHRONIZED
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isSynchronized
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_SYNCHRONIZED
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|void
name|isVolatile
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_VOLATILE
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isVolatile
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_VOLATILE
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|void
name|isTransient
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_TRANSIENT
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isTransient
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_TRANSIENT
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|void
name|isNative
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_NATIVE
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isNative
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_NATIVE
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|void
name|isInterface
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_INTERFACE
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isInterface
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_INTERFACE
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|void
name|isAbstract
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_ABSTRACT
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_ABSTRACT
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|final
name|void
name|isStrictfp
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|setFlag
argument_list|(
name|Constants
operator|.
name|ACC_STRICT
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isStrictfp
parameter_list|()
block|{
return|return
operator|(
name|access_flags
operator|&
name|Constants
operator|.
name|ACC_STRICT
operator|)
operator|!=
literal|0
return|;
block|}
block|}
end_class

end_unit

