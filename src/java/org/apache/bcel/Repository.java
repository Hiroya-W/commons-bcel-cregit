begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**   * The repository maintains informations about class interdependencies, e.g.,  * whether a class is a sub-class of another. JavaClass objects are put  * into a cache which can be purged with clearCache().  *  * All JavaClass objects used as arguments must have been obtained via  * the repository or been added with addClass() manually. This is  * because we have to check for real object identity (==).  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Repository
block|{
specifier|private
specifier|static
name|ClassPath
name|class_path
init|=
operator|new
name|ClassPath
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|classes
decl_stmt|;
specifier|private
specifier|static
name|JavaClass
name|OBJECT
decl_stmt|;
comment|// should be final ...
static|static
block|{
name|clearCache
argument_list|()
expr_stmt|;
block|}
comment|/** Lookup class somewhere found in your CLASSPATH.    * @return class object for given fully qualified class name, or null    * if the class could not be found or parsed correctly    */
specifier|public
specifier|static
name|JavaClass
name|lookupClass
parameter_list|(
name|String
name|class_name
parameter_list|)
block|{
if|if
condition|(
name|class_name
operator|==
literal|null
operator|||
name|class_name
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid class name"
argument_list|)
throw|;
name|class_name
operator|=
name|class_name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
name|JavaClass
name|clazz
init|=
operator|(
name|JavaClass
operator|)
name|classes
operator|.
name|get
argument_list|(
name|class_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|InputStream
name|is
init|=
name|class_path
operator|.
name|getInputStream
argument_list|(
name|class_name
argument_list|)
decl_stmt|;
name|clazz
operator|=
operator|new
name|ClassParser
argument_list|(
name|is
argument_list|,
name|class_name
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
name|class_name
operator|=
name|clazz
operator|.
name|getClassName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Don't throw exception since there may be other ways to load
return|return
literal|null
return|;
block|}
name|classes
operator|.
name|put
argument_list|(
name|class_name
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|clazz
return|;
block|}
comment|/**    * Try to find class source via getResourceAsStream().    * @see Class    * @return JavaClass object for given runtime class    */
specifier|public
specifier|static
name|JavaClass
name|lookupClass
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|String
name|class_name
init|=
name|clazz
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaClass
name|j_class
init|=
operator|(
name|JavaClass
operator|)
name|classes
operator|.
name|get
argument_list|(
name|class_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|j_class
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|class_name
decl_stmt|;
name|int
name|i
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|clazz
operator|.
name|getResourceAsStream
argument_list|(
name|name
operator|+
literal|".class"
argument_list|)
decl_stmt|;
name|j_class
operator|=
operator|new
name|ClassParser
argument_list|(
name|is
argument_list|,
name|class_name
argument_list|)
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//System.err.println(e);
return|return
literal|null
return|;
comment|// Use same behaviour as above
block|}
name|classes
operator|.
name|put
argument_list|(
name|class_name
argument_list|,
name|j_class
argument_list|)
expr_stmt|;
block|}
return|return
name|j_class
return|;
block|}
comment|/** @return class file object for given Java class.    */
specifier|public
specifier|static
name|ClassPath
operator|.
name|ClassFile
name|lookupClassFile
parameter_list|(
name|String
name|class_name
parameter_list|)
block|{
try|try
block|{
return|return
name|class_path
operator|.
name|getClassFile
argument_list|(
name|class_name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** Clear the repository.    */
specifier|public
specifier|static
name|void
name|clearCache
parameter_list|()
block|{
name|classes
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|OBJECT
operator|=
name|lookupClass
argument_list|(
literal|"java.lang.Object"
argument_list|)
expr_stmt|;
if|if
condition|(
name|OBJECT
operator|==
literal|null
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Warning: java.lang.Object not found on CLASSPATH!"
argument_list|)
expr_stmt|;
else|else
name|classes
operator|.
name|put
argument_list|(
literal|"java.lang.Object"
argument_list|,
name|OBJECT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add clazz to repository if there isn't an equally named class already in there.    *    * @return old entry in repository    */
specifier|public
specifier|static
name|JavaClass
name|addClass
parameter_list|(
name|JavaClass
name|clazz
parameter_list|)
block|{
name|String
name|name
init|=
name|clazz
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|JavaClass
name|cl
init|=
operator|(
name|JavaClass
operator|)
name|classes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cl
operator|==
literal|null
condition|)
name|classes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|cl
operator|=
name|clazz
argument_list|)
expr_stmt|;
return|return
name|cl
return|;
block|}
comment|/**    * Remove class with given (fully qualifid) name from repository.    */
specifier|public
specifier|static
name|void
name|removeClass
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
name|classes
operator|.
name|remove
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove given class from repository.    */
specifier|public
specifier|static
name|void
name|removeClass
parameter_list|(
name|JavaClass
name|clazz
parameter_list|)
block|{
name|removeClass
argument_list|(
name|clazz
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|JavaClass
name|getSuperClass
parameter_list|(
name|JavaClass
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
name|OBJECT
condition|)
return|return
literal|null
return|;
return|return
name|lookupClass
argument_list|(
name|clazz
operator|.
name|getSuperclassName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return list of super classes of clazz in ascending order, i.e.,    * Object is always the last element    */
specifier|public
specifier|static
name|JavaClass
index|[]
name|getSuperClasses
parameter_list|(
name|JavaClass
name|clazz
parameter_list|)
block|{
name|ClassVector
name|vec
init|=
operator|new
name|ClassVector
argument_list|()
decl_stmt|;
for|for
control|(
name|clazz
operator|=
name|getSuperClass
argument_list|(
name|clazz
argument_list|)
init|;
name|clazz
operator|!=
literal|null
condition|;
name|clazz
operator|=
name|getSuperClass
argument_list|(
name|clazz
argument_list|)
control|)
name|vec
operator|.
name|addElement
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|vec
operator|.
name|toArray
argument_list|()
return|;
block|}
comment|/**    * @return list of super classes of clazz in ascending order, i.e.,    * Object is always the last element. "null", if clazz cannot be found.    */
specifier|public
specifier|static
name|JavaClass
index|[]
name|getSuperClasses
parameter_list|(
name|String
name|class_name
parameter_list|)
block|{
name|JavaClass
name|jc
init|=
name|lookupClass
argument_list|(
name|class_name
argument_list|)
decl_stmt|;
return|return
operator|(
name|jc
operator|==
literal|null
condition|?
literal|null
else|:
name|getSuperClasses
argument_list|(
name|jc
argument_list|)
operator|)
return|;
block|}
comment|/**    * @return all interfaces implemented by class and its super    * classes and the interfaces that those interfaces extend, and so on    */
specifier|public
specifier|static
name|JavaClass
index|[]
name|getInterfaces
parameter_list|(
name|JavaClass
name|clazz
parameter_list|)
block|{
name|ClassVector
name|vec
init|=
operator|new
name|ClassVector
argument_list|()
decl_stmt|;
name|ClassQueue
name|queue
init|=
operator|new
name|ClassQueue
argument_list|()
decl_stmt|;
name|queue
operator|.
name|enqueue
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|empty
argument_list|()
condition|)
block|{
name|clazz
operator|=
name|queue
operator|.
name|dequeue
argument_list|()
expr_stmt|;
name|String
name|s
init|=
name|clazz
operator|.
name|getSuperclassName
argument_list|()
decl_stmt|;
name|String
index|[]
name|interfaces
init|=
name|clazz
operator|.
name|getInterfaceNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isInterface
argument_list|()
condition|)
name|vec
operator|.
name|addElement
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
literal|"java.lang.Object"
argument_list|)
condition|)
name|queue
operator|.
name|enqueue
argument_list|(
name|lookupClass
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|queue
operator|.
name|enqueue
argument_list|(
name|lookupClass
argument_list|(
name|interfaces
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|vec
operator|.
name|toArray
argument_list|()
return|;
block|}
comment|/**    * @return all interfaces implemented by class and its super    * classes and the interfaces that extend those interfaces, and so on    */
specifier|public
specifier|static
name|JavaClass
index|[]
name|getInterfaces
parameter_list|(
name|String
name|class_name
parameter_list|)
block|{
return|return
name|getInterfaces
argument_list|(
name|lookupClass
argument_list|(
name|class_name
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return true, if clazz is an instance of super_class    */
specifier|public
specifier|static
name|boolean
name|instanceOf
parameter_list|(
name|JavaClass
name|clazz
parameter_list|,
name|JavaClass
name|super_class
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
name|super_class
condition|)
return|return
literal|true
return|;
name|JavaClass
index|[]
name|super_classes
init|=
name|getSuperClasses
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|super_classes
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|super_classes
index|[
name|i
index|]
operator|==
name|super_class
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|super_class
operator|.
name|isInterface
argument_list|()
condition|)
return|return
name|implementationOf
argument_list|(
name|clazz
argument_list|,
name|super_class
argument_list|)
return|;
return|return
literal|false
return|;
block|}
comment|/**    * @return true, if clazz is an instance of super_class    */
specifier|public
specifier|static
name|boolean
name|instanceOf
parameter_list|(
name|String
name|clazz
parameter_list|,
name|String
name|super_class
parameter_list|)
block|{
return|return
name|instanceOf
argument_list|(
name|lookupClass
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|lookupClass
argument_list|(
name|super_class
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return true, if clazz is an instance of super_class    */
specifier|public
specifier|static
name|boolean
name|instanceOf
parameter_list|(
name|JavaClass
name|clazz
parameter_list|,
name|String
name|super_class
parameter_list|)
block|{
return|return
name|instanceOf
argument_list|(
name|clazz
argument_list|,
name|lookupClass
argument_list|(
name|super_class
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return true, if clazz is an instance of super_class    */
specifier|public
specifier|static
name|boolean
name|instanceOf
parameter_list|(
name|String
name|clazz
parameter_list|,
name|JavaClass
name|super_class
parameter_list|)
block|{
return|return
name|instanceOf
argument_list|(
name|lookupClass
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|super_class
argument_list|)
return|;
block|}
comment|/**    * @return true, if clazz is an implementation of interface inter    */
specifier|public
specifier|static
name|boolean
name|implementationOf
parameter_list|(
name|JavaClass
name|clazz
parameter_list|,
name|JavaClass
name|inter
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
name|inter
condition|)
return|return
literal|true
return|;
name|JavaClass
index|[]
name|super_interfaces
init|=
name|getInterfaces
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|super_interfaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|super_interfaces
index|[
name|i
index|]
operator|==
name|inter
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/**    * @return true, if clazz is an implementation of interface inter    */
specifier|public
specifier|static
name|boolean
name|implementationOf
parameter_list|(
name|String
name|clazz
parameter_list|,
name|String
name|inter
parameter_list|)
block|{
return|return
name|implementationOf
argument_list|(
name|lookupClass
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|lookupClass
argument_list|(
name|inter
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return true, if clazz is an implementation of interface inter    */
specifier|public
specifier|static
name|boolean
name|implementationOf
parameter_list|(
name|JavaClass
name|clazz
parameter_list|,
name|String
name|inter
parameter_list|)
block|{
return|return
name|implementationOf
argument_list|(
name|clazz
argument_list|,
name|lookupClass
argument_list|(
name|inter
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return true, if clazz is an implementation of interface inter    */
specifier|public
specifier|static
name|boolean
name|implementationOf
parameter_list|(
name|String
name|clazz
parameter_list|,
name|JavaClass
name|inter
parameter_list|)
block|{
return|return
name|implementationOf
argument_list|(
name|lookupClass
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|inter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

