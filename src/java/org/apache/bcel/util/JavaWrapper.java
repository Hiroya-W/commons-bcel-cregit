begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
package|;
end_package

begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache BCEL" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache BCEL", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Java interpreter replacement, i.e., wrapper that uses its own ClassLoader  * to modify/generate classes as they're requested. You can take this as a template  * for your own applications.<br>  * Call this wrapper with  *<pre>java org.apache.bcel.util.JavaWrapper&lt;real.class.name&gt; [arguments]</pre>  *<p>  * To use your own class loader you can set the "bcel.classloader" system property  * which defaults to "org.apache.bcel.util.ClassLoader", e.g., with  *<pre>java org.apache.bcel.util.JavaWrapper -Dbcel.classloader=foo.MyLoader&lt;real.class.name&gt; [arguments]</pre>  *</p>  *  * @version $Id$  * @author<A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>  * @see ClassLoader  */
end_comment

begin_class
specifier|public
class|class
name|JavaWrapper
block|{
specifier|private
name|java
operator|.
name|lang
operator|.
name|ClassLoader
name|loader
decl_stmt|;
specifier|private
specifier|static
name|java
operator|.
name|lang
operator|.
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
name|String
name|s
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"bcel.classloader"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|s
operator|==
literal|null
operator|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
name|s
operator|=
literal|"org.apache.bcel.util.ClassLoader"
expr_stmt|;
try|try
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|ClassLoader
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|s
argument_list|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|JavaWrapper
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|ClassLoader
name|loader
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
specifier|public
name|JavaWrapper
parameter_list|()
block|{
name|this
argument_list|(
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Runs the main method of the given class with the arguments passed in argv    *    * @param class_name the fully qualified class name    * @param argv the arguments just as you would pass them directly    */
specifier|public
name|void
name|runMain
parameter_list|(
name|String
name|class_name
parameter_list|,
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
name|cl
init|=
name|loader
operator|.
name|loadClass
argument_list|(
name|class_name
argument_list|)
decl_stmt|;
name|Method
name|method
init|=
literal|null
decl_stmt|;
try|try
block|{
name|method
operator|=
name|cl
operator|.
name|getMethod
argument_list|(
literal|"main"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|argv
operator|.
name|getClass
argument_list|()
block|}
argument_list|)
expr_stmt|;
comment|/* Method main is sane ?        */
name|int
name|m
init|=
name|method
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
name|Class
name|r
init|=
name|method
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|m
argument_list|)
operator|&&
name|Modifier
operator|.
name|isStatic
argument_list|(
name|m
argument_list|)
operator|)
operator|||
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|m
argument_list|)
operator|||
operator|(
name|r
operator|!=
name|Void
operator|.
name|TYPE
operator|)
condition|)
throw|throw
operator|new
name|NoSuchMethodException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|no
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"In class "
operator|+
name|class_name
operator|+
literal|": public static void main(String[] argv) is not defined"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|argv
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Default main method used as wrapper, expects the fully qualified class name    * of the real class as the first argument.    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
comment|/* Expects class name as first argument, other arguments are by-passed.      */
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Missing class name."
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|class_name
init|=
name|argv
index|[
literal|0
index|]
decl_stmt|;
name|String
index|[]
name|new_argv
init|=
operator|new
name|String
index|[
name|argv
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|argv
argument_list|,
literal|1
argument_list|,
name|new_argv
argument_list|,
literal|0
argument_list|,
name|new_argv
operator|.
name|length
argument_list|)
expr_stmt|;
name|JavaWrapper
name|wrapper
init|=
operator|new
name|JavaWrapper
argument_list|()
decl_stmt|;
name|wrapper
operator|.
name|runMain
argument_list|(
name|class_name
argument_list|,
name|new_argv
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

