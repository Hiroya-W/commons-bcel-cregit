begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.   *  */
end_comment

begin_comment
comment|/* Generated By:JJTree&JavaCC: Do not edit this line. MiniParser.java */
end_comment

begin_package
package|package
name|Mini
package|;
end_package

begin_class
specifier|public
class|class
name|MiniParser
comment|/*@bgen(jjtree)*/
implements|implements
name|MiniParserTreeConstants
implements|,
name|MiniParserConstants
block|{
comment|/*@bgen(jjtree)*/
specifier|protected
specifier|static
name|JJTMiniParserState
name|jjtree
init|=
operator|new
name|JJTMiniParserState
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Token
name|expr_token
decl_stmt|;
specifier|final
specifier|static
name|void
name|jjtreeOpenNodeScope
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
block|}
specifier|final
specifier|static
name|void
name|jjtreeCloseNodeScope
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
operator|(
operator|(
name|SimpleNode
operator|)
name|n
operator|)
operator|.
name|closeNode
argument_list|()
expr_stmt|;
block|}
comment|/* A program consists of a number of function declarations with a  * distinguished function `main' that starts the program.  */
specifier|static
specifier|final
specifier|public
name|void
name|Program
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Program */
name|ASTProgram
name|jjtn000
init|=
operator|new
name|ASTProgram
argument_list|(
name|JJTPROGRAM
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtreeOpenNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|9
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
name|FunDecl
argument_list|()
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* "FUN" Ident() "(" NameList() ")" = Expr()  */
specifier|static
specifier|final
specifier|public
name|void
name|FunDecl
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) FunDecl */
name|ASTFunDecl
name|jjtn000
init|=
operator|new
name|ASTFunDecl
argument_list|(
name|JJTFUNDECL
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtreeOpenNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|Token
name|t
decl_stmt|;
try|try
block|{
name|t
operator|=
name|jj_consume_token
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setPosition
argument_list|(
name|t
operator|.
name|beginLine
argument_list|,
name|t
operator|.
name|beginColumn
argument_list|)
expr_stmt|;
name|Ident
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FALSE
case|:
case|case
name|TRUE
case|:
case|case
name|READ
case|:
case|case
name|WRITE
case|:
case|case
name|IDENT
case|:
name|Ident
argument_list|()
expr_stmt|;
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|Ident
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|Expr
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
specifier|final
specifier|public
name|void
name|Expr
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Expr */
name|ASTExpr
name|jjtn000
init|=
operator|new
name|ASTExpr
argument_list|(
name|JJTEXPR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtreeOpenNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|int
name|kind
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|un_op
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|10
case|:
name|IfExpr
argument_list|()
expr_stmt|;
break|break;
case|case
literal|14
case|:
name|LetExpr
argument_list|()
expr_stmt|;
break|break;
case|case
name|FALSE
case|:
case|case
name|TRUE
case|:
case|case
name|LPAREN
case|:
case|case
name|READ
case|:
case|case
name|WRITE
case|:
case|case
name|IDENT
case|:
case|case
name|INTEGER
case|:
name|Term
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|OR
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
name|kind
operator|=
name|AddOp
argument_list|()
expr_stmt|;
name|Expr
argument_list|()
expr_stmt|;
name|jjtn000
operator|.
name|setKind
argument_list|(
name|kind
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
case|case
name|NOT
case|:
case|case
name|MINUS
case|:
name|un_op
operator|=
name|UnOp
argument_list|()
expr_stmt|;
name|jjtn000
operator|.
name|setUnOp
argument_list|(
name|un_op
argument_list|)
expr_stmt|;
name|Expr
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*  * The disambiguating algorithm of JavaCC automatically binds dangling  * else's to the innermost if statement. The LOOKAHEAD specification  * is to tell JavaCC that we know what we are doing.  */
specifier|static
specifier|final
specifier|public
name|void
name|IfExpr
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) IfExpr */
name|ASTIfExpr
name|jjtn000
init|=
operator|new
name|ASTIfExpr
argument_list|(
name|JJTIFEXPR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtreeOpenNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|Token
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|t
operator|=
name|jj_consume_token
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setPosition
argument_list|(
name|t
operator|.
name|beginLine
argument_list|,
name|t
operator|.
name|beginColumn
argument_list|)
expr_stmt|;
name|Expr
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|Expr
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|12
case|:
name|jj_consume_token
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|Expr
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
literal|13
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
specifier|final
specifier|public
name|void
name|LetExpr
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) LetExpr */
name|ASTLetExpr
name|jjtn000
init|=
operator|new
name|ASTLetExpr
argument_list|(
name|JJTLETEXPR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtreeOpenNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|Token
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|t
operator|=
name|jj_consume_token
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setPosition
argument_list|(
name|t
operator|.
name|beginLine
argument_list|,
name|t
operator|.
name|beginColumn
argument_list|)
expr_stmt|;
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|Ident
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|Expr
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FALSE
case|:
case|case
name|TRUE
case|:
case|case
name|READ
case|:
case|case
name|WRITE
case|:
case|case
name|IDENT
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_3
break|;
block|}
block|}
name|jj_consume_token
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|Expr
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
specifier|final
specifier|public
name|Token
name|FunAppl
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) FunAppl */
name|ASTFunAppl
name|jjtn000
init|=
operator|new
name|ASTFunAppl
argument_list|(
name|JJTFUNAPPL
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtreeOpenNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|Token
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|t
operator|=
name|Ident
argument_list|()
expr_stmt|;
name|jjtn000
operator|.
name|setPosition
argument_list|(
name|t
operator|.
name|beginLine
argument_list|,
name|t
operator|.
name|beginColumn
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|10
case|:
case|case
literal|14
case|:
case|case
name|NOT
case|:
case|case
name|FALSE
case|:
case|case
name|TRUE
case|:
case|case
name|MINUS
case|:
case|case
name|LPAREN
case|:
case|case
name|READ
case|:
case|case
name|WRITE
case|:
case|case
name|IDENT
case|:
case|case
name|INTEGER
case|:
name|Expr
argument_list|()
expr_stmt|;
name|label_4
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_4
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|Expr
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|static
specifier|final
specifier|public
name|void
name|Term
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Term */
name|ASTTerm
name|jjtn000
init|=
operator|new
name|ASTTerm
argument_list|(
name|JJTTERM
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtreeOpenNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|int
name|kind
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|Factor
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
case|case
name|MULT
case|:
case|case
name|MOD
case|:
case|case
name|DIV
case|:
name|kind
operator|=
name|MultOp
argument_list|()
expr_stmt|;
name|jjtn000
operator|.
name|setKind
argument_list|(
name|kind
argument_list|)
expr_stmt|;
name|Term
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setPosition
argument_list|(
name|expr_token
operator|.
name|beginLine
argument_list|,
name|expr_token
operator|.
name|beginColumn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
specifier|final
specifier|public
name|void
name|Factor
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Factor */
name|ASTFactor
name|jjtn000
init|=
operator|new
name|ASTFactor
argument_list|(
name|JJTFACTOR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtreeOpenNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|int
name|kind
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|Element
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|GT
case|:
case|case
name|LT
case|:
case|case
name|GEQ
case|:
case|case
name|LEQ
case|:
case|case
name|EQ
case|:
case|case
name|NEQ
case|:
name|kind
operator|=
name|CmpOp
argument_list|()
expr_stmt|;
name|jjtn000
operator|.
name|setKind
argument_list|(
name|kind
argument_list|)
expr_stmt|;
name|Factor
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setPosition
argument_list|(
name|expr_token
operator|.
name|beginLine
argument_list|,
name|expr_token
operator|.
name|beginColumn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
specifier|final
specifier|public
name|void
name|Element
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
name|jj_2_1
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|expr_token
operator|=
name|FunAppl
argument_list|()
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FALSE
case|:
case|case
name|TRUE
case|:
case|case
name|READ
case|:
case|case
name|WRITE
case|:
case|case
name|IDENT
case|:
name|expr_token
operator|=
name|Ident
argument_list|()
expr_stmt|;
break|break;
case|case
name|INTEGER
case|:
name|expr_token
operator|=
name|Integer
argument_list|()
expr_stmt|;
break|break;
case|case
name|LPAREN
case|:
name|expr_token
operator|=
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|Expr
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
specifier|static
specifier|final
specifier|public
name|Token
name|Integer
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Integer */
name|ASTInteger
name|jjtn000
init|=
operator|new
name|ASTInteger
argument_list|(
name|JJTINTEGER
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtreeOpenNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|Token
name|t
decl_stmt|;
try|try
block|{
name|t
operator|=
name|jj_consume_token
argument_list|(
name|INTEGER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setValue
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
operator|.
name|image
argument_list|)
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setPosition
argument_list|(
name|t
operator|.
name|beginLine
argument_list|,
name|t
operator|.
name|beginColumn
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|static
specifier|final
specifier|public
name|Token
name|Ident
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Ident */
name|ASTIdent
name|jjtn000
init|=
operator|new
name|ASTIdent
argument_list|(
name|JJTIDENT
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtreeOpenNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|Token
name|t
decl_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TRUE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
break|break;
case|case
name|FALSE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
break|break;
case|case
name|READ
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|READ
argument_list|)
expr_stmt|;
break|break;
case|case
name|WRITE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|WRITE
argument_list|)
expr_stmt|;
break|break;
case|case
name|IDENT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|IDENT
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setName
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setPosition
argument_list|(
name|t
operator|.
name|beginLine
argument_list|,
name|t
operator|.
name|beginColumn
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtreeCloseNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|static
specifier|final
specifier|public
name|int
name|AddOp
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PLUS
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
break|break;
case|case
name|MINUS
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
break|break;
case|case
name|OR
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|OR
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|t
operator|.
name|kind
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|static
specifier|final
specifier|public
name|int
name|MultOp
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|MULT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|MULT
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIV
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|DIV
argument_list|)
expr_stmt|;
break|break;
case|case
name|MOD
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|MOD
argument_list|)
expr_stmt|;
break|break;
case|case
name|AND
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|t
operator|.
name|kind
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|static
specifier|final
specifier|public
name|int
name|CmpOp
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EQ
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
break|break;
case|case
name|NEQ
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|NEQ
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEQ
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|LEQ
argument_list|)
expr_stmt|;
break|break;
case|case
name|GEQ
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|GEQ
argument_list|)
expr_stmt|;
break|break;
case|case
name|GT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|GT
argument_list|)
expr_stmt|;
break|break;
case|case
name|LT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|LT
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|t
operator|.
name|kind
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|static
specifier|final
specifier|public
name|int
name|UnOp
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|MINUS
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|16
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|t
operator|.
name|kind
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|static
specifier|final
specifier|private
name|boolean
name|jj_2_1
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
name|boolean
name|retval
init|=
operator|!
name|jj_3_1
argument_list|()
decl_stmt|;
name|jj_save
argument_list|(
literal|0
argument_list|,
name|xla
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
specifier|static
specifier|final
specifier|private
name|boolean
name|jj_3R_8
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|FALSE
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|static
specifier|final
specifier|private
name|boolean
name|jj_3R_11
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|IDENT
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|static
specifier|final
specifier|private
name|boolean
name|jj_3R_7
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TRUE
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|static
specifier|final
specifier|private
name|boolean
name|jj_3R_6
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_7
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_8
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_9
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_10
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_11
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|static
specifier|final
specifier|private
name|boolean
name|jj_3_1
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_5
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|static
specifier|final
specifier|private
name|boolean
name|jj_3R_5
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_6
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LPAREN
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|static
specifier|final
specifier|private
name|boolean
name|jj_3R_10
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|WRITE
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|static
specifier|final
specifier|private
name|boolean
name|jj_3R_9
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|READ
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|static
specifier|private
name|boolean
name|jj_initialized_once
init|=
literal|false
decl_stmt|;
specifier|static
specifier|public
name|MiniParserTokenManager
name|token_source
decl_stmt|;
specifier|static
name|ASCII_CharStream
name|jj_input_stream
decl_stmt|;
specifier|static
specifier|public
name|Token
name|token
decl_stmt|,
name|jj_nt
decl_stmt|;
specifier|static
specifier|private
name|int
name|jj_ntk
decl_stmt|;
specifier|static
specifier|private
name|Token
name|jj_scanpos
decl_stmt|,
name|jj_lastpos
decl_stmt|;
specifier|static
specifier|private
name|int
name|jj_la
decl_stmt|;
specifier|static
specifier|public
name|boolean
name|lookingAhead
init|=
literal|false
decl_stmt|;
comment|//  static private boolean jj_semLA;
specifier|static
specifier|private
name|int
name|jj_gen
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|17
index|]
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|int
index|[]
name|jj_la1_0
init|=
block|{
literal|0x200
block|,
literal|0x0
block|,
literal|0x1800000
block|,
literal|0x1c000000
block|,
literal|0x11c04400
block|,
literal|0x1000
block|,
literal|0x1800000
block|,
literal|0x0
block|,
literal|0x11c04400
block|,
literal|0xe2000000
block|,
literal|0x3f0000
block|,
literal|0x1800000
block|,
literal|0x1800000
block|,
literal|0x1c000000
block|,
literal|0xe2000000
block|,
literal|0x3f0000
block|,
literal|0x10400000
block|,}
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|int
index|[]
name|jj_la1_1
init|=
block|{
literal|0x0
block|,
literal|0x8
block|,
literal|0x130
block|,
literal|0x0
block|,
literal|0x331
block|,
literal|0x0
block|,
literal|0x130
block|,
literal|0x8
block|,
literal|0x331
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x331
block|,
literal|0x130
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,}
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|JJCalls
index|[]
name|jj_2_rtns
init|=
operator|new
name|JJCalls
index|[
literal|1
index|]
decl_stmt|;
specifier|static
specifier|private
name|boolean
name|jj_rescan
init|=
literal|false
decl_stmt|;
specifier|static
specifier|private
name|int
name|jj_gc
init|=
literal|0
decl_stmt|;
specifier|public
name|MiniParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
if|if
condition|(
name|jj_initialized_once
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: Second call to constructor of static parser.  You must"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"       either use ReInit() or set the JavaCC option STATIC to false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"       during parser generation."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
name|jj_initialized_once
operator|=
literal|true
expr_stmt|;
name|jj_input_stream
operator|=
operator|new
name|ASCII_CharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|MiniParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|ASCII_CharStream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniParserTokenManager
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|MiniParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
if|if
condition|(
name|jj_initialized_once
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: Second call to constructor of static parser.  You must"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"       either use ReInit() or set the JavaCC option STATIC to false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"       during parser generation."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
name|jj_initialized_once
operator|=
literal|true
expr_stmt|;
name|jj_input_stream
operator|=
operator|new
name|ASCII_CharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|MiniParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|ASCII_CharStream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniParserTokenManager
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|MiniParser
parameter_list|(
name|MiniParserTokenManager
name|tm
parameter_list|)
block|{
if|if
condition|(
name|jj_initialized_once
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: Second call to constructor of static parser.  You must"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"       either use ReInit() or set the JavaCC option STATIC to false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"       during parser generation."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
name|jj_initialized_once
operator|=
literal|true
expr_stmt|;
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|MiniParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
specifier|final
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|MiniParserTokenManager
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|jj_gc
operator|>
literal|100
condition|)
block|{
name|jj_gc
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JJCalls
name|c
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|gen
operator|<
name|jj_gen
condition|)
block|{
name|c
operator|.
name|first
operator|=
literal|null
expr_stmt|;
block|}
name|c
operator|=
name|c
operator|.
name|next
expr_stmt|;
block|}
block|}
block|}
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
specifier|static
specifier|final
specifier|private
name|boolean
name|jj_scan_token
parameter_list|(
name|int
name|kind
parameter_list|)
block|{
if|if
condition|(
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
name|jj_la
operator|--
expr_stmt|;
if|if
condition|(
name|jj_scanpos
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
operator|=
name|MiniParserTokenManager
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|jj_rescan
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Token
name|tok
init|=
name|token
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|tok
operator|!=
name|jj_scanpos
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|tok
operator|=
name|tok
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|tok
operator|!=
literal|null
condition|)
block|{
name|jj_add_error_token
argument_list|(
name|kind
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|jj_scanpos
operator|.
name|kind
operator|!=
name|kind
operator|)
return|;
block|}
specifier|static
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|MiniParserTokenManager
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
specifier|static
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|lookingAhead
condition|?
name|jj_scanpos
else|:
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
block|{
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|MiniParserTokenManager
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|t
return|;
block|}
specifier|static
specifier|final
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|MiniParserTokenManager
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
block|}
specifier|static
specifier|private
name|java
operator|.
name|util
operator|.
name|Vector
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Vector
argument_list|()
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
specifier|static
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_lasttokens
init|=
operator|new
name|int
index|[
literal|100
index|]
decl_stmt|;
specifier|static
specifier|private
name|int
name|jj_endpos
decl_stmt|;
specifier|static
specifier|private
name|void
name|jj_add_error_token
parameter_list|(
name|int
name|kind
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
literal|100
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pos
operator|==
name|jj_endpos
operator|+
literal|1
condition|)
block|{
name|jj_lasttokens
index|[
name|jj_endpos
operator|++
index|]
operator|=
name|kind
expr_stmt|;
block|}
if|else if
condition|(
name|jj_endpos
operator|!=
literal|0
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
name|jj_endpos
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_endpos
condition|;
name|i
operator|++
control|)
block|{
name|jj_expentry
index|[
name|i
index|]
operator|=
name|jj_lasttokens
index|[
name|i
index|]
expr_stmt|;
block|}
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Enumeration
name|e
init|=
name|jj_expentries
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
index|[]
name|oldentry
init|=
operator|(
name|int
index|[]
operator|)
operator|(
name|e
operator|.
name|nextElement
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|oldentry
operator|.
name|length
operator|==
name|jj_expentry
operator|.
name|length
condition|)
block|{
name|exists
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentry
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oldentry
index|[
name|i
index|]
operator|!=
name|jj_expentry
index|[
name|i
index|]
condition|)
block|{
name|exists
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|exists
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|jj_expentries
operator|.
name|addElement
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|!=
literal|0
condition|)
block|{
name|jj_lasttokens
index|[
operator|(
name|jj_endpos
operator|=
name|pos
operator|)
operator|-
literal|1
index|]
operator|=
name|kind
expr_stmt|;
block|}
block|}
block|}
specifier|static
specifier|final
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|removeAllElements
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|43
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|43
condition|;
name|i
operator|++
control|)
block|{
name|la1tokens
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_1
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|32
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|43
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|addElement
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|jj_endpos
operator|=
literal|0
expr_stmt|;
name|jj_rescan_token
argument_list|()
expr_stmt|;
name|jj_add_error_token
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
operator|(
name|int
index|[]
operator|)
name|jj_expentries
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
specifier|static
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{
block|}
specifier|static
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{
block|}
specifier|static
specifier|final
specifier|private
name|void
name|jj_rescan_token
parameter_list|()
block|{
name|jj_rescan
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
do|do
block|{
if|if
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
name|jj_la
operator|=
name|p
operator|.
name|arg
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|p
operator|.
name|first
expr_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|jj_3_1
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|!=
literal|null
condition|)
do|;
block|}
name|jj_rescan
operator|=
literal|false
expr_stmt|;
block|}
specifier|static
specifier|final
specifier|private
name|void
name|jj_save
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|xla
parameter_list|)
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|index
index|]
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|next
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
break|break;
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
name|p
operator|.
name|gen
operator|=
name|jj_gen
operator|+
name|xla
operator|-
name|jj_la
expr_stmt|;
name|p
operator|.
name|first
operator|=
name|token
expr_stmt|;
name|p
operator|.
name|arg
operator|=
name|xla
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|JJCalls
block|{
name|int
name|gen
decl_stmt|;
name|Token
name|first
decl_stmt|;
name|int
name|arg
decl_stmt|;
name|JJCalls
name|next
decl_stmt|;
block|}
block|}
end_class

end_unit

