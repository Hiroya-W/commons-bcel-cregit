begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_comment
comment|/* Generated By:JJTree: Do not edit this line. ASTIdent.java */
end_comment

begin_comment
comment|/* JJT: 0.3pre1 */
end_comment

begin_package
package|package
name|Mini
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|ConstantPoolGen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|ILOAD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|InstructionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|LocalVariableGen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|MethodGen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|generic
operator|.
name|PUSH
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ASTIdent
extends|extends
name|ASTExpr
block|{
specifier|public
specifier|static
name|Node
name|jjtCreate
parameter_list|(
specifier|final
name|MiniParser
name|p
parameter_list|,
specifier|final
name|int
name|id
parameter_list|)
block|{
return|return
operator|new
name|ASTIdent
argument_list|(
name|p
argument_list|,
name|id
argument_list|)
return|;
block|}
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Variable
name|reference
decl_stmt|;
comment|// Reference in environment to decl of this ident
comment|// Generated methods
name|ASTIdent
parameter_list|(
specifier|final
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|ASTIdent
parameter_list|(
specifier|final
name|MiniParser
name|p
parameter_list|,
specifier|final
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|p
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ASTIdent
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|type
parameter_list|,
specifier|final
name|int
name|line
parameter_list|,
specifier|final
name|int
name|column
parameter_list|)
block|{
name|super
argument_list|(
name|line
argument_list|,
name|column
argument_list|,
name|JJTIDENT
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|// closeNode, dump inherited
comment|/**      * Fifth pass, produce Java byte code.      */
annotation|@
name|Override
specifier|public
name|void
name|byte_code
parameter_list|(
specifier|final
name|InstructionList
name|il
parameter_list|,
specifier|final
name|MethodGen
name|method
parameter_list|,
specifier|final
name|ConstantPoolGen
name|cp
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"TRUE"
argument_list|)
condition|)
block|{
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
name|il
operator|.
name|append
argument_list|(
operator|new
name|PUSH
argument_list|(
name|cp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|LocalVariableGen
name|local_var
init|=
name|reference
operator|.
name|getLocalVariable
argument_list|()
decl_stmt|;
name|il
operator|.
name|append
argument_list|(
operator|new
name|ILOAD
argument_list|(
name|local_var
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ASTFunDecl
operator|.
name|push
argument_list|()
expr_stmt|;
block|}
comment|/**      * Fourth pass, produce Java code.      */
annotation|@
name|Override
specifier|public
name|void
name|code
parameter_list|(
specifier|final
name|StringBuffer
name|buf
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"TRUE"
argument_list|)
condition|)
block|{
name|ASTFunDecl
operator|.
name|push
argument_list|(
name|buf
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
name|ASTFunDecl
operator|.
name|push
argument_list|(
name|buf
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ASTFunDecl
operator|.
name|push
argument_list|(
name|buf
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Overrides AstExpr.eval()      */
annotation|@
name|Override
specifier|public
name|int
name|eval
parameter_list|(
specifier|final
name|int
name|expected
parameter_list|)
block|{
specifier|final
name|ASTIdent
name|ident
init|=
name|reference
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|t
init|=
name|ident
operator|.
name|getType
argument_list|()
decl_stmt|;
name|is_simple
operator|=
literal|true
expr_stmt|;
comment|// (Very) simple expression, always true
if|if
condition|(
name|t
operator|==
name|T_UNKNOWN
operator|&&
name|expected
operator|==
name|T_UNKNOWN
condition|)
block|{
name|type
operator|=
name|T_UNKNOWN
expr_stmt|;
block|}
if|else if
condition|(
name|t
operator|==
name|T_UNKNOWN
operator|&&
name|expected
operator|!=
name|T_UNKNOWN
condition|)
block|{
name|ident
operator|.
name|setType
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|type
operator|=
name|expected
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|t
operator|!=
name|T_UNKNOWN
operator|&&
name|expected
operator|==
name|T_UNKNOWN
condition|)
block|{
name|ident
operator|.
name|setType
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|type
operator|=
name|t
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * @return identifier and line/column number of appearance      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" = "
operator|+
name|name
return|;
block|}
comment|/**      * Overrides ASTExpr.traverse()      */
annotation|@
name|Override
specifier|public
name|ASTExpr
name|traverse
parameter_list|(
specifier|final
name|Environment
name|env
parameter_list|)
block|{
specifier|final
name|EnvEntry
name|entry
init|=
name|env
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|MiniC
operator|.
name|addError
argument_list|(
name|line
argument_list|,
name|column
argument_list|,
literal|"Undeclared identifier "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|instanceof
name|Function
condition|)
block|{
name|MiniC
operator|.
name|addError
argument_list|(
name|line
argument_list|,
name|column
argument_list|,
literal|"Function "
operator|+
name|name
operator|+
literal|" used as an identifier."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reference
operator|=
operator|(
name|Variable
operator|)
name|entry
expr_stmt|;
block|}
return|return
name|this
return|;
comment|// Nothing to reduce/traverse further here
block|}
block|}
end_class

end_unit

